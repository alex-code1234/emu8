function CONV_INT8(v) { return v > 127 ? v - 256 : v; }
function CONV_INT16(v) { return v > 32767 ? v - 65536 : v; }
function Cpu_op_00_00() { }
function Cpu_op_00_01() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_BC(this.tmp_word); this.tstate += 6; }
function Cpu_op_00_02() { this.regs[17] = this.regs[7]; this.regs[16] = (this.regs[1] << 8 | this.regs[0]) + 1 & 0xFF; this.ptr_write(this.regs[1] << 8 | this.regs[0], this.regs[7]); this.tstate += 3; }
function Cpu_op_00_03() { this.SET_BC((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 2; }
function Cpu_op_00_04() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[1] & 0x0F) + 1 & 0x10); this.regs[1] = this.regs[1] + 1 & 0xFF; this.regs[6] |= ((this.regs[1] === 0x80) ? 0x04 : 0) | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40); }
function Cpu_op_00_05() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[1] & 0x0F) - 1 & 0x10) | ((this.regs[1] === 0x80) ? 0x04 : 0); this.regs[1] = this.regs[1] - 1 & 0xFF; this.regs[6] |= this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40); }
function Cpu_op_00_06() { this.regs[1] = this.read_byte(); this.tstate += 3; }
function Cpu_op_00_07() { this.regs[7] = this.regs[7] << 1 & 0xFF | this.regs[7] >> 7; this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x29; }
function Cpu_op_00_08() { this.tmp_word = (this.regs[7] << 8 | this.regs[6]); this.SET_AF((this.regs[25] << 8 | this.regs[24])); this.SET_AF_(this.tmp_word); }
function Cpu_op_00_09() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) + (this.regs[1] << 8 | this.regs[0]); this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + ((this.regs[1] << 8 | this.regs[0]) & 0x0FFF); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; }
function Cpu_op_00_0A() { this.regs[7] = this.ptr_read(this.regs[1] << 8 | this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 3; }
function Cpu_op_00_0B() { this.SET_BC((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.tstate += 2; }
function Cpu_op_00_0C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[0] & 0x0F) + 1 & 0x10); this.regs[0] = this.regs[0] + 1 & 0xFF; this.regs[6] |= ((this.regs[0] === 0x80) ? 0x04 : 0) | this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40); }
function Cpu_op_00_0D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[0] & 0x0F) - 1 & 0x10) | ((this.regs[0] === 0x80) ? 0x04 : 0); this.regs[0] = this.regs[0] - 1 & 0xFF; this.regs[6] |= this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40); }
function Cpu_op_00_0E() { this.regs[0] = this.read_byte(); this.tstate += 3; }
function Cpu_op_00_0F() { this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x01; this.regs[7] = this.regs[7] >> 1 | this.regs[7] << 7 & 0xFF; this.regs[6] |= this.regs[7] & 0x28; }
function Cpu_op_00_10() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; this.regs[1] = this.regs[1] - 1 & 0xFF; if (this.regs[1]) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 9; } else { this.tstate += 4; } }
function Cpu_op_00_11() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_DE(this.tmp_word); this.tstate += 6; }
function Cpu_op_00_12() { this.regs[17] = this.regs[7]; this.regs[16] = (this.regs[3] << 8 | this.regs[2]) + 1 & 0xFF; this.ptr_write(this.regs[3] << 8 | this.regs[2], this.regs[7]); this.tstate += 3; }
function Cpu_op_00_13() { this.SET_DE((this.regs[3] << 8 | this.regs[2]) + 1 & 0xFFFF); this.tstate += 2; }
function Cpu_op_00_14() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[3] & 0x0F) + 1 & 0x10); this.regs[3] = this.regs[3] + 1 & 0xFF; this.regs[6] |= ((this.regs[3] === 0x80) ? 0x04 : 0) | this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40); }
function Cpu_op_00_15() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[3] & 0x0F) - 1 & 0x10) | ((this.regs[3] === 0x80) ? 0x04 : 0); this.regs[3] = this.regs[3] - 1 & 0xFF; this.regs[6] |= this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40); }
function Cpu_op_00_16() { this.regs[3] = this.read_byte(); this.tstate += 3; }
function Cpu_op_00_17() { this.tmp_byte = this.regs[7]; this.regs[7] = this.regs[7] << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x28 | this.tmp_byte >> 7; }
function Cpu_op_00_18() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; }
function Cpu_op_00_19() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) + (this.regs[3] << 8 | this.regs[2]); this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + ((this.regs[3] << 8 | this.regs[2]) & 0x0FFF); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; }
function Cpu_op_00_1A() { this.regs[7] = this.ptr_read(this.regs[3] << 8 | this.regs[2]); this.SET_MP((this.regs[3] << 8 | this.regs[2]) + 1 & 0xFFFF); this.tstate += 3; }
function Cpu_op_00_1B() { this.SET_DE((this.regs[3] << 8 | this.regs[2]) - 1 & 0xFFFF); this.tstate += 2; }
function Cpu_op_00_1C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[2] & 0x0F) + 1 & 0x10); this.regs[2] = this.regs[2] + 1 & 0xFF; this.regs[6] |= ((this.regs[2] === 0x80) ? 0x04 : 0) | this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40); }
function Cpu_op_00_1D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[2] & 0x0F) - 1 & 0x10) | ((this.regs[2] === 0x80) ? 0x04 : 0); this.regs[2] = this.regs[2] - 1 & 0xFF; this.regs[6] |= this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40); }
function Cpu_op_00_1E() { this.regs[2] = this.read_byte(); this.tstate += 3; }
function Cpu_op_00_1F() { this.tmp_byte = this.regs[7]; this.regs[7] = this.regs[7] >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x28 | this.tmp_byte & 0x01; }
function Cpu_op_00_20() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (!(this.regs[6] & 0x40)) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } }
function Cpu_op_00_21() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_HL(this.tmp_word); this.tstate += 6; }
function Cpu_op_00_22() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.ptr_write(this.tmp_word, this.regs[4]); this.ptr_write(this.tmp_word + 1 & 0xFFFF, this.regs[5]); this.tstate += 12; }
function Cpu_op_00_23() { this.SET_HL((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.tstate += 2; }
function Cpu_op_00_24() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[5] & 0x0F) + 1 & 0x10); this.regs[5] = this.regs[5] + 1 & 0xFF; this.regs[6] |= ((this.regs[5] === 0x80) ? 0x04 : 0) | this.regs[5] & 0xA8 | (this.regs[5] ? 0 : 0x40); }
function Cpu_op_00_25() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[5] & 0x0F) - 1 & 0x10) | ((this.regs[5] === 0x80) ? 0x04 : 0); this.regs[5] = this.regs[5] - 1 & 0xFF; this.regs[6] |= this.regs[5] & 0xA8 | (this.regs[5] ? 0 : 0x40); }
function Cpu_op_00_26() { this.regs[5] = this.read_byte(); this.tstate += 3; }
function Cpu_op_00_27() { this.tmp_byte = this.regs[7]; if (this.regs[6] & 0x02) { if ((this.regs[6] & 0x10) || ((this.regs[7] & 0x0F) > 9)) this.tmp_byte -= 6; if ((this.regs[6] & 0x01) || (this.regs[7] > 0x99)) this.tmp_byte -= 0x60; } else { if ((this.regs[6] & 0x10) || ((this.regs[7] & 0x0F) > 9)) this.tmp_byte += 6; if ((this.regs[6] & 0x01) || (this.regs[7] > 0x99)) this.tmp_byte += 0x60; } this.tmp_byte &= 0xFF; this.regs[6] = this.regs[6] & 0x03 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | (this.tmp_byte ^ this.regs[7]) & 0x10 | (this.regs[7] > 0x99 ? 0x01 : 0); this.regs[7] = this.tmp_byte; }
function Cpu_op_00_28() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (this.regs[6] & 0x40) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } }
function Cpu_op_00_29() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) + (this.regs[5] << 8 | this.regs[4]); this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; }
function Cpu_op_00_2A() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[4] = this.ptr_read(this.tmp_word); this.regs[5] = this.ptr_read(this.tmp_word + 1 & 0xFFFF); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 12; }
function Cpu_op_00_2B() { this.SET_HL((this.regs[5] << 8 | this.regs[4]) - 1 & 0xFFFF); this.tstate += 2; }
function Cpu_op_00_2C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[4] & 0x0F) + 1 & 0x10); this.regs[4] = this.regs[4] + 1 & 0xFF; this.regs[6] |= ((this.regs[4] === 0x80) ? 0x04 : 0) | this.regs[4] & 0xA8 | (this.regs[4] ? 0 : 0x40); }
function Cpu_op_00_2D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[4] & 0x0F) - 1 & 0x10) | ((this.regs[4] === 0x80) ? 0x04 : 0); this.regs[4] = this.regs[4] - 1 & 0xFF; this.regs[6] |= this.regs[4] & 0xA8 | (this.regs[4] ? 0 : 0x40); }
function Cpu_op_00_2E() { this.regs[4] = this.read_byte(); this.tstate += 3; }
function Cpu_op_00_2F() { this.regs[7] ^= 0xFF; this.regs[6] = this.regs[6] & 0xC5 | this.regs[7] & 0x28 | 0x12; }
function Cpu_op_00_30() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (!(this.regs[6] & 0x01)) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } }
function Cpu_op_00_31() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_SP(this.tmp_word); this.tstate += 6; }
function Cpu_op_00_32() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[17] = this.regs[7]; this.regs[16] = this.tmp_word + 1 & 0xFF; this.ptr_write(this.tmp_word, this.regs[7]); this.tstate += 9; }
function Cpu_op_00_33() { this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tstate += 2; }
function Cpu_op_00_34() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[6] = this.regs[6] & 0x01 | ((this.tmp_byte & 0x0F) + 1 & 0x10); this.tmp_byte = this.tmp_byte + 1 & 0xFF; this.regs[6] |= ((this.tmp_byte === 0x80) ? 0x04 : 0) | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40); this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; }
function Cpu_op_00_35() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.tmp_byte & 0x0F) - 1 & 0x10) | ((this.tmp_byte === 0x80) ? 0x04 : 0); this.tmp_byte = this.tmp_byte - 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40); this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; }
function Cpu_op_00_36() { this.tmp_byte = this.read_byte(); this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 6; }
function Cpu_op_00_37() { this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x28 | 0x01; }
function Cpu_op_00_38() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (this.regs[6] & 0x01) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } }
function Cpu_op_00_39() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) + (this.regs[13] << 8 | this.regs[12]); this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + ((this.regs[13] << 8 | this.regs[12]) & 0x0FFF); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; }
function Cpu_op_00_3A() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[7] = this.ptr_read(this.tmp_word); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 9; }
function Cpu_op_00_3B() { this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.tstate += 2; }
function Cpu_op_00_3C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[7] & 0x0F) + 1 & 0x10); this.regs[7] = this.regs[7] + 1 & 0xFF; this.regs[6] |= ((this.regs[7] === 0x80) ? 0x04 : 0) | this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40); }
function Cpu_op_00_3D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[7] & 0x0F) - 1 & 0x10) | ((this.regs[7] === 0x80) ? 0x04 : 0); this.regs[7] = this.regs[7] - 1 & 0xFF; this.regs[6] |= this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40); }
function Cpu_op_00_3E() { this.regs[7] = this.read_byte(); this.tstate += 3; }
function Cpu_op_00_3F() { this.regs[6] = this.regs[6] & 0xC4 | (this.regs[6] & 0x01) << 4 | (this.regs[6] & 0x01) ^ 0x01 | this.regs[7] & 0x28; }
function Cpu_op_00_40() { this.regs[1] = this.regs[1]; }
function Cpu_op_00_41() { this.regs[1] = this.regs[0]; }
function Cpu_op_00_42() { this.regs[1] = this.regs[3]; }
function Cpu_op_00_43() { this.regs[1] = this.regs[2]; }
function Cpu_op_00_44() { this.regs[1] = this.regs[5]; }
function Cpu_op_00_45() { this.regs[1] = this.regs[4]; }
function Cpu_op_00_46() { this.regs[1] = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tstate += 3; }
function Cpu_op_00_47() { this.regs[1] = this.regs[7]; }
function Cpu_op_00_48() { this.regs[0] = this.regs[1]; }
function Cpu_op_00_49() { this.regs[0] = this.regs[0]; }
function Cpu_op_00_4A() { this.regs[0] = this.regs[3]; }
function Cpu_op_00_4B() { this.regs[0] = this.regs[2]; }
function Cpu_op_00_4C() { this.regs[0] = this.regs[5]; }
function Cpu_op_00_4D() { this.regs[0] = this.regs[4]; }
function Cpu_op_00_4E() { this.regs[0] = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tstate += 3; }
function Cpu_op_00_4F() { this.regs[0] = this.regs[7]; }
function Cpu_op_00_50() { this.regs[3] = this.regs[1]; }
function Cpu_op_00_51() { this.regs[3] = this.regs[0]; }
function Cpu_op_00_52() { this.regs[3] = this.regs[3]; }
function Cpu_op_00_53() { this.regs[3] = this.regs[2]; }
function Cpu_op_00_54() { this.regs[3] = this.regs[5]; }
function Cpu_op_00_55() { this.regs[3] = this.regs[4]; }
function Cpu_op_00_56() { this.regs[3] = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tstate += 3; }
function Cpu_op_00_57() { this.regs[3] = this.regs[7]; }
function Cpu_op_00_58() { this.regs[2] = this.regs[1]; }
function Cpu_op_00_59() { this.regs[2] = this.regs[0]; }
function Cpu_op_00_5A() { this.regs[2] = this.regs[3]; }
function Cpu_op_00_5B() { this.regs[2] = this.regs[2]; }
function Cpu_op_00_5C() { this.regs[2] = this.regs[5]; }
function Cpu_op_00_5D() { this.regs[2] = this.regs[4]; }
function Cpu_op_00_5E() { this.regs[2] = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tstate += 3; }
function Cpu_op_00_5F() { this.regs[2] = this.regs[7]; }
function Cpu_op_00_60() { this.regs[5] = this.regs[1]; }
function Cpu_op_00_61() { this.regs[5] = this.regs[0]; }
function Cpu_op_00_62() { this.regs[5] = this.regs[3]; }
function Cpu_op_00_63() { this.regs[5] = this.regs[2]; }
function Cpu_op_00_64() { this.regs[5] = this.regs[5]; }
function Cpu_op_00_65() { this.regs[5] = this.regs[4]; }
function Cpu_op_00_66() { this.regs[5] = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tstate += 3; }
function Cpu_op_00_67() { this.regs[5] = this.regs[7]; }
function Cpu_op_00_68() { this.regs[4] = this.regs[1]; }
function Cpu_op_00_69() { this.regs[4] = this.regs[0]; }
function Cpu_op_00_6A() { this.regs[4] = this.regs[3]; }
function Cpu_op_00_6B() { this.regs[4] = this.regs[2]; }
function Cpu_op_00_6C() { this.regs[4] = this.regs[5]; }
function Cpu_op_00_6D() { this.regs[4] = this.regs[4]; }
function Cpu_op_00_6E() { this.regs[4] = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tstate += 3; }
function Cpu_op_00_6F() { this.regs[4] = this.regs[7]; }
function Cpu_op_00_70() { this.ptr_write(this.regs[5] << 8 | this.regs[4], this.regs[1]); this.tstate += 3; }
function Cpu_op_00_71() { this.ptr_write(this.regs[5] << 8 | this.regs[4], this.regs[0]); this.tstate += 3; }
function Cpu_op_00_72() { this.ptr_write(this.regs[5] << 8 | this.regs[4], this.regs[3]); this.tstate += 3; }
function Cpu_op_00_73() { this.ptr_write(this.regs[5] << 8 | this.regs[4], this.regs[2]); this.tstate += 3; }
function Cpu_op_00_74() { this.ptr_write(this.regs[5] << 8 | this.regs[4], this.regs[5]); this.tstate += 3; }
function Cpu_op_00_75() { this.ptr_write(this.regs[5] << 8 | this.regs[4], this.regs[4]); this.tstate += 3; }
function Cpu_op_00_76() { this.is_halted = true; this.SET_PC((this.regs[15] << 8 | this.regs[14]) - 1 & 0xFFFF); }
function Cpu_op_00_77() { this.ptr_write(this.regs[5] << 8 | this.regs[4], this.regs[7]); this.tstate += 3; }
function Cpu_op_00_78() { this.regs[7] = this.regs[1]; }
function Cpu_op_00_79() { this.regs[7] = this.regs[0]; }
function Cpu_op_00_7A() { this.regs[7] = this.regs[3]; }
function Cpu_op_00_7B() { this.regs[7] = this.regs[2]; }
function Cpu_op_00_7C() { this.regs[7] = this.regs[5]; }
function Cpu_op_00_7D() { this.regs[7] = this.regs[4]; }
function Cpu_op_00_7E() { this.regs[7] = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tstate += 3; }
function Cpu_op_00_7F() { this.regs[7] = this.regs[7]; }
function Cpu_op_00_80() { this.tmp_word = this.regs[7] + this.regs[1]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[1] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[1]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_81() { this.tmp_word = this.regs[7] + this.regs[0]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[0] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[0]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_82() { this.tmp_word = this.regs[7] + this.regs[3]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[3] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[3]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_83() { this.tmp_word = this.regs[7] + this.regs[2]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[2] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[2]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_84() { this.tmp_word = this.regs[7] + this.regs[5]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[5] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[5]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_85() { this.tmp_word = this.regs[7] + this.regs[4]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[4] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[4]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_86() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_word = this.regs[7] + this.tmp_byte; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; }
function Cpu_op_00_87() { this.tmp_word = this.regs[7] + this.regs[7]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[7] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[7]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_88() { this.tmp_word = this.regs[7] + this.regs[1] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[1] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[1]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_89() { this.tmp_word = this.regs[7] + this.regs[0] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[0] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[0]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_8A() { this.tmp_word = this.regs[7] + this.regs[3] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[3] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[3]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_8B() { this.tmp_word = this.regs[7] + this.regs[2] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[2] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[2]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_8C() { this.tmp_word = this.regs[7] + this.regs[5] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[5] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[5]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_8D() { this.tmp_word = this.regs[7] + this.regs[4] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[4] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[4]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_8E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_word = this.regs[7] + this.tmp_byte + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; }
function Cpu_op_00_8F() { this.tmp_word = this.regs[7] + this.regs[7] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[7] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[7]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_90() { this.tmp_word = this.regs[7] - this.regs[1] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[1] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[1]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_91() { this.tmp_word = this.regs[7] - this.regs[0] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[0] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[0]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_92() { this.tmp_word = this.regs[7] - this.regs[3] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[3] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[3]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_93() { this.tmp_word = this.regs[7] - this.regs[2] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[2] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[2]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_94() { this.tmp_word = this.regs[7] - this.regs[5] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[5] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[5]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_95() { this.tmp_word = this.regs[7] - this.regs[4] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[4] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[4]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_96() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; }
function Cpu_op_00_97() { this.tmp_word = this.regs[7] - this.regs[7] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[7] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[7]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_98() { this.tmp_word = this.regs[7] - this.regs[1] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[1] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[1]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_99() { this.tmp_word = this.regs[7] - this.regs[0] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[0] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[0]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_9A() { this.tmp_word = this.regs[7] - this.regs[3] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[3] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[3]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_9B() { this.tmp_word = this.regs[7] - this.regs[2] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[2] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[2]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_9C() { this.tmp_word = this.regs[7] - this.regs[5] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[5] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[5]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_9D() { this.tmp_word = this.regs[7] - this.regs[4] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[4] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[4]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_9E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_word = this.regs[7] - this.tmp_byte - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; }
function Cpu_op_00_9F() { this.tmp_word = this.regs[7] - this.regs[7] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[7] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[7]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; }
function Cpu_op_00_A0() { this.regs[7] &= this.regs[1]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_A1() { this.regs[7] &= this.regs[0]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_A2() { this.regs[7] &= this.regs[3]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_A3() { this.regs[7] &= this.regs[2]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_A4() { this.regs[7] &= this.regs[5]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_A5() { this.regs[7] &= this.regs[4]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_A6() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[7] &= this.tmp_byte; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; }
function Cpu_op_00_A7() { this.regs[7] &= this.regs[7]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_A8() { this.regs[7] ^= this.regs[1]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_A9() { this.regs[7] ^= this.regs[0]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_AA() { this.regs[7] ^= this.regs[3]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_AB() { this.regs[7] ^= this.regs[2]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_AC() { this.regs[7] ^= this.regs[5]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_AD() { this.regs[7] ^= this.regs[4]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_AE() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[7] ^= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; }
function Cpu_op_00_AF() { this.regs[7] ^= this.regs[7]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_B0() { this.regs[7] |= this.regs[1]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_B1() { this.regs[7] |= this.regs[0]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_B2() { this.regs[7] |= this.regs[3]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_B3() { this.regs[7] |= this.regs[2]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_B4() { this.regs[7] |= this.regs[5]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_B5() { this.regs[7] |= this.regs[4]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_B6() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[7] |= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; }
function Cpu_op_00_B7() { this.regs[7] |= this.regs[7]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; }
function Cpu_op_00_B8() { this.tmp_word = this.regs[7] - this.regs[1] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[1] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[1]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[1] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); }
function Cpu_op_00_B9() { this.tmp_word = this.regs[7] - this.regs[0] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[0] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[0]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[0] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); }
function Cpu_op_00_BA() { this.tmp_word = this.regs[7] - this.regs[3] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[3] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[3]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[3] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); }
function Cpu_op_00_BB() { this.tmp_word = this.regs[7] - this.regs[2] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[2] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[2]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[2] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); }
function Cpu_op_00_BC() { this.tmp_word = this.regs[7] - this.regs[5] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[5] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[5]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[5] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); }
function Cpu_op_00_BD() { this.tmp_word = this.regs[7] - this.regs[4] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[4] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[4]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[4] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); }
function Cpu_op_00_BE() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_byte & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.tstate += 3; }
function Cpu_op_00_BF() { this.tmp_word = this.regs[7] - this.regs[7] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[7] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[7]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[7] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); }
function Cpu_op_00_C0() { if (!(this.regs[6] & 0x40)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } }
function Cpu_op_00_C1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_BC(this.tmp_word); this.tstate += 6; }
function Cpu_op_00_C2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x40)) { this.SET_PC(this.tmp_word); } this.tstate += 6; }
function Cpu_op_00_C3() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; }
function Cpu_op_00_C4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x40)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } }
function Cpu_op_00_C5() { this.tmp_word_b = (this.regs[1] << 8 | this.regs[0]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; }
function Cpu_op_00_C6() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] + this.tmp_byte; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; }
function Cpu_op_00_C7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x00); this.SET_MP(0x00); this.tstate += 7; }
function Cpu_op_00_C8() { if (this.regs[6] & 0x40) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } }
function Cpu_op_00_C9() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; }
function Cpu_op_00_CA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x40) { this.SET_PC(this.tmp_word); } this.tstate += 6; }
function Cpu_op_00_CB() { this.prefix = 0xCB; this.optable = optable_CB; this.is_noint = true; }
function Cpu_op_00_CC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x40) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } }
function Cpu_op_00_CD() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 13; }
function Cpu_op_00_CE() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] + this.tmp_byte + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; }
function Cpu_op_00_CF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x08); this.SET_MP(0x08); this.tstate += 7; }
function Cpu_op_00_D0() { if (!(this.regs[6] & 0x01)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } }
function Cpu_op_00_D1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_DE(this.tmp_word); this.tstate += 6; }
function Cpu_op_00_D2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x01)) { this.SET_PC(this.tmp_word); } this.tstate += 6; }
function Cpu_op_00_D3() { this.tmp_word = this.regs[7] << 8 | this.read_byte(); this.ptr_out(this.tmp_word, this.regs[7]); this.regs[16] = this.tmp_word + 1 & 0xFF; this.regs[17] = this.regs[7]; this.tstate += 7; }
function Cpu_op_00_D4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x01)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } }
function Cpu_op_00_D5() { this.tmp_word_b = (this.regs[3] << 8 | this.regs[2]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; }
function Cpu_op_00_D6() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; }
function Cpu_op_00_D7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x10); this.SET_MP(0x10); this.tstate += 7; }
function Cpu_op_00_D8() { if (this.regs[6] & 0x01) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } }
function Cpu_op_00_D9() { this.tmp_word = (this.regs[1] << 8 | this.regs[0]); this.SET_BC((this.regs[19] << 8 | this.regs[18])); this.SET_BC_(this.tmp_word); this.tmp_word = (this.regs[3] << 8 | this.regs[2]); this.SET_DE((this.regs[21] << 8 | this.regs[20])); this.SET_DE_(this.tmp_word); this.tmp_word = (this.regs[5] << 8 | this.regs[4]); this.SET_HL((this.regs[23] << 8 | this.regs[22])); this.SET_HL_(this.tmp_word); }
function Cpu_op_00_DA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x01) { this.SET_PC(this.tmp_word); } this.tstate += 6; }
function Cpu_op_00_DB() { this.tmp_word = this.regs[7] << 8 | this.read_byte(); this.regs[7] = this.ptr_in(this.tmp_word); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 7; }
function Cpu_op_00_DC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x01) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } }
function Cpu_op_00_DD() { this.prefix = 0xDD; this.optable = optable_DD; this.is_noint = true; }
function Cpu_op_00_DE() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] - this.tmp_byte - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; }
function Cpu_op_00_DF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x18); this.SET_MP(0x18); this.tstate += 7; }
function Cpu_op_00_E0() { if (!(this.regs[6] & 0x04)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } }
function Cpu_op_00_E1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_HL(this.tmp_word); this.tstate += 6; }
function Cpu_op_00_E2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x04)) { this.SET_PC(this.tmp_word); } this.tstate += 6; }
function Cpu_op_00_E3() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF) << 8; this.SET_MP(this.tmp_word); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.regs[4]); this.ptr_write((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF, this.regs[5]); this.SET_HL(this.tmp_word); this.tstate += 15; }
function Cpu_op_00_E4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x04)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } }
function Cpu_op_00_E5() { this.tmp_word_b = (this.regs[5] << 8 | this.regs[4]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; }
function Cpu_op_00_E6() { this.tmp_byte = this.read_byte(); this.regs[7] &= this.tmp_byte; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; }
function Cpu_op_00_E7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x20); this.SET_MP(0x20); this.tstate += 7; }
function Cpu_op_00_E8() { if (this.regs[6] & 0x04) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } }
function Cpu_op_00_E9() { this.SET_PC(this.regs[5] << 8 | this.regs[4]); }
function Cpu_op_00_EA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x04) { this.SET_PC(this.tmp_word); } this.tstate += 6; }
function Cpu_op_00_EB() { this.tmp_word = (this.regs[3] << 8 | this.regs[2]); this.SET_DE(this.regs[5] << 8 | this.regs[4]); this.SET_HL(this.tmp_word); }
function Cpu_op_00_EC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x04) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } }
function Cpu_op_00_ED() { this.prefix = 0xED; this.optable = optable_ED; this.is_noint = true; }
function Cpu_op_00_EE() { this.tmp_byte = this.read_byte(); this.regs[7] ^= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; }
function Cpu_op_00_EF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x28); this.SET_MP(0x28); this.tstate += 7; }
function Cpu_op_00_F0() { if (!(this.regs[6] & 0x80)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } }
function Cpu_op_00_F1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_AF(this.tmp_word); this.tstate += 6; }
function Cpu_op_00_F2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x80)) { this.SET_PC(this.tmp_word); } this.tstate += 6; }
function Cpu_op_00_F3() { this.regs[28] = 0; this.regs[29] = 0; }
function Cpu_op_00_F4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x80)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } }
function Cpu_op_00_F5() { this.tmp_word_b = (this.regs[7] << 8 | this.regs[6]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; }
function Cpu_op_00_F6() { this.tmp_byte = this.read_byte(); this.regs[7] |= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; }
function Cpu_op_00_F7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x30); this.SET_MP(0x30); this.tstate += 7; }
function Cpu_op_00_F8() { if (this.regs[6] & 0x80) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } }
function Cpu_op_00_F9() { this.SET_SP(this.regs[5] << 8 | this.regs[4]); this.tstate += 2; }
function Cpu_op_00_FA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x80) { this.SET_PC(this.tmp_word); } this.tstate += 6; }
function Cpu_op_00_FB() { this.regs[28] = 1; this.regs[29] = 1; this.is_noint = true; }
function Cpu_op_00_FC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x80) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } }
function Cpu_op_00_FD() { this.prefix = 0xFD; this.optable = optable_FD; this.is_noint = true; }
function Cpu_op_00_FE() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_byte & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.tstate += 3; }
function Cpu_op_00_FF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x38); this.SET_MP(0x38); this.tstate += 7; }
optable_00 = [
Cpu_op_00_00, Cpu_op_00_01, Cpu_op_00_02, Cpu_op_00_03, Cpu_op_00_04, Cpu_op_00_05, Cpu_op_00_06, Cpu_op_00_07, Cpu_op_00_08, Cpu_op_00_09, Cpu_op_00_0A, Cpu_op_00_0B, Cpu_op_00_0C, Cpu_op_00_0D, Cpu_op_00_0E, Cpu_op_00_0F,
Cpu_op_00_10, Cpu_op_00_11, Cpu_op_00_12, Cpu_op_00_13, Cpu_op_00_14, Cpu_op_00_15, Cpu_op_00_16, Cpu_op_00_17, Cpu_op_00_18, Cpu_op_00_19, Cpu_op_00_1A, Cpu_op_00_1B, Cpu_op_00_1C, Cpu_op_00_1D, Cpu_op_00_1E, Cpu_op_00_1F,
Cpu_op_00_20, Cpu_op_00_21, Cpu_op_00_22, Cpu_op_00_23, Cpu_op_00_24, Cpu_op_00_25, Cpu_op_00_26, Cpu_op_00_27, Cpu_op_00_28, Cpu_op_00_29, Cpu_op_00_2A, Cpu_op_00_2B, Cpu_op_00_2C, Cpu_op_00_2D, Cpu_op_00_2E, Cpu_op_00_2F,
Cpu_op_00_30, Cpu_op_00_31, Cpu_op_00_32, Cpu_op_00_33, Cpu_op_00_34, Cpu_op_00_35, Cpu_op_00_36, Cpu_op_00_37, Cpu_op_00_38, Cpu_op_00_39, Cpu_op_00_3A, Cpu_op_00_3B, Cpu_op_00_3C, Cpu_op_00_3D, Cpu_op_00_3E, Cpu_op_00_3F,
Cpu_op_00_40, Cpu_op_00_41, Cpu_op_00_42, Cpu_op_00_43, Cpu_op_00_44, Cpu_op_00_45, Cpu_op_00_46, Cpu_op_00_47, Cpu_op_00_48, Cpu_op_00_49, Cpu_op_00_4A, Cpu_op_00_4B, Cpu_op_00_4C, Cpu_op_00_4D, Cpu_op_00_4E, Cpu_op_00_4F,
Cpu_op_00_50, Cpu_op_00_51, Cpu_op_00_52, Cpu_op_00_53, Cpu_op_00_54, Cpu_op_00_55, Cpu_op_00_56, Cpu_op_00_57, Cpu_op_00_58, Cpu_op_00_59, Cpu_op_00_5A, Cpu_op_00_5B, Cpu_op_00_5C, Cpu_op_00_5D, Cpu_op_00_5E, Cpu_op_00_5F,
Cpu_op_00_60, Cpu_op_00_61, Cpu_op_00_62, Cpu_op_00_63, Cpu_op_00_64, Cpu_op_00_65, Cpu_op_00_66, Cpu_op_00_67, Cpu_op_00_68, Cpu_op_00_69, Cpu_op_00_6A, Cpu_op_00_6B, Cpu_op_00_6C, Cpu_op_00_6D, Cpu_op_00_6E, Cpu_op_00_6F,
Cpu_op_00_70, Cpu_op_00_71, Cpu_op_00_72, Cpu_op_00_73, Cpu_op_00_74, Cpu_op_00_75, Cpu_op_00_76, Cpu_op_00_77, Cpu_op_00_78, Cpu_op_00_79, Cpu_op_00_7A, Cpu_op_00_7B, Cpu_op_00_7C, Cpu_op_00_7D, Cpu_op_00_7E, Cpu_op_00_7F,
Cpu_op_00_80, Cpu_op_00_81, Cpu_op_00_82, Cpu_op_00_83, Cpu_op_00_84, Cpu_op_00_85, Cpu_op_00_86, Cpu_op_00_87, Cpu_op_00_88, Cpu_op_00_89, Cpu_op_00_8A, Cpu_op_00_8B, Cpu_op_00_8C, Cpu_op_00_8D, Cpu_op_00_8E, Cpu_op_00_8F,
Cpu_op_00_90, Cpu_op_00_91, Cpu_op_00_92, Cpu_op_00_93, Cpu_op_00_94, Cpu_op_00_95, Cpu_op_00_96, Cpu_op_00_97, Cpu_op_00_98, Cpu_op_00_99, Cpu_op_00_9A, Cpu_op_00_9B, Cpu_op_00_9C, Cpu_op_00_9D, Cpu_op_00_9E, Cpu_op_00_9F,
Cpu_op_00_A0, Cpu_op_00_A1, Cpu_op_00_A2, Cpu_op_00_A3, Cpu_op_00_A4, Cpu_op_00_A5, Cpu_op_00_A6, Cpu_op_00_A7, Cpu_op_00_A8, Cpu_op_00_A9, Cpu_op_00_AA, Cpu_op_00_AB, Cpu_op_00_AC, Cpu_op_00_AD, Cpu_op_00_AE, Cpu_op_00_AF,
Cpu_op_00_B0, Cpu_op_00_B1, Cpu_op_00_B2, Cpu_op_00_B3, Cpu_op_00_B4, Cpu_op_00_B5, Cpu_op_00_B6, Cpu_op_00_B7, Cpu_op_00_B8, Cpu_op_00_B9, Cpu_op_00_BA, Cpu_op_00_BB, Cpu_op_00_BC, Cpu_op_00_BD, Cpu_op_00_BE, Cpu_op_00_BF,
Cpu_op_00_C0, Cpu_op_00_C1, Cpu_op_00_C2, Cpu_op_00_C3, Cpu_op_00_C4, Cpu_op_00_C5, Cpu_op_00_C6, Cpu_op_00_C7, Cpu_op_00_C8, Cpu_op_00_C9, Cpu_op_00_CA, Cpu_op_00_CB, Cpu_op_00_CC, Cpu_op_00_CD, Cpu_op_00_CE, Cpu_op_00_CF,
Cpu_op_00_D0, Cpu_op_00_D1, Cpu_op_00_D2, Cpu_op_00_D3, Cpu_op_00_D4, Cpu_op_00_D5, Cpu_op_00_D6, Cpu_op_00_D7, Cpu_op_00_D8, Cpu_op_00_D9, Cpu_op_00_DA, Cpu_op_00_DB, Cpu_op_00_DC, Cpu_op_00_DD, Cpu_op_00_DE, Cpu_op_00_DF,
Cpu_op_00_E0, Cpu_op_00_E1, Cpu_op_00_E2, Cpu_op_00_E3, Cpu_op_00_E4, Cpu_op_00_E5, Cpu_op_00_E6, Cpu_op_00_E7, Cpu_op_00_E8, Cpu_op_00_E9, Cpu_op_00_EA, Cpu_op_00_EB, Cpu_op_00_EC, Cpu_op_00_ED, Cpu_op_00_EE, Cpu_op_00_EF,
Cpu_op_00_F0, Cpu_op_00_F1, Cpu_op_00_F2, Cpu_op_00_F3, Cpu_op_00_F4, Cpu_op_00_F5, Cpu_op_00_F6, Cpu_op_00_F7, Cpu_op_00_F8, Cpu_op_00_F9, Cpu_op_00_FA, Cpu_op_00_FB, Cpu_op_00_FC, Cpu_op_00_FD, Cpu_op_00_FE, Cpu_op_00_FF
];
function Cpu_op_CB_00() { this.regs[1] = this.regs[1] << 1 & 0xFF | this.regs[1] >> 7; this.regs[6] = this.regs[1] & 0xA9 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[this.regs[1]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_01() { this.regs[0] = this.regs[0] << 1 & 0xFF | this.regs[0] >> 7; this.regs[6] = this.regs[0] & 0xA9 | (this.regs[0] ? 0 : 0x40) | Z80.tbl_parity[this.regs[0]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_02() { this.regs[3] = this.regs[3] << 1 & 0xFF | this.regs[3] >> 7; this.regs[6] = this.regs[3] & 0xA9 | (this.regs[3] ? 0 : 0x40) | Z80.tbl_parity[this.regs[3]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_03() { this.regs[2] = this.regs[2] << 1 & 0xFF | this.regs[2] >> 7; this.regs[6] = this.regs[2] & 0xA9 | (this.regs[2] ? 0 : 0x40) | Z80.tbl_parity[this.regs[2]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_04() { this.regs[5] = this.regs[5] << 1 & 0xFF | this.regs[5] >> 7; this.regs[6] = this.regs[5] & 0xA9 | (this.regs[5] ? 0 : 0x40) | Z80.tbl_parity[this.regs[5]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_05() { this.regs[4] = this.regs[4] << 1 & 0xFF | this.regs[4] >> 7; this.regs[6] = this.regs[4] & 0xA9 | (this.regs[4] ? 0 : 0x40) | Z80.tbl_parity[this.regs[4]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_06() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_07() { this.regs[7] = this.regs[7] << 1 & 0xFF | this.regs[7] >> 7; this.regs[6] = this.regs[7] & 0xA9 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_08() { this.regs[6] = this.regs[1] & 0x01; this.regs[1] = this.regs[1] >> 1 | this.regs[1] << 7 & 0xFF; this.regs[6] |= this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[this.regs[1]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_09() { this.regs[6] = this.regs[0] & 0x01; this.regs[0] = this.regs[0] >> 1 | this.regs[0] << 7 & 0xFF; this.regs[6] |= this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40) | Z80.tbl_parity[this.regs[0]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_0A() { this.regs[6] = this.regs[3] & 0x01; this.regs[3] = this.regs[3] >> 1 | this.regs[3] << 7 & 0xFF; this.regs[6] |= this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40) | Z80.tbl_parity[this.regs[3]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_0B() { this.regs[6] = this.regs[2] & 0x01; this.regs[2] = this.regs[2] >> 1 | this.regs[2] << 7 & 0xFF; this.regs[6] |= this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40) | Z80.tbl_parity[this.regs[2]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_0C() { this.regs[6] = this.regs[5] & 0x01; this.regs[5] = this.regs[5] >> 1 | this.regs[5] << 7 & 0xFF; this.regs[6] |= this.regs[5] & 0xA8 | (this.regs[5] ? 0 : 0x40) | Z80.tbl_parity[this.regs[5]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_0D() { this.regs[6] = this.regs[4] & 0x01; this.regs[4] = this.regs[4] >> 1 | this.regs[4] << 7 & 0xFF; this.regs[6] |= this.regs[4] & 0xA8 | (this.regs[4] ? 0 : 0x40) | Z80.tbl_parity[this.regs[4]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_0E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_0F() { this.regs[6] = this.regs[7] & 0x01; this.regs[7] = this.regs[7] >> 1 | this.regs[7] << 7 & 0xFF; this.regs[6] |= this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_10() { this.tmp_byte_b = this.regs[1]; this.regs[1] = this.regs[1] << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[this.regs[1]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_11() { this.tmp_byte_b = this.regs[0]; this.regs[0] = this.regs[0] << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40) | Z80.tbl_parity[this.regs[0]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_12() { this.tmp_byte_b = this.regs[3]; this.regs[3] = this.regs[3] << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40) | Z80.tbl_parity[this.regs[3]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_13() { this.tmp_byte_b = this.regs[2]; this.regs[2] = this.regs[2] << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40) | Z80.tbl_parity[this.regs[2]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_14() { this.tmp_byte_b = this.regs[5]; this.regs[5] = this.regs[5] << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.regs[5] & 0xA8 | (this.regs[5] ? 0 : 0x40) | Z80.tbl_parity[this.regs[5]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_15() { this.tmp_byte_b = this.regs[4]; this.regs[4] = this.regs[4] << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.regs[4] & 0xA8 | (this.regs[4] ? 0 : 0x40) | Z80.tbl_parity[this.regs[4]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_16() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_17() { this.tmp_byte_b = this.regs[7]; this.regs[7] = this.regs[7] << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_18() { this.tmp_byte_b = this.regs[1]; this.regs[1] = this.regs[1] >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[this.regs[1]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_19() { this.tmp_byte_b = this.regs[0]; this.regs[0] = this.regs[0] >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40) | Z80.tbl_parity[this.regs[0]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_1A() { this.tmp_byte_b = this.regs[3]; this.regs[3] = this.regs[3] >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40) | Z80.tbl_parity[this.regs[3]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_1B() { this.tmp_byte_b = this.regs[2]; this.regs[2] = this.regs[2] >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40) | Z80.tbl_parity[this.regs[2]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_1C() { this.tmp_byte_b = this.regs[5]; this.regs[5] = this.regs[5] >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.regs[5] & 0xA8 | (this.regs[5] ? 0 : 0x40) | Z80.tbl_parity[this.regs[5]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_1D() { this.tmp_byte_b = this.regs[4]; this.regs[4] = this.regs[4] >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.regs[4] & 0xA8 | (this.regs[4] ? 0 : 0x40) | Z80.tbl_parity[this.regs[4]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_1E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_1F() { this.tmp_byte_b = this.regs[7]; this.regs[7] = this.regs[7] >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_20() { this.regs[6] = this.regs[1] >> 7; this.regs[1] = this.regs[1] << 1 & 0xFF; this.regs[6] |= this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[this.regs[1]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_21() { this.regs[6] = this.regs[0] >> 7; this.regs[0] = this.regs[0] << 1 & 0xFF; this.regs[6] |= this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40) | Z80.tbl_parity[this.regs[0]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_22() { this.regs[6] = this.regs[3] >> 7; this.regs[3] = this.regs[3] << 1 & 0xFF; this.regs[6] |= this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40) | Z80.tbl_parity[this.regs[3]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_23() { this.regs[6] = this.regs[2] >> 7; this.regs[2] = this.regs[2] << 1 & 0xFF; this.regs[6] |= this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40) | Z80.tbl_parity[this.regs[2]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_24() { this.regs[6] = this.regs[5] >> 7; this.regs[5] = this.regs[5] << 1 & 0xFF; this.regs[6] |= this.regs[5] & 0xA8 | (this.regs[5] ? 0 : 0x40) | Z80.tbl_parity[this.regs[5]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_25() { this.regs[6] = this.regs[4] >> 7; this.regs[4] = this.regs[4] << 1 & 0xFF; this.regs[6] |= this.regs[4] & 0xA8 | (this.regs[4] ? 0 : 0x40) | Z80.tbl_parity[this.regs[4]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_26() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_27() { this.regs[6] = this.regs[7] >> 7; this.regs[7] = this.regs[7] << 1 & 0xFF; this.regs[6] |= this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_28() { this.regs[6] = this.regs[1] & 0x01; this.regs[1] = this.regs[1] & 0x80 | this.regs[1] >> 1; this.regs[6] |= this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[this.regs[1]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_29() { this.regs[6] = this.regs[0] & 0x01; this.regs[0] = this.regs[0] & 0x80 | this.regs[0] >> 1; this.regs[6] |= this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40) | Z80.tbl_parity[this.regs[0]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_2A() { this.regs[6] = this.regs[3] & 0x01; this.regs[3] = this.regs[3] & 0x80 | this.regs[3] >> 1; this.regs[6] |= this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40) | Z80.tbl_parity[this.regs[3]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_2B() { this.regs[6] = this.regs[2] & 0x01; this.regs[2] = this.regs[2] & 0x80 | this.regs[2] >> 1; this.regs[6] |= this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40) | Z80.tbl_parity[this.regs[2]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_2C() { this.regs[6] = this.regs[5] & 0x01; this.regs[5] = this.regs[5] & 0x80 | this.regs[5] >> 1; this.regs[6] |= this.regs[5] & 0xA8 | (this.regs[5] ? 0 : 0x40) | Z80.tbl_parity[this.regs[5]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_2D() { this.regs[6] = this.regs[4] & 0x01; this.regs[4] = this.regs[4] & 0x80 | this.regs[4] >> 1; this.regs[6] |= this.regs[4] & 0xA8 | (this.regs[4] ? 0 : 0x40) | Z80.tbl_parity[this.regs[4]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_2E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_2F() { this.regs[6] = this.regs[7] & 0x01; this.regs[7] = this.regs[7] & 0x80 | this.regs[7] >> 1; this.regs[6] |= this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_30() { this.regs[6] = this.regs[1] >> 7; this.regs[1] = this.regs[1] << 1 & 0xFF | 0x01; this.regs[6] |= this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[this.regs[1]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_31() { this.regs[6] = this.regs[0] >> 7; this.regs[0] = this.regs[0] << 1 & 0xFF | 0x01; this.regs[6] |= this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40) | Z80.tbl_parity[this.regs[0]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_32() { this.regs[6] = this.regs[3] >> 7; this.regs[3] = this.regs[3] << 1 & 0xFF | 0x01; this.regs[6] |= this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40) | Z80.tbl_parity[this.regs[3]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_33() { this.regs[6] = this.regs[2] >> 7; this.regs[2] = this.regs[2] << 1 & 0xFF | 0x01; this.regs[6] |= this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40) | Z80.tbl_parity[this.regs[2]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_34() { this.regs[6] = this.regs[5] >> 7; this.regs[5] = this.regs[5] << 1 & 0xFF | 0x01; this.regs[6] |= this.regs[5] & 0xA8 | (this.regs[5] ? 0 : 0x40) | Z80.tbl_parity[this.regs[5]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_35() { this.regs[6] = this.regs[4] >> 7; this.regs[4] = this.regs[4] << 1 & 0xFF | 0x01; this.regs[6] |= this.regs[4] & 0xA8 | (this.regs[4] ? 0 : 0x40) | Z80.tbl_parity[this.regs[4]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_36() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_37() { this.regs[6] = this.regs[7] >> 7; this.regs[7] = this.regs[7] << 1 & 0xFF | 0x01; this.regs[6] |= this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_38() { this.regs[6] = this.regs[1] & 0x01; this.regs[1] >>= 1; this.regs[6] |= this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[this.regs[1]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_39() { this.regs[6] = this.regs[0] & 0x01; this.regs[0] >>= 1; this.regs[6] |= this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40) | Z80.tbl_parity[this.regs[0]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_3A() { this.regs[6] = this.regs[3] & 0x01; this.regs[3] >>= 1; this.regs[6] |= this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40) | Z80.tbl_parity[this.regs[3]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_3B() { this.regs[6] = this.regs[2] & 0x01; this.regs[2] >>= 1; this.regs[6] |= this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40) | Z80.tbl_parity[this.regs[2]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_3C() { this.regs[6] = this.regs[5] & 0x01; this.regs[5] >>= 1; this.regs[6] |= this.regs[5] & 0xA8 | (this.regs[5] ? 0 : 0x40) | Z80.tbl_parity[this.regs[5]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_3D() { this.regs[6] = this.regs[4] & 0x01; this.regs[4] >>= 1; this.regs[6] |= this.regs[4] & 0xA8 | (this.regs[4] ? 0 : 0x40) | Z80.tbl_parity[this.regs[4]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_3E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_3F() { this.regs[6] = this.regs[7] & 0x01; this.regs[7] >>= 1; this.regs[6] |= this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_40() { this.tmp_byte = this.regs[1] & 0x01; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[1] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_41() { this.tmp_byte = this.regs[0] & 0x01; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[0] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_42() { this.tmp_byte = this.regs[3] & 0x01; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[3] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_43() { this.tmp_byte = this.regs[2] & 0x01; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[2] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_44() { this.tmp_byte = this.regs[5] & 0x01; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[5] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_45() { this.tmp_byte = this.regs[4] & 0x01; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[4] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_46() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = this.tmp_byte & 0x01; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_47() { this.tmp_byte = this.regs[7] & 0x01; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_48() { this.tmp_byte = this.regs[1] & 0x02; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[1] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_49() { this.tmp_byte = this.regs[0] & 0x02; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[0] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_4A() { this.tmp_byte = this.regs[3] & 0x02; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[3] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_4B() { this.tmp_byte = this.regs[2] & 0x02; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[2] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_4C() { this.tmp_byte = this.regs[5] & 0x02; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[5] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_4D() { this.tmp_byte = this.regs[4] & 0x02; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[4] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_4E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = this.tmp_byte & 0x02; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_4F() { this.tmp_byte = this.regs[7] & 0x02; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_50() { this.tmp_byte = this.regs[1] & 0x04; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[1] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_51() { this.tmp_byte = this.regs[0] & 0x04; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[0] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_52() { this.tmp_byte = this.regs[3] & 0x04; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[3] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_53() { this.tmp_byte = this.regs[2] & 0x04; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[2] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_54() { this.tmp_byte = this.regs[5] & 0x04; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[5] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_55() { this.tmp_byte = this.regs[4] & 0x04; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[4] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_56() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = this.tmp_byte & 0x04; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_57() { this.tmp_byte = this.regs[7] & 0x04; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_58() { this.tmp_byte = this.regs[1] & 0x08; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[1] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_59() { this.tmp_byte = this.regs[0] & 0x08; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[0] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_5A() { this.tmp_byte = this.regs[3] & 0x08; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[3] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_5B() { this.tmp_byte = this.regs[2] & 0x08; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[2] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_5C() { this.tmp_byte = this.regs[5] & 0x08; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[5] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_5D() { this.tmp_byte = this.regs[4] & 0x08; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[4] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_5E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = this.tmp_byte & 0x08; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_5F() { this.tmp_byte = this.regs[7] & 0x08; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_60() { this.tmp_byte = this.regs[1] & 0x10; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[1] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_61() { this.tmp_byte = this.regs[0] & 0x10; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[0] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_62() { this.tmp_byte = this.regs[3] & 0x10; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[3] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_63() { this.tmp_byte = this.regs[2] & 0x10; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[2] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_64() { this.tmp_byte = this.regs[5] & 0x10; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[5] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_65() { this.tmp_byte = this.regs[4] & 0x10; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[4] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_66() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = this.tmp_byte & 0x10; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_67() { this.tmp_byte = this.regs[7] & 0x10; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_68() { this.tmp_byte = this.regs[1] & 0x20; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[1] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_69() { this.tmp_byte = this.regs[0] & 0x20; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[0] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_6A() { this.tmp_byte = this.regs[3] & 0x20; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[3] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_6B() { this.tmp_byte = this.regs[2] & 0x20; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[2] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_6C() { this.tmp_byte = this.regs[5] & 0x20; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[5] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_6D() { this.tmp_byte = this.regs[4] & 0x20; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[4] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_6E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = this.tmp_byte & 0x20; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_6F() { this.tmp_byte = this.regs[7] & 0x20; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_70() { this.tmp_byte = this.regs[1] & 0x40; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[1] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_71() { this.tmp_byte = this.regs[0] & 0x40; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[0] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_72() { this.tmp_byte = this.regs[3] & 0x40; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[3] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_73() { this.tmp_byte = this.regs[2] & 0x40; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[2] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_74() { this.tmp_byte = this.regs[5] & 0x40; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[5] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_75() { this.tmp_byte = this.regs[4] & 0x40; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[4] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_76() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = this.tmp_byte & 0x40; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_77() { this.tmp_byte = this.regs[7] & 0x40; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_78() { this.tmp_byte = this.regs[1] & 0x80; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[1] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_79() { this.tmp_byte = this.regs[0] & 0x80; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[0] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_7A() { this.tmp_byte = this.regs[3] & 0x80; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[3] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_7B() { this.tmp_byte = this.regs[2] & 0x80; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[2] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_7C() { this.tmp_byte = this.regs[5] & 0x80; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[5] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_7D() { this.tmp_byte = this.regs[4] & 0x80; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[4] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_7E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = this.tmp_byte & 0x80; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_7F() { this.tmp_byte = this.regs[7] & 0x80; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_80() { this.regs[1] &= 0xFF ^ 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_81() { this.regs[0] &= 0xFF ^ 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_82() { this.regs[3] &= 0xFF ^ 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_83() { this.regs[2] &= 0xFF ^ 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_84() { this.regs[5] &= 0xFF ^ 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_85() { this.regs[4] &= 0xFF ^ 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_86() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte &= 0xFF ^ 0x01; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_87() { this.regs[7] &= 0xFF ^ 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_88() { this.regs[1] &= 0xFF ^ 0x02; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_89() { this.regs[0] &= 0xFF ^ 0x02; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_8A() { this.regs[3] &= 0xFF ^ 0x02; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_8B() { this.regs[2] &= 0xFF ^ 0x02; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_8C() { this.regs[5] &= 0xFF ^ 0x02; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_8D() { this.regs[4] &= 0xFF ^ 0x02; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_8E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte &= 0xFF ^ 0x02; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_8F() { this.regs[7] &= 0xFF ^ 0x02; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_90() { this.regs[1] &= 0xFF ^ 0x04; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_91() { this.regs[0] &= 0xFF ^ 0x04; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_92() { this.regs[3] &= 0xFF ^ 0x04; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_93() { this.regs[2] &= 0xFF ^ 0x04; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_94() { this.regs[5] &= 0xFF ^ 0x04; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_95() { this.regs[4] &= 0xFF ^ 0x04; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_96() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte &= 0xFF ^ 0x04; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_97() { this.regs[7] &= 0xFF ^ 0x04; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_98() { this.regs[1] &= 0xFF ^ 0x08; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_99() { this.regs[0] &= 0xFF ^ 0x08; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_9A() { this.regs[3] &= 0xFF ^ 0x08; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_9B() { this.regs[2] &= 0xFF ^ 0x08; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_9C() { this.regs[5] &= 0xFF ^ 0x08; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_9D() { this.regs[4] &= 0xFF ^ 0x08; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_9E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte &= 0xFF ^ 0x08; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_9F() { this.regs[7] &= 0xFF ^ 0x08; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_A0() { this.regs[1] &= 0xFF ^ 0x10; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_A1() { this.regs[0] &= 0xFF ^ 0x10; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_A2() { this.regs[3] &= 0xFF ^ 0x10; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_A3() { this.regs[2] &= 0xFF ^ 0x10; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_A4() { this.regs[5] &= 0xFF ^ 0x10; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_A5() { this.regs[4] &= 0xFF ^ 0x10; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_A6() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte &= 0xFF ^ 0x10; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_A7() { this.regs[7] &= 0xFF ^ 0x10; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_A8() { this.regs[1] &= 0xFF ^ 0x20; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_A9() { this.regs[0] &= 0xFF ^ 0x20; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_AA() { this.regs[3] &= 0xFF ^ 0x20; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_AB() { this.regs[2] &= 0xFF ^ 0x20; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_AC() { this.regs[5] &= 0xFF ^ 0x20; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_AD() { this.regs[4] &= 0xFF ^ 0x20; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_AE() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte &= 0xFF ^ 0x20; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_AF() { this.regs[7] &= 0xFF ^ 0x20; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_B0() { this.regs[1] &= 0xFF ^ 0x40; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_B1() { this.regs[0] &= 0xFF ^ 0x40; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_B2() { this.regs[3] &= 0xFF ^ 0x40; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_B3() { this.regs[2] &= 0xFF ^ 0x40; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_B4() { this.regs[5] &= 0xFF ^ 0x40; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_B5() { this.regs[4] &= 0xFF ^ 0x40; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_B6() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte &= 0xFF ^ 0x40; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_B7() { this.regs[7] &= 0xFF ^ 0x40; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_B8() { this.regs[1] &= 0xFF ^ 0x80; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_B9() { this.regs[0] &= 0xFF ^ 0x80; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_BA() { this.regs[3] &= 0xFF ^ 0x80; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_BB() { this.regs[2] &= 0xFF ^ 0x80; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_BC() { this.regs[5] &= 0xFF ^ 0x80; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_BD() { this.regs[4] &= 0xFF ^ 0x80; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_BE() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte &= 0xFF ^ 0x80; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_BF() { this.regs[7] &= 0xFF ^ 0x80; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_C0() { this.regs[1] |= 0x01 << 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_C1() { this.regs[0] |= 0x01 << 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_C2() { this.regs[3] |= 0x01 << 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_C3() { this.regs[2] |= 0x01 << 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_C4() { this.regs[5] |= 0x01 << 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_C5() { this.regs[4] |= 0x01 << 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_C6() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte |= 0x01 << 0; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_C7() { this.regs[7] |= 0x01 << 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_C8() { this.regs[1] |= 0x01 << 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_C9() { this.regs[0] |= 0x01 << 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_CA() { this.regs[3] |= 0x01 << 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_CB() { this.regs[2] |= 0x01 << 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_CC() { this.regs[5] |= 0x01 << 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_CD() { this.regs[4] |= 0x01 << 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_CE() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte |= 0x01 << 1; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_CF() { this.regs[7] |= 0x01 << 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_D0() { this.regs[1] |= 0x01 << 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_D1() { this.regs[0] |= 0x01 << 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_D2() { this.regs[3] |= 0x01 << 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_D3() { this.regs[2] |= 0x01 << 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_D4() { this.regs[5] |= 0x01 << 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_D5() { this.regs[4] |= 0x01 << 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_D6() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte |= 0x01 << 2; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_D7() { this.regs[7] |= 0x01 << 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_D8() { this.regs[1] |= 0x01 << 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_D9() { this.regs[0] |= 0x01 << 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_DA() { this.regs[3] |= 0x01 << 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_DB() { this.regs[2] |= 0x01 << 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_DC() { this.regs[5] |= 0x01 << 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_DD() { this.regs[4] |= 0x01 << 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_DE() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte |= 0x01 << 3; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_DF() { this.regs[7] |= 0x01 << 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_E0() { this.regs[1] |= 0x01 << 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_E1() { this.regs[0] |= 0x01 << 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_E2() { this.regs[3] |= 0x01 << 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_E3() { this.regs[2] |= 0x01 << 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_E4() { this.regs[5] |= 0x01 << 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_E5() { this.regs[4] |= 0x01 << 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_E6() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte |= 0x01 << 4; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_E7() { this.regs[7] |= 0x01 << 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_E8() { this.regs[1] |= 0x01 << 5; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_E9() { this.regs[0] |= 0x01 << 5; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_EA() { this.regs[3] |= 0x01 << 5; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_EB() { this.regs[2] |= 0x01 << 5; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_EC() { this.regs[5] |= 0x01 << 5; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_ED() { this.regs[4] |= 0x01 << 5; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_EE() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte |= 0x01 << 5; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_EF() { this.regs[7] |= 0x01 << 5; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_F0() { this.regs[1] |= 0x01 << 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_F1() { this.regs[0] |= 0x01 << 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_F2() { this.regs[3] |= 0x01 << 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_F3() { this.regs[2] |= 0x01 << 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_F4() { this.regs[5] |= 0x01 << 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_F5() { this.regs[4] |= 0x01 << 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_F6() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte |= 0x01 << 6; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_F7() { this.regs[7] |= 0x01 << 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_F8() { this.regs[1] |= 0x01 << 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_F9() { this.regs[0] |= 0x01 << 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_FA() { this.regs[3] |= 0x01 << 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_FB() { this.regs[2] |= 0x01 << 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_FC() { this.regs[5] |= 0x01 << 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_FD() { this.regs[4] |= 0x01 << 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_FE() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte |= 0x01 << 7; this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_CB_FF() { this.regs[7] |= 0x01 << 7; this.prefix = 0x00; this.optable = optable_00; }
optable_CB = [
Cpu_op_CB_00, Cpu_op_CB_01, Cpu_op_CB_02, Cpu_op_CB_03, Cpu_op_CB_04, Cpu_op_CB_05, Cpu_op_CB_06, Cpu_op_CB_07, Cpu_op_CB_08, Cpu_op_CB_09, Cpu_op_CB_0A, Cpu_op_CB_0B, Cpu_op_CB_0C, Cpu_op_CB_0D, Cpu_op_CB_0E, Cpu_op_CB_0F,
Cpu_op_CB_10, Cpu_op_CB_11, Cpu_op_CB_12, Cpu_op_CB_13, Cpu_op_CB_14, Cpu_op_CB_15, Cpu_op_CB_16, Cpu_op_CB_17, Cpu_op_CB_18, Cpu_op_CB_19, Cpu_op_CB_1A, Cpu_op_CB_1B, Cpu_op_CB_1C, Cpu_op_CB_1D, Cpu_op_CB_1E, Cpu_op_CB_1F,
Cpu_op_CB_20, Cpu_op_CB_21, Cpu_op_CB_22, Cpu_op_CB_23, Cpu_op_CB_24, Cpu_op_CB_25, Cpu_op_CB_26, Cpu_op_CB_27, Cpu_op_CB_28, Cpu_op_CB_29, Cpu_op_CB_2A, Cpu_op_CB_2B, Cpu_op_CB_2C, Cpu_op_CB_2D, Cpu_op_CB_2E, Cpu_op_CB_2F,
Cpu_op_CB_30, Cpu_op_CB_31, Cpu_op_CB_32, Cpu_op_CB_33, Cpu_op_CB_34, Cpu_op_CB_35, Cpu_op_CB_36, Cpu_op_CB_37, Cpu_op_CB_38, Cpu_op_CB_39, Cpu_op_CB_3A, Cpu_op_CB_3B, Cpu_op_CB_3C, Cpu_op_CB_3D, Cpu_op_CB_3E, Cpu_op_CB_3F,
Cpu_op_CB_40, Cpu_op_CB_41, Cpu_op_CB_42, Cpu_op_CB_43, Cpu_op_CB_44, Cpu_op_CB_45, Cpu_op_CB_46, Cpu_op_CB_47, Cpu_op_CB_48, Cpu_op_CB_49, Cpu_op_CB_4A, Cpu_op_CB_4B, Cpu_op_CB_4C, Cpu_op_CB_4D, Cpu_op_CB_4E, Cpu_op_CB_4F,
Cpu_op_CB_50, Cpu_op_CB_51, Cpu_op_CB_52, Cpu_op_CB_53, Cpu_op_CB_54, Cpu_op_CB_55, Cpu_op_CB_56, Cpu_op_CB_57, Cpu_op_CB_58, Cpu_op_CB_59, Cpu_op_CB_5A, Cpu_op_CB_5B, Cpu_op_CB_5C, Cpu_op_CB_5D, Cpu_op_CB_5E, Cpu_op_CB_5F,
Cpu_op_CB_60, Cpu_op_CB_61, Cpu_op_CB_62, Cpu_op_CB_63, Cpu_op_CB_64, Cpu_op_CB_65, Cpu_op_CB_66, Cpu_op_CB_67, Cpu_op_CB_68, Cpu_op_CB_69, Cpu_op_CB_6A, Cpu_op_CB_6B, Cpu_op_CB_6C, Cpu_op_CB_6D, Cpu_op_CB_6E, Cpu_op_CB_6F,
Cpu_op_CB_70, Cpu_op_CB_71, Cpu_op_CB_72, Cpu_op_CB_73, Cpu_op_CB_74, Cpu_op_CB_75, Cpu_op_CB_76, Cpu_op_CB_77, Cpu_op_CB_78, Cpu_op_CB_79, Cpu_op_CB_7A, Cpu_op_CB_7B, Cpu_op_CB_7C, Cpu_op_CB_7D, Cpu_op_CB_7E, Cpu_op_CB_7F,
Cpu_op_CB_80, Cpu_op_CB_81, Cpu_op_CB_82, Cpu_op_CB_83, Cpu_op_CB_84, Cpu_op_CB_85, Cpu_op_CB_86, Cpu_op_CB_87, Cpu_op_CB_88, Cpu_op_CB_89, Cpu_op_CB_8A, Cpu_op_CB_8B, Cpu_op_CB_8C, Cpu_op_CB_8D, Cpu_op_CB_8E, Cpu_op_CB_8F,
Cpu_op_CB_90, Cpu_op_CB_91, Cpu_op_CB_92, Cpu_op_CB_93, Cpu_op_CB_94, Cpu_op_CB_95, Cpu_op_CB_96, Cpu_op_CB_97, Cpu_op_CB_98, Cpu_op_CB_99, Cpu_op_CB_9A, Cpu_op_CB_9B, Cpu_op_CB_9C, Cpu_op_CB_9D, Cpu_op_CB_9E, Cpu_op_CB_9F,
Cpu_op_CB_A0, Cpu_op_CB_A1, Cpu_op_CB_A2, Cpu_op_CB_A3, Cpu_op_CB_A4, Cpu_op_CB_A5, Cpu_op_CB_A6, Cpu_op_CB_A7, Cpu_op_CB_A8, Cpu_op_CB_A9, Cpu_op_CB_AA, Cpu_op_CB_AB, Cpu_op_CB_AC, Cpu_op_CB_AD, Cpu_op_CB_AE, Cpu_op_CB_AF,
Cpu_op_CB_B0, Cpu_op_CB_B1, Cpu_op_CB_B2, Cpu_op_CB_B3, Cpu_op_CB_B4, Cpu_op_CB_B5, Cpu_op_CB_B6, Cpu_op_CB_B7, Cpu_op_CB_B8, Cpu_op_CB_B9, Cpu_op_CB_BA, Cpu_op_CB_BB, Cpu_op_CB_BC, Cpu_op_CB_BD, Cpu_op_CB_BE, Cpu_op_CB_BF,
Cpu_op_CB_C0, Cpu_op_CB_C1, Cpu_op_CB_C2, Cpu_op_CB_C3, Cpu_op_CB_C4, Cpu_op_CB_C5, Cpu_op_CB_C6, Cpu_op_CB_C7, Cpu_op_CB_C8, Cpu_op_CB_C9, Cpu_op_CB_CA, Cpu_op_CB_CB, Cpu_op_CB_CC, Cpu_op_CB_CD, Cpu_op_CB_CE, Cpu_op_CB_CF,
Cpu_op_CB_D0, Cpu_op_CB_D1, Cpu_op_CB_D2, Cpu_op_CB_D3, Cpu_op_CB_D4, Cpu_op_CB_D5, Cpu_op_CB_D6, Cpu_op_CB_D7, Cpu_op_CB_D8, Cpu_op_CB_D9, Cpu_op_CB_DA, Cpu_op_CB_DB, Cpu_op_CB_DC, Cpu_op_CB_DD, Cpu_op_CB_DE, Cpu_op_CB_DF,
Cpu_op_CB_E0, Cpu_op_CB_E1, Cpu_op_CB_E2, Cpu_op_CB_E3, Cpu_op_CB_E4, Cpu_op_CB_E5, Cpu_op_CB_E6, Cpu_op_CB_E7, Cpu_op_CB_E8, Cpu_op_CB_E9, Cpu_op_CB_EA, Cpu_op_CB_EB, Cpu_op_CB_EC, Cpu_op_CB_ED, Cpu_op_CB_EE, Cpu_op_CB_EF,
Cpu_op_CB_F0, Cpu_op_CB_F1, Cpu_op_CB_F2, Cpu_op_CB_F3, Cpu_op_CB_F4, Cpu_op_CB_F5, Cpu_op_CB_F6, Cpu_op_CB_F7, Cpu_op_CB_F8, Cpu_op_CB_F9, Cpu_op_CB_FA, Cpu_op_CB_FB, Cpu_op_CB_FC, Cpu_op_CB_FD, Cpu_op_CB_FE, Cpu_op_CB_FF
];
function Cpu_op_DD_00() { this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_01() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_BC(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_02() { this.regs[17] = this.regs[7]; this.regs[16] = (this.regs[1] << 8 | this.regs[0]) + 1 & 0xFF; this.ptr_write(this.regs[1] << 8 | this.regs[0], this.regs[7]); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_03() { this.SET_BC((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_04() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[1] & 0x0F) + 1 & 0x10); this.regs[1] = this.regs[1] + 1 & 0xFF; this.regs[6] |= ((this.regs[1] === 0x80) ? 0x04 : 0) | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_05() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[1] & 0x0F) - 1 & 0x10) | ((this.regs[1] === 0x80) ? 0x04 : 0); this.regs[1] = this.regs[1] - 1 & 0xFF; this.regs[6] |= this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_06() { this.regs[1] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_07() { this.regs[7] = this.regs[7] << 1 & 0xFF | this.regs[7] >> 7; this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x29; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_08() { this.tmp_word = (this.regs[7] << 8 | this.regs[6]); this.SET_AF((this.regs[25] << 8 | this.regs[24])); this.SET_AF_(this.tmp_word); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_09() { this.tmp_dword = (this.regs[9] << 8 | this.regs[8]) + (this.regs[1] << 8 | this.regs[0]); this.tmp_word_b = ((this.regs[9] << 8 | this.regs[8]) & 0x0FFF) + ((this.regs[1] << 8 | this.regs[0]) & 0x0FFF); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + 1 & 0xFFFF); this.SET_IX(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_0A() { this.regs[7] = this.ptr_read(this.regs[1] << 8 | this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_0B() { this.SET_BC((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_0C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[0] & 0x0F) + 1 & 0x10); this.regs[0] = this.regs[0] + 1 & 0xFF; this.regs[6] |= ((this.regs[0] === 0x80) ? 0x04 : 0) | this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_0D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[0] & 0x0F) - 1 & 0x10) | ((this.regs[0] === 0x80) ? 0x04 : 0); this.regs[0] = this.regs[0] - 1 & 0xFF; this.regs[6] |= this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_0E() { this.regs[0] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_0F() { this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x01; this.regs[7] = this.regs[7] >> 1 | this.regs[7] << 7 & 0xFF; this.regs[6] |= this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_10() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; this.regs[1] = this.regs[1] - 1 & 0xFF; if (this.regs[1]) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 9; } else { this.tstate += 4; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_11() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_DE(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_12() { this.regs[17] = this.regs[7]; this.regs[16] = (this.regs[3] << 8 | this.regs[2]) + 1 & 0xFF; this.ptr_write(this.regs[3] << 8 | this.regs[2], this.regs[7]); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_13() { this.SET_DE((this.regs[3] << 8 | this.regs[2]) + 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_14() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[3] & 0x0F) + 1 & 0x10); this.regs[3] = this.regs[3] + 1 & 0xFF; this.regs[6] |= ((this.regs[3] === 0x80) ? 0x04 : 0) | this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_15() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[3] & 0x0F) - 1 & 0x10) | ((this.regs[3] === 0x80) ? 0x04 : 0); this.regs[3] = this.regs[3] - 1 & 0xFF; this.regs[6] |= this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_16() { this.regs[3] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_17() { this.tmp_byte = this.regs[7]; this.regs[7] = this.regs[7] << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x28 | this.tmp_byte >> 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_18() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_19() { this.tmp_dword = (this.regs[9] << 8 | this.regs[8]) + (this.regs[3] << 8 | this.regs[2]); this.tmp_word_b = ((this.regs[9] << 8 | this.regs[8]) & 0x0FFF) + ((this.regs[3] << 8 | this.regs[2]) & 0x0FFF); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + 1 & 0xFFFF); this.SET_IX(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_1A() { this.regs[7] = this.ptr_read(this.regs[3] << 8 | this.regs[2]); this.SET_MP((this.regs[3] << 8 | this.regs[2]) + 1 & 0xFFFF); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_1B() { this.SET_DE((this.regs[3] << 8 | this.regs[2]) - 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_1C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[2] & 0x0F) + 1 & 0x10); this.regs[2] = this.regs[2] + 1 & 0xFF; this.regs[6] |= ((this.regs[2] === 0x80) ? 0x04 : 0) | this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_1D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[2] & 0x0F) - 1 & 0x10) | ((this.regs[2] === 0x80) ? 0x04 : 0); this.regs[2] = this.regs[2] - 1 & 0xFF; this.regs[6] |= this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_1E() { this.regs[2] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_1F() { this.tmp_byte = this.regs[7]; this.regs[7] = this.regs[7] >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x28 | this.tmp_byte & 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_20() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (!(this.regs[6] & 0x40)) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_21() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_IX(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_22() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.ptr_write(this.tmp_word, this.regs[8]); this.ptr_write(this.tmp_word + 1 & 0xFFFF, this.regs[9]); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_23() { this.SET_IX((this.regs[9] << 8 | this.regs[8]) + 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_24() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[9] & 0x0F) + 1 & 0x10); this.regs[9] = this.regs[9] + 1 & 0xFF; this.regs[6] |= ((this.regs[9] === 0x80) ? 0x04 : 0) | this.regs[9] & 0xA8 | (this.regs[9] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_25() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[9] & 0x0F) - 1 & 0x10) | ((this.regs[9] === 0x80) ? 0x04 : 0); this.regs[9] = this.regs[9] - 1 & 0xFF; this.regs[6] |= this.regs[9] & 0xA8 | (this.regs[9] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_26() { this.regs[9] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_27() { this.tmp_byte = this.regs[7]; if (this.regs[6] & 0x02) { if ((this.regs[6] & 0x10) || ((this.regs[7] & 0x0F) > 9)) this.tmp_byte -= 6; if ((this.regs[6] & 0x01) || (this.regs[7] > 0x99)) this.tmp_byte -= 0x60; } else { if ((this.regs[6] & 0x10) || ((this.regs[7] & 0x0F) > 9)) this.tmp_byte += 6; if ((this.regs[6] & 0x01) || (this.regs[7] > 0x99)) this.tmp_byte += 0x60; } this.tmp_byte &= 0xFF; this.regs[6] = this.regs[6] & 0x03 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | (this.tmp_byte ^ this.regs[7]) & 0x10 | (this.regs[7] > 0x99 ? 0x01 : 0); this.regs[7] = this.tmp_byte; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_28() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (this.regs[6] & 0x40) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_29() { this.tmp_dword = (this.regs[9] << 8 | this.regs[8]) + (this.regs[9] << 8 | this.regs[8]); this.tmp_word_b = ((this.regs[9] << 8 | this.regs[8]) & 0x0FFF) + ((this.regs[9] << 8 | this.regs[8]) & 0x0FFF); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + 1 & 0xFFFF); this.SET_IX(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_2A() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[8] = this.ptr_read(this.tmp_word); this.regs[9] = this.ptr_read(this.tmp_word + 1 & 0xFFFF); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_2B() { this.SET_IX((this.regs[9] << 8 | this.regs[8]) - 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_2C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[8] & 0x0F) + 1 & 0x10); this.regs[8] = this.regs[8] + 1 & 0xFF; this.regs[6] |= ((this.regs[8] === 0x80) ? 0x04 : 0) | this.regs[8] & 0xA8 | (this.regs[8] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_2D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[8] & 0x0F) - 1 & 0x10) | ((this.regs[8] === 0x80) ? 0x04 : 0); this.regs[8] = this.regs[8] - 1 & 0xFF; this.regs[6] |= this.regs[8] & 0xA8 | (this.regs[8] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_2E() { this.regs[8] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_2F() { this.regs[7] ^= 0xFF; this.regs[6] = this.regs[6] & 0xC5 | this.regs[7] & 0x28 | 0x12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_30() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (!(this.regs[6] & 0x01)) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_31() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_SP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_32() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[17] = this.regs[7]; this.regs[16] = this.tmp_word + 1 & 0xFF; this.ptr_write(this.tmp_word, this.regs[7]); this.tstate += 9; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_33() { this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_34() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.regs[6] & 0x01 | ((this.tmp_byte & 0x0F) + 1 & 0x10); this.tmp_byte = this.tmp_byte + 1 & 0xFF; this.regs[6] |= ((this.tmp_byte === 0x80) ? 0x04 : 0) | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40); this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_35() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.tmp_byte & 0x0F) - 1 & 0x10) | ((this.tmp_byte === 0x80) ? 0x04 : 0); this.tmp_byte = this.tmp_byte - 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40); this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_36() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.read_byte(); this.ptr_write((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF, this.tmp_byte); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_37() { this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x28 | 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_38() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (this.regs[6] & 0x01) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_39() { this.tmp_dword = (this.regs[9] << 8 | this.regs[8]) + (this.regs[13] << 8 | this.regs[12]); this.tmp_word_b = ((this.regs[9] << 8 | this.regs[8]) & 0x0FFF) + ((this.regs[13] << 8 | this.regs[12]) & 0x0FFF); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + 1 & 0xFFFF); this.SET_IX(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_3A() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[7] = this.ptr_read(this.tmp_word); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 9; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_3B() { this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_3C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[7] & 0x0F) + 1 & 0x10); this.regs[7] = this.regs[7] + 1 & 0xFF; this.regs[6] |= ((this.regs[7] === 0x80) ? 0x04 : 0) | this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_3D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[7] & 0x0F) - 1 & 0x10) | ((this.regs[7] === 0x80) ? 0x04 : 0); this.regs[7] = this.regs[7] - 1 & 0xFF; this.regs[6] |= this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_3E() { this.regs[7] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_3F() { this.regs[6] = this.regs[6] & 0xC4 | (this.regs[6] & 0x01) << 4 | (this.regs[6] & 0x01) ^ 0x01 | this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_40() { this.regs[1] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_41() { this.regs[1] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_42() { this.regs[1] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_43() { this.regs[1] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_44() { this.regs[1] = this.regs[9]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_45() { this.regs[1] = this.regs[8]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_46() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.regs[1] = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_47() { this.regs[1] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_48() { this.regs[0] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_49() { this.regs[0] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_4A() { this.regs[0] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_4B() { this.regs[0] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_4C() { this.regs[0] = this.regs[9]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_4D() { this.regs[0] = this.regs[8]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_4E() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.regs[0] = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_4F() { this.regs[0] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_50() { this.regs[3] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_51() { this.regs[3] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_52() { this.regs[3] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_53() { this.regs[3] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_54() { this.regs[3] = this.regs[9]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_55() { this.regs[3] = this.regs[8]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_56() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.regs[3] = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_57() { this.regs[3] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_58() { this.regs[2] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_59() { this.regs[2] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_5A() { this.regs[2] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_5B() { this.regs[2] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_5C() { this.regs[2] = this.regs[9]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_5D() { this.regs[2] = this.regs[8]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_5E() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.regs[2] = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_5F() { this.regs[2] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_60() { this.regs[9] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_61() { this.regs[9] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_62() { this.regs[9] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_63() { this.regs[9] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_64() { this.regs[9] = this.regs[9]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_65() { this.regs[9] = this.regs[8]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_66() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.regs[5] = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_67() { this.regs[9] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_68() { this.regs[8] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_69() { this.regs[8] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_6A() { this.regs[8] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_6B() { this.regs[8] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_6C() { this.regs[8] = this.regs[9]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_6D() { this.regs[8] = this.regs[8]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_6E() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.regs[4] = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_6F() { this.regs[8] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_70() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF, this.regs[1]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_71() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF, this.regs[0]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_72() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF, this.regs[3]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_73() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF, this.regs[2]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_74() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF, this.regs[5]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_75() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF, this.regs[4]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_76() { this.is_halted = true; this.SET_PC((this.regs[15] << 8 | this.regs[14]) - 1 & 0xFFFF); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_77() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF, this.regs[7]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_78() { this.regs[7] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_79() { this.regs[7] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_7A() { this.regs[7] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_7B() { this.regs[7] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_7C() { this.regs[7] = this.regs[9]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_7D() { this.regs[7] = this.regs[8]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_7E() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.regs[7] = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_7F() { this.regs[7] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_80() { this.tmp_word = this.regs[7] + this.regs[1]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[1] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[1]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_81() { this.tmp_word = this.regs[7] + this.regs[0]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[0] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[0]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_82() { this.tmp_word = this.regs[7] + this.regs[3]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[3] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[3]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_83() { this.tmp_word = this.regs[7] + this.regs[2]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[2] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[2]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_84() { this.tmp_word = this.regs[7] + this.regs[9]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[9] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[9]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_85() { this.tmp_word = this.regs[7] + this.regs[8]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[8] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[8]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_86() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_word = this.regs[7] + this.tmp_byte; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_87() { this.tmp_word = this.regs[7] + this.regs[7]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[7] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[7]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_88() { this.tmp_word = this.regs[7] + this.regs[1] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[1] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[1]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_89() { this.tmp_word = this.regs[7] + this.regs[0] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[0] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[0]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_8A() { this.tmp_word = this.regs[7] + this.regs[3] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[3] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[3]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_8B() { this.tmp_word = this.regs[7] + this.regs[2] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[2] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[2]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_8C() { this.tmp_word = this.regs[7] + this.regs[9] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[9] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[9]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_8D() { this.tmp_word = this.regs[7] + this.regs[8] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[8] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[8]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_8E() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_word = this.regs[7] + this.tmp_byte + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_8F() { this.tmp_word = this.regs[7] + this.regs[7] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[7] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[7]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_90() { this.tmp_word = this.regs[7] - this.regs[1] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[1] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[1]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_91() { this.tmp_word = this.regs[7] - this.regs[0] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[0] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[0]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_92() { this.tmp_word = this.regs[7] - this.regs[3] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[3] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[3]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_93() { this.tmp_word = this.regs[7] - this.regs[2] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[2] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[2]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_94() { this.tmp_word = this.regs[7] - this.regs[9] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[9] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[9]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_95() { this.tmp_word = this.regs[7] - this.regs[8] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[8] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[8]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_96() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_97() { this.tmp_word = this.regs[7] - this.regs[7] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[7] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[7]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_98() { this.tmp_word = this.regs[7] - this.regs[1] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[1] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[1]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_99() { this.tmp_word = this.regs[7] - this.regs[0] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[0] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[0]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_9A() { this.tmp_word = this.regs[7] - this.regs[3] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[3] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[3]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_9B() { this.tmp_word = this.regs[7] - this.regs[2] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[2] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[2]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_9C() { this.tmp_word = this.regs[7] - this.regs[9] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[9] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[9]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_9D() { this.tmp_word = this.regs[7] - this.regs[8] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[8] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[8]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_9E() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_word = this.regs[7] - this.tmp_byte - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_9F() { this.tmp_word = this.regs[7] - this.regs[7] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[7] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[7]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_A0() { this.regs[7] &= this.regs[1]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_A1() { this.regs[7] &= this.regs[0]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_A2() { this.regs[7] &= this.regs[3]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_A3() { this.regs[7] &= this.regs[2]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_A4() { this.regs[7] &= this.regs[9]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_A5() { this.regs[7] &= this.regs[8]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_A6() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.regs[7] &= this.tmp_byte; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_A7() { this.regs[7] &= this.regs[7]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_A8() { this.regs[7] ^= this.regs[1]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_A9() { this.regs[7] ^= this.regs[0]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_AA() { this.regs[7] ^= this.regs[3]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_AB() { this.regs[7] ^= this.regs[2]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_AC() { this.regs[7] ^= this.regs[9]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_AD() { this.regs[7] ^= this.regs[8]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_AE() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.regs[7] ^= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_AF() { this.regs[7] ^= this.regs[7]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_B0() { this.regs[7] |= this.regs[1]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_B1() { this.regs[7] |= this.regs[0]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_B2() { this.regs[7] |= this.regs[3]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_B3() { this.regs[7] |= this.regs[2]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_B4() { this.regs[7] |= this.regs[9]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_B5() { this.regs[7] |= this.regs[8]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_B6() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.regs[7] |= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_B7() { this.regs[7] |= this.regs[7]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_B8() { this.tmp_word = this.regs[7] - this.regs[1] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[1] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[1]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[1] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_B9() { this.tmp_word = this.regs[7] - this.regs[0] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[0] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[0]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[0] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_BA() { this.tmp_word = this.regs[7] - this.regs[3] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[3] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[3]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[3] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_BB() { this.tmp_word = this.regs[7] - this.regs[2] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[2] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[2]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[2] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_BC() { this.tmp_word = this.regs[7] - this.regs[9] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[9] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[9]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[9] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_BD() { this.tmp_word = this.regs[7] - this.regs[8] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[8] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[8]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[8] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_BE() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_byte & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_BF() { this.tmp_word = this.regs[7] - this.regs[7] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[7] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[7]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[7] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_C0() { if (!(this.regs[6] & 0x40)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_C1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_BC(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_C2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x40)) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_C3() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_C4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x40)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_C5() { this.tmp_word_b = (this.regs[1] << 8 | this.regs[0]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_C6() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] + this.tmp_byte; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_C7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x00); this.SET_MP(0x00); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_C8() { if (this.regs[6] & 0x40) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_C9() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x40) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB() { this.tmp_int8 = this.read_offset(); var op = this.read_byte(); optable_DD_CB[op].call(this); }
function Cpu_op_DD_CC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x40) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CD() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 13; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CE() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] + this.tmp_byte + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x08); this.SET_MP(0x08); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_D0() { if (!(this.regs[6] & 0x01)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_D1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_DE(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_D2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x01)) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_D3() { this.tmp_word = this.regs[7] << 8 | this.read_byte(); this.ptr_out(this.tmp_word, this.regs[7]); this.regs[16] = this.tmp_word + 1 & 0xFF; this.regs[17] = this.regs[7]; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_D4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x01)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_D5() { this.tmp_word_b = (this.regs[3] << 8 | this.regs[2]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_D6() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_D7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x10); this.SET_MP(0x10); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_D8() { if (this.regs[6] & 0x01) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_D9() { this.tmp_word = (this.regs[1] << 8 | this.regs[0]); this.SET_BC((this.regs[19] << 8 | this.regs[18])); this.SET_BC_(this.tmp_word); this.tmp_word = (this.regs[3] << 8 | this.regs[2]); this.SET_DE((this.regs[21] << 8 | this.regs[20])); this.SET_DE_(this.tmp_word); this.tmp_word = (this.regs[5] << 8 | this.regs[4]); this.SET_HL((this.regs[23] << 8 | this.regs[22])); this.SET_HL_(this.tmp_word); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_DA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x01) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_DB() { this.tmp_word = this.regs[7] << 8 | this.read_byte(); this.regs[7] = this.ptr_in(this.tmp_word); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_DC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x01) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_DD() { this.prefix = 0xDD; this.optable = optable_DD; this.is_noint = true; }
function Cpu_op_DD_DE() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] - this.tmp_byte - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_DF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x18); this.SET_MP(0x18); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_E0() { if (!(this.regs[6] & 0x04)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_E1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_IX(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_E2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x04)) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_E3() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF) << 8; this.SET_MP(this.tmp_word); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.regs[8]); this.ptr_write((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF, this.regs[9]); this.SET_IX(this.tmp_word); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_E4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x04)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_E5() { this.tmp_word_b = (this.regs[9] << 8 | this.regs[8]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_E6() { this.tmp_byte = this.read_byte(); this.regs[7] &= this.tmp_byte; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_E7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x20); this.SET_MP(0x20); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_E8() { if (this.regs[6] & 0x04) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_E9() { this.SET_PC(this.regs[9] << 8 | this.regs[8]); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_EA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x04) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_EB() { this.tmp_word = (this.regs[3] << 8 | this.regs[2]); this.SET_DE(this.regs[5] << 8 | this.regs[4]); this.SET_HL(this.tmp_word); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_EC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x04) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_ED() { this.prefix = 0xED; this.optable = optable_ED; this.is_noint = true; }
function Cpu_op_DD_EE() { this.tmp_byte = this.read_byte(); this.regs[7] ^= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_EF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x28); this.SET_MP(0x28); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_F0() { if (!(this.regs[6] & 0x80)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_F1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_AF(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_F2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x80)) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_F3() { this.regs[28] = 0; this.regs[29] = 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_F4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x80)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_F5() { this.tmp_word_b = (this.regs[7] << 8 | this.regs[6]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_F6() { this.tmp_byte = this.read_byte(); this.regs[7] |= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_F7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x30); this.SET_MP(0x30); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_F8() { if (this.regs[6] & 0x80) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_F9() { this.SET_SP(this.regs[9] << 8 | this.regs[8]); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_FA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x80) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_FB() { this.regs[28] = 1; this.regs[29] = 1; this.is_noint = true; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_FC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x80) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_FD() { this.prefix = 0xFD; this.optable = optable_FD; this.is_noint = true; }
function Cpu_op_DD_FE() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_byte & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_FF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x38); this.SET_MP(0x38); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
optable_DD = [
Cpu_op_DD_00, Cpu_op_DD_01, Cpu_op_DD_02, Cpu_op_DD_03, Cpu_op_DD_04, Cpu_op_DD_05, Cpu_op_DD_06, Cpu_op_DD_07, Cpu_op_DD_08, Cpu_op_DD_09, Cpu_op_DD_0A, Cpu_op_DD_0B, Cpu_op_DD_0C, Cpu_op_DD_0D, Cpu_op_DD_0E, Cpu_op_DD_0F,
Cpu_op_DD_10, Cpu_op_DD_11, Cpu_op_DD_12, Cpu_op_DD_13, Cpu_op_DD_14, Cpu_op_DD_15, Cpu_op_DD_16, Cpu_op_DD_17, Cpu_op_DD_18, Cpu_op_DD_19, Cpu_op_DD_1A, Cpu_op_DD_1B, Cpu_op_DD_1C, Cpu_op_DD_1D, Cpu_op_DD_1E, Cpu_op_DD_1F,
Cpu_op_DD_20, Cpu_op_DD_21, Cpu_op_DD_22, Cpu_op_DD_23, Cpu_op_DD_24, Cpu_op_DD_25, Cpu_op_DD_26, Cpu_op_DD_27, Cpu_op_DD_28, Cpu_op_DD_29, Cpu_op_DD_2A, Cpu_op_DD_2B, Cpu_op_DD_2C, Cpu_op_DD_2D, Cpu_op_DD_2E, Cpu_op_DD_2F,
Cpu_op_DD_30, Cpu_op_DD_31, Cpu_op_DD_32, Cpu_op_DD_33, Cpu_op_DD_34, Cpu_op_DD_35, Cpu_op_DD_36, Cpu_op_DD_37, Cpu_op_DD_38, Cpu_op_DD_39, Cpu_op_DD_3A, Cpu_op_DD_3B, Cpu_op_DD_3C, Cpu_op_DD_3D, Cpu_op_DD_3E, Cpu_op_DD_3F,
Cpu_op_DD_40, Cpu_op_DD_41, Cpu_op_DD_42, Cpu_op_DD_43, Cpu_op_DD_44, Cpu_op_DD_45, Cpu_op_DD_46, Cpu_op_DD_47, Cpu_op_DD_48, Cpu_op_DD_49, Cpu_op_DD_4A, Cpu_op_DD_4B, Cpu_op_DD_4C, Cpu_op_DD_4D, Cpu_op_DD_4E, Cpu_op_DD_4F,
Cpu_op_DD_50, Cpu_op_DD_51, Cpu_op_DD_52, Cpu_op_DD_53, Cpu_op_DD_54, Cpu_op_DD_55, Cpu_op_DD_56, Cpu_op_DD_57, Cpu_op_DD_58, Cpu_op_DD_59, Cpu_op_DD_5A, Cpu_op_DD_5B, Cpu_op_DD_5C, Cpu_op_DD_5D, Cpu_op_DD_5E, Cpu_op_DD_5F,
Cpu_op_DD_60, Cpu_op_DD_61, Cpu_op_DD_62, Cpu_op_DD_63, Cpu_op_DD_64, Cpu_op_DD_65, Cpu_op_DD_66, Cpu_op_DD_67, Cpu_op_DD_68, Cpu_op_DD_69, Cpu_op_DD_6A, Cpu_op_DD_6B, Cpu_op_DD_6C, Cpu_op_DD_6D, Cpu_op_DD_6E, Cpu_op_DD_6F,
Cpu_op_DD_70, Cpu_op_DD_71, Cpu_op_DD_72, Cpu_op_DD_73, Cpu_op_DD_74, Cpu_op_DD_75, Cpu_op_DD_76, Cpu_op_DD_77, Cpu_op_DD_78, Cpu_op_DD_79, Cpu_op_DD_7A, Cpu_op_DD_7B, Cpu_op_DD_7C, Cpu_op_DD_7D, Cpu_op_DD_7E, Cpu_op_DD_7F,
Cpu_op_DD_80, Cpu_op_DD_81, Cpu_op_DD_82, Cpu_op_DD_83, Cpu_op_DD_84, Cpu_op_DD_85, Cpu_op_DD_86, Cpu_op_DD_87, Cpu_op_DD_88, Cpu_op_DD_89, Cpu_op_DD_8A, Cpu_op_DD_8B, Cpu_op_DD_8C, Cpu_op_DD_8D, Cpu_op_DD_8E, Cpu_op_DD_8F,
Cpu_op_DD_90, Cpu_op_DD_91, Cpu_op_DD_92, Cpu_op_DD_93, Cpu_op_DD_94, Cpu_op_DD_95, Cpu_op_DD_96, Cpu_op_DD_97, Cpu_op_DD_98, Cpu_op_DD_99, Cpu_op_DD_9A, Cpu_op_DD_9B, Cpu_op_DD_9C, Cpu_op_DD_9D, Cpu_op_DD_9E, Cpu_op_DD_9F,
Cpu_op_DD_A0, Cpu_op_DD_A1, Cpu_op_DD_A2, Cpu_op_DD_A3, Cpu_op_DD_A4, Cpu_op_DD_A5, Cpu_op_DD_A6, Cpu_op_DD_A7, Cpu_op_DD_A8, Cpu_op_DD_A9, Cpu_op_DD_AA, Cpu_op_DD_AB, Cpu_op_DD_AC, Cpu_op_DD_AD, Cpu_op_DD_AE, Cpu_op_DD_AF,
Cpu_op_DD_B0, Cpu_op_DD_B1, Cpu_op_DD_B2, Cpu_op_DD_B3, Cpu_op_DD_B4, Cpu_op_DD_B5, Cpu_op_DD_B6, Cpu_op_DD_B7, Cpu_op_DD_B8, Cpu_op_DD_B9, Cpu_op_DD_BA, Cpu_op_DD_BB, Cpu_op_DD_BC, Cpu_op_DD_BD, Cpu_op_DD_BE, Cpu_op_DD_BF,
Cpu_op_DD_C0, Cpu_op_DD_C1, Cpu_op_DD_C2, Cpu_op_DD_C3, Cpu_op_DD_C4, Cpu_op_DD_C5, Cpu_op_DD_C6, Cpu_op_DD_C7, Cpu_op_DD_C8, Cpu_op_DD_C9, Cpu_op_DD_CA, Cpu_op_DD_CB, Cpu_op_DD_CC, Cpu_op_DD_CD, Cpu_op_DD_CE, Cpu_op_DD_CF,
Cpu_op_DD_D0, Cpu_op_DD_D1, Cpu_op_DD_D2, Cpu_op_DD_D3, Cpu_op_DD_D4, Cpu_op_DD_D5, Cpu_op_DD_D6, Cpu_op_DD_D7, Cpu_op_DD_D8, Cpu_op_DD_D9, Cpu_op_DD_DA, Cpu_op_DD_DB, Cpu_op_DD_DC, Cpu_op_DD_DD, Cpu_op_DD_DE, Cpu_op_DD_DF,
Cpu_op_DD_E0, Cpu_op_DD_E1, Cpu_op_DD_E2, Cpu_op_DD_E3, Cpu_op_DD_E4, Cpu_op_DD_E5, Cpu_op_DD_E6, Cpu_op_DD_E7, Cpu_op_DD_E8, Cpu_op_DD_E9, Cpu_op_DD_EA, Cpu_op_DD_EB, Cpu_op_DD_EC, Cpu_op_DD_ED, Cpu_op_DD_EE, Cpu_op_DD_EF,
Cpu_op_DD_F0, Cpu_op_DD_F1, Cpu_op_DD_F2, Cpu_op_DD_F3, Cpu_op_DD_F4, Cpu_op_DD_F5, Cpu_op_DD_F6, Cpu_op_DD_F7, Cpu_op_DD_F8, Cpu_op_DD_F9, Cpu_op_DD_FA, Cpu_op_DD_FB, Cpu_op_DD_FC, Cpu_op_DD_FD, Cpu_op_DD_FE, Cpu_op_DD_FF
];
function Cpu_op_DD_CB_00() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_01() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_02() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_03() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_04() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_05() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_06() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_07() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_08() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_09() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_0A() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_0B() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_0C() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_0D() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_0E() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_0F() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_10() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_11() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_12() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_13() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_14() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_15() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_16() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_17() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_18() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_19() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_1A() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_1B() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_1C() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_1D() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_1E() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_1F() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_20() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_21() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_22() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_23() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_24() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_25() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_26() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_27() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_28() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_29() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_2A() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_2B() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_2C() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_2D() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_2E() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_2F() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_30() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_31() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_32() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_33() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_34() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_35() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_36() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_37() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_38() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_39() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_3A() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_3B() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_3C() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_3D() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_3E() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_3F() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_46() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x01; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_4E() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x02; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_56() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x04; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_5E() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x08; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_66() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x10; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_6E() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x20; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_76() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x40; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_7E() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x80; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_80() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_81() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_82() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_83() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_84() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_85() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_86() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_87() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_88() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_89() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_8A() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_8B() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_8C() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_8D() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_8E() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_8F() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_90() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_91() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_92() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_93() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_94() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_95() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_96() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_97() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_98() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_99() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_9A() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_9B() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_9C() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_9D() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_9E() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_9F() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_A0() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_A1() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_A2() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_A3() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_A4() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_A5() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_A6() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_A7() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_A8() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_A9() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_AA() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_AB() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_AC() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_AD() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_AE() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_AF() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_B0() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_B1() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_B2() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_B3() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_B4() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_B5() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_B6() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_B7() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_B8() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_B9() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_BA() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_BB() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_BC() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_BD() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_BE() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_BF() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_C0() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_C1() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_C2() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_C3() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_C4() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_C5() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_C6() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_C7() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_C8() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_C9() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_CA() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_CB() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_CC() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_CD() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_CE() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_CF() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_D0() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_D1() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_D2() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_D3() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_D4() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_D5() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_D6() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_D7() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_D8() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_D9() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_DA() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_DB() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_DC() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_DD() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_DE() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_DF() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_E0() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_E1() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_E2() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_E3() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_E4() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_E5() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_E6() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_E7() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_E8() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_E9() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_EA() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_EB() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_EC() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_ED() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_EE() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_EF() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_F0() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_F1() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_F2() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_F3() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_F4() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_F5() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_F6() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_F7() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_F8() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_F9() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_FA() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_FB() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_FC() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_FD() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_FE() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_DD_CB_FF() { this.tmp_addr = (this.regs[9] << 8 | this.regs[8]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
optable_DD_CB = [
Cpu_op_DD_CB_00, Cpu_op_DD_CB_01, Cpu_op_DD_CB_02, Cpu_op_DD_CB_03, Cpu_op_DD_CB_04, Cpu_op_DD_CB_05, Cpu_op_DD_CB_06, Cpu_op_DD_CB_07, Cpu_op_DD_CB_08, Cpu_op_DD_CB_09, Cpu_op_DD_CB_0A, Cpu_op_DD_CB_0B, Cpu_op_DD_CB_0C, Cpu_op_DD_CB_0D, Cpu_op_DD_CB_0E, Cpu_op_DD_CB_0F,
Cpu_op_DD_CB_10, Cpu_op_DD_CB_11, Cpu_op_DD_CB_12, Cpu_op_DD_CB_13, Cpu_op_DD_CB_14, Cpu_op_DD_CB_15, Cpu_op_DD_CB_16, Cpu_op_DD_CB_17, Cpu_op_DD_CB_18, Cpu_op_DD_CB_19, Cpu_op_DD_CB_1A, Cpu_op_DD_CB_1B, Cpu_op_DD_CB_1C, Cpu_op_DD_CB_1D, Cpu_op_DD_CB_1E, Cpu_op_DD_CB_1F,
Cpu_op_DD_CB_20, Cpu_op_DD_CB_21, Cpu_op_DD_CB_22, Cpu_op_DD_CB_23, Cpu_op_DD_CB_24, Cpu_op_DD_CB_25, Cpu_op_DD_CB_26, Cpu_op_DD_CB_27, Cpu_op_DD_CB_28, Cpu_op_DD_CB_29, Cpu_op_DD_CB_2A, Cpu_op_DD_CB_2B, Cpu_op_DD_CB_2C, Cpu_op_DD_CB_2D, Cpu_op_DD_CB_2E, Cpu_op_DD_CB_2F,
Cpu_op_DD_CB_30, Cpu_op_DD_CB_31, Cpu_op_DD_CB_32, Cpu_op_DD_CB_33, Cpu_op_DD_CB_34, Cpu_op_DD_CB_35, Cpu_op_DD_CB_36, Cpu_op_DD_CB_37, Cpu_op_DD_CB_38, Cpu_op_DD_CB_39, Cpu_op_DD_CB_3A, Cpu_op_DD_CB_3B, Cpu_op_DD_CB_3C, Cpu_op_DD_CB_3D, Cpu_op_DD_CB_3E, Cpu_op_DD_CB_3F,
Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E,
Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_56, Cpu_op_DD_CB_46, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_5E, Cpu_op_DD_CB_4E,
Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_66, Cpu_op_DD_CB_46, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_6E, Cpu_op_DD_CB_4E,
Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_46, Cpu_op_DD_CB_76, Cpu_op_DD_CB_46, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_4E, Cpu_op_DD_CB_7E, Cpu_op_DD_CB_4E,
Cpu_op_DD_CB_80, Cpu_op_DD_CB_81, Cpu_op_DD_CB_82, Cpu_op_DD_CB_83, Cpu_op_DD_CB_84, Cpu_op_DD_CB_85, Cpu_op_DD_CB_86, Cpu_op_DD_CB_87, Cpu_op_DD_CB_88, Cpu_op_DD_CB_89, Cpu_op_DD_CB_8A, Cpu_op_DD_CB_8B, Cpu_op_DD_CB_8C, Cpu_op_DD_CB_8D, Cpu_op_DD_CB_8E, Cpu_op_DD_CB_8F,
Cpu_op_DD_CB_90, Cpu_op_DD_CB_91, Cpu_op_DD_CB_92, Cpu_op_DD_CB_93, Cpu_op_DD_CB_94, Cpu_op_DD_CB_95, Cpu_op_DD_CB_96, Cpu_op_DD_CB_97, Cpu_op_DD_CB_98, Cpu_op_DD_CB_99, Cpu_op_DD_CB_9A, Cpu_op_DD_CB_9B, Cpu_op_DD_CB_9C, Cpu_op_DD_CB_9D, Cpu_op_DD_CB_9E, Cpu_op_DD_CB_9F,
Cpu_op_DD_CB_A0, Cpu_op_DD_CB_A1, Cpu_op_DD_CB_A2, Cpu_op_DD_CB_A3, Cpu_op_DD_CB_A4, Cpu_op_DD_CB_A5, Cpu_op_DD_CB_A6, Cpu_op_DD_CB_A7, Cpu_op_DD_CB_A8, Cpu_op_DD_CB_A9, Cpu_op_DD_CB_AA, Cpu_op_DD_CB_AB, Cpu_op_DD_CB_AC, Cpu_op_DD_CB_AD, Cpu_op_DD_CB_AE, Cpu_op_DD_CB_AF,
Cpu_op_DD_CB_B0, Cpu_op_DD_CB_B1, Cpu_op_DD_CB_B2, Cpu_op_DD_CB_B3, Cpu_op_DD_CB_B4, Cpu_op_DD_CB_B5, Cpu_op_DD_CB_B6, Cpu_op_DD_CB_B7, Cpu_op_DD_CB_B8, Cpu_op_DD_CB_B9, Cpu_op_DD_CB_BA, Cpu_op_DD_CB_BB, Cpu_op_DD_CB_BC, Cpu_op_DD_CB_BD, Cpu_op_DD_CB_BE, Cpu_op_DD_CB_BF,
Cpu_op_DD_CB_C0, Cpu_op_DD_CB_C1, Cpu_op_DD_CB_C2, Cpu_op_DD_CB_C3, Cpu_op_DD_CB_C4, Cpu_op_DD_CB_C5, Cpu_op_DD_CB_C6, Cpu_op_DD_CB_C7, Cpu_op_DD_CB_C8, Cpu_op_DD_CB_C9, Cpu_op_DD_CB_CA, Cpu_op_DD_CB_CB, Cpu_op_DD_CB_CC, Cpu_op_DD_CB_CD, Cpu_op_DD_CB_CE, Cpu_op_DD_CB_CF,
Cpu_op_DD_CB_D0, Cpu_op_DD_CB_D1, Cpu_op_DD_CB_D2, Cpu_op_DD_CB_D3, Cpu_op_DD_CB_D4, Cpu_op_DD_CB_D5, Cpu_op_DD_CB_D6, Cpu_op_DD_CB_D7, Cpu_op_DD_CB_D8, Cpu_op_DD_CB_D9, Cpu_op_DD_CB_DA, Cpu_op_DD_CB_DB, Cpu_op_DD_CB_DC, Cpu_op_DD_CB_DD, Cpu_op_DD_CB_DE, Cpu_op_DD_CB_DF,
Cpu_op_DD_CB_E0, Cpu_op_DD_CB_E1, Cpu_op_DD_CB_E2, Cpu_op_DD_CB_E3, Cpu_op_DD_CB_E4, Cpu_op_DD_CB_E5, Cpu_op_DD_CB_E6, Cpu_op_DD_CB_E7, Cpu_op_DD_CB_E8, Cpu_op_DD_CB_E9, Cpu_op_DD_CB_EA, Cpu_op_DD_CB_EB, Cpu_op_DD_CB_EC, Cpu_op_DD_CB_ED, Cpu_op_DD_CB_EE, Cpu_op_DD_CB_EF,
Cpu_op_DD_CB_F0, Cpu_op_DD_CB_F1, Cpu_op_DD_CB_F2, Cpu_op_DD_CB_F3, Cpu_op_DD_CB_F4, Cpu_op_DD_CB_F5, Cpu_op_DD_CB_F6, Cpu_op_DD_CB_F7, Cpu_op_DD_CB_F8, Cpu_op_DD_CB_F9, Cpu_op_DD_CB_FA, Cpu_op_DD_CB_FB, Cpu_op_DD_CB_FC, Cpu_op_DD_CB_FD, Cpu_op_DD_CB_FE, Cpu_op_DD_CB_FF
];
function Cpu_op_ED_00() { this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_01() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_BC(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_02() { this.regs[17] = this.regs[7]; this.regs[16] = (this.regs[1] << 8 | this.regs[0]) + 1 & 0xFF; this.ptr_write(this.regs[1] << 8 | this.regs[0], this.regs[7]); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_03() { this.SET_BC((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_04() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[1] & 0x0F) + 1 & 0x10); this.regs[1] = this.regs[1] + 1 & 0xFF; this.regs[6] |= (this.regs[1] & 0x80) >> 5 | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_05() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[1] & 0x0F) - 1 & 0x10) | (this.regs[1] & 0x80) >> 5; this.regs[1] = this.regs[1] - 1 & 0xFF; this.regs[6] |= this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_06() { this.regs[1] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_07() { this.regs[7] = this.regs[7] << 1 & 0xFF | this.regs[7] >> 7; this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x29; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_08() { this.tmp_word = (this.regs[7] << 8 | this.regs[6]); this.SET_AF((this.regs[25] << 8 | this.regs[24])); this.SET_AF_(this.tmp_word); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_09() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) + (this.regs[1] << 8 | this.regs[0]); this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + ((this.regs[1] << 8 | this.regs[0]) & 0x0FFF); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_0A() { this.regs[7] = this.ptr_read(this.regs[1] << 8 | this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_0B() { this.SET_BC((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_0C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[0] & 0x0F) + 1 & 0x10); this.regs[0] = this.regs[0] + 1 & 0xFF; this.regs[6] |= (this.regs[0] & 0x80) >> 5 | this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_0D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[0] & 0x0F) - 1 & 0x10) | (this.regs[0] & 0x80) >> 5; this.regs[0] = this.regs[0] - 1 & 0xFF; this.regs[6] |= this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_0E() { this.regs[0] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_0F() { this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x01; this.regs[7] = this.regs[7] >> 1 | this.regs[7] << 7 & 0xFF; this.regs[6] |= this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_10() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; this.regs[1] = this.regs[1] - 1 & 0xFF; if (this.regs[1]) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 9; } else { this.tstate += 4; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_11() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_DE(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_12() { this.regs[17] = this.regs[7]; this.regs[16] = (this.regs[3] << 8 | this.regs[2]) + 1 & 0xFF; this.ptr_write(this.regs[3] << 8 | this.regs[2], this.regs[7]); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_13() { this.SET_DE((this.regs[3] << 8 | this.regs[2]) + 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_14() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[3] & 0x0F) + 1 & 0x10); this.regs[3] = this.regs[3] + 1 & 0xFF; this.regs[6] |= (this.regs[3] & 0x80) >> 5 | this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_15() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[3] & 0x0F) - 1 & 0x10) | (this.regs[3] & 0x80) >> 5; this.regs[3] = this.regs[3] - 1 & 0xFF; this.regs[6] |= this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_16() { this.regs[3] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_17() { this.tmp_byte = this.regs[7]; this.regs[7] = this.regs[7] << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x28 | this.tmp_byte >> 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_18() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_19() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) + (this.regs[3] << 8 | this.regs[2]); this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + ((this.regs[3] << 8 | this.regs[2]) & 0x0FFF); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_1A() { this.regs[7] = this.ptr_read(this.regs[3] << 8 | this.regs[2]); this.SET_MP((this.regs[3] << 8 | this.regs[2]) + 1 & 0xFFFF); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_1B() { this.SET_DE((this.regs[3] << 8 | this.regs[2]) - 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_1C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[2] & 0x0F) + 1 & 0x10); this.regs[2] = this.regs[2] + 1 & 0xFF; this.regs[6] |= (this.regs[2] & 0x80) >> 5 | this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_1D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[2] & 0x0F) - 1 & 0x10) | (this.regs[2] & 0x80) >> 5; this.regs[2] = this.regs[2] - 1 & 0xFF; this.regs[6] |= this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_1E() { this.regs[2] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_1F() { this.tmp_byte = this.regs[7]; this.regs[7] = this.regs[7] >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x28 | this.tmp_byte & 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_20() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (!(this.regs[6] & 0x40)) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_21() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_HL(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_22() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.ptr_write(this.tmp_word, this.regs[4]); this.ptr_write(this.tmp_word + 1 & 0xFFFF, this.regs[5]); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_23() { this.SET_HL((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_24() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[5] & 0x0F) + 1 & 0x10); this.regs[5] = this.regs[5] + 1 & 0xFF; this.regs[6] |= (this.regs[5] & 0x80) >> 5 | this.regs[5] & 0xA8 | (this.regs[5] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_25() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[5] & 0x0F) - 1 & 0x10) | (this.regs[5] & 0x80) >> 5; this.regs[5] = this.regs[5] - 1 & 0xFF; this.regs[6] |= this.regs[5] & 0xA8 | (this.regs[5] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_26() { this.regs[5] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_27() { this.tmp_byte = this.regs[7]; if (this.regs[6] & 0x02) { if ((this.regs[6] & 0x10) || ((this.regs[7] & 0x0F) > 9)) this.tmp_byte -= 6; if ((this.regs[6] & 0x01) || (this.regs[7] > 0x99)) this.tmp_byte -= 0x60; } else { if ((this.regs[6] & 0x10) || ((this.regs[7] & 0x0F) > 9)) this.tmp_byte += 6; if ((this.regs[6] & 0x01) || (this.regs[7] > 0x99)) this.tmp_byte += 0x60; } this.tmp_byte &= 0xFF; this.regs[6] = this.regs[6] & 0x03 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | (this.tmp_byte ^ this.regs[7]) & 0x10 | (this.regs[7] > 0x99 ? 0x01 : 0); this.regs[7] = this.tmp_byte; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_28() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (this.regs[6] & 0x40) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_29() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) + (this.regs[5] << 8 | this.regs[4]); this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_2A() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[4] = this.ptr_read(this.tmp_word); this.regs[5] = this.ptr_read(this.tmp_word + 1 & 0xFFFF); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_2B() { this.SET_HL((this.regs[5] << 8 | this.regs[4]) - 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_2C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[4] & 0x0F) + 1 & 0x10); this.regs[4] = this.regs[4] + 1 & 0xFF; this.regs[6] |= (this.regs[4] & 0x80) >> 5 | this.regs[4] & 0xA8 | (this.regs[4] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_2D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[4] & 0x0F) - 1 & 0x10) | (this.regs[4] & 0x80) >> 5; this.regs[4] = this.regs[4] - 1 & 0xFF; this.regs[6] |= this.regs[4] & 0xA8 | (this.regs[4] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_2E() { this.regs[4] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_2F() { this.regs[7] ^= 0xFF; this.regs[6] = this.regs[6] & 0xC5 | this.regs[7] & 0x28 | 0x12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_30() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (!(this.regs[6] & 0x01)) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_31() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_SP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_32() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[17] = this.regs[7]; this.regs[16] = this.tmp_word + 1 & 0xFF; this.ptr_write(this.tmp_word, this.regs[7]); this.tstate += 9; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_33() { this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_34() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[6] = this.regs[6] & 0x01 | ((this.tmp_byte & 0x0F) + 1 & 0x10); this.tmp_byte = this.tmp_byte + 1 & 0xFF; this.regs[6] |= (this.tmp_byte & 0x80) >> 5 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40); this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_35() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.tmp_byte & 0x0F) - 1 & 0x10) | (this.tmp_byte & 0x80) >> 5; this.tmp_byte = this.tmp_byte - 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40); this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_36() { this.tmp_byte = this.read_byte(); this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_37() { this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x28 | 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_38() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (this.regs[6] & 0x01) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_39() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) + (this.regs[13] << 8 | this.regs[12]); this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + ((this.regs[13] << 8 | this.regs[12]) & 0x0FFF); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_3A() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[7] = this.ptr_read(this.tmp_word); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 9; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_3B() { this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_3C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[7] & 0x0F) + 1 & 0x10); this.regs[7] = this.regs[7] + 1 & 0xFF; this.regs[6] |= (this.regs[7] & 0x80) >> 5 | this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_3D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[7] & 0x0F) - 1 & 0x10) | (this.regs[7] & 0x80) >> 5; this.regs[7] = this.regs[7] - 1 & 0xFF; this.regs[6] |= this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_3E() { this.regs[7] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_3F() { this.regs[6] = this.regs[6] & 0xC4 | (this.regs[6] & 0x01) << 4 | (this.regs[6] & 0x01) ^ 0x01 | this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_40() { this.regs[1] = this.ptr_in(this.regs[1] << 8 | this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.regs[6] = this.regs[6] & 0x01 | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[this.regs[1]]; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_41() { this.ptr_out(this.regs[1] << 8 | this.regs[0], this.regs[1]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_42() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) - (this.regs[1] << 8 | this.regs[0]) - (this.regs[6] & 0x01) & 0xFFFFFFFF; this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) - ((this.regs[1] << 8 | this.regs[0]) & 0x0FFF) - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_int32 = CONV_INT16(this.regs[5] << 8 | this.regs[4]) - CONV_INT16(this.regs[1] << 8 | this.regs[0]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_dword & 0x10000) >> 0x10 | 0x02 | (this.tmp_word_b & 0x1000) >> 8 | (this.tmp_int32 < -32768 || this.tmp_int32 > 32767 ? 0x04 : 0) | (this.tmp_dword >> 8) & 0xA8 | (this.tmp_dword & 0xFFFF ? 0 : 0x40); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_43() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.ptr_write(this.tmp_word, this.regs[0]); this.ptr_write(this.tmp_word + 1 & 0xFFFF, this.regs[1]); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_44() { this.tmp_byte = this.regs[7]; this.regs[7] = 0; this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_45() { this.regs[28] = this.regs[29]; this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_46() { this.regs[30] = 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_47() { this.regs[26] = this.regs[7]; this.tstate += 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_48() { this.regs[0] = this.ptr_in(this.regs[1] << 8 | this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.regs[6] = this.regs[6] & 0x01 | this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40) | Z80.tbl_parity[this.regs[0]]; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_49() { this.ptr_out(this.regs[1] << 8 | this.regs[0], this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_4A() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) + (this.regs[1] << 8 | this.regs[0]) + (this.regs[6] & 0x01); this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + ((this.regs[1] << 8 | this.regs[0]) & 0x0FFF) + (this.regs[6] & 0x01); this.tmp_int32 = CONV_INT16(this.regs[5] << 8 | this.regs[4]) + CONV_INT16(this.regs[1] << 8 | this.regs[0]) + (this.regs[6] & 0x01); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.regs[6] = (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_word_b & 0x1000) >> 8 | (this.tmp_int32 < -32768 || this.tmp_int32 > 32767 ? 0x04 : 0) | ((this.tmp_dword >> 8) & 0xA8) | (this.tmp_dword & 0xFFFF ? 0 : 0x40); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_4B() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[0] = this.ptr_read(this.tmp_word); this.regs[1] = this.ptr_read(this.tmp_word + 1 & 0xFFFF); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_4C() { this.tmp_byte = this.regs[7]; this.regs[7] = 0; this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_4D() { this.regs[28] = this.regs[29]; this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_4E() { this.regs[30] = 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_4F() { this.regs[27] = this.regs[7]; this.tstate += 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_50() { this.regs[3] = this.ptr_in(this.regs[1] << 8 | this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.regs[6] = this.regs[6] & 0x01 | this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40) | Z80.tbl_parity[this.regs[3]]; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_51() { this.ptr_out(this.regs[1] << 8 | this.regs[0], this.regs[3]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_52() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) - (this.regs[3] << 8 | this.regs[2]) - (this.regs[6] & 0x01) & 0xFFFFFFFF; this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) - ((this.regs[3] << 8 | this.regs[2]) & 0x0FFF) - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_int32 = CONV_INT16(this.regs[5] << 8 | this.regs[4]) - CONV_INT16(this.regs[3] << 8 | this.regs[2]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_dword & 0x10000) >> 0x10 | 0x02 | (this.tmp_word_b & 0x1000) >> 8 | (this.tmp_int32 < -32768 || this.tmp_int32 > 32767 ? 0x04 : 0) | (this.tmp_dword >> 8) & 0xA8 | (this.tmp_dword & 0xFFFF ? 0 : 0x40); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_53() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.ptr_write(this.tmp_word, this.regs[2]); this.ptr_write(this.tmp_word + 1 & 0xFFFF, this.regs[3]); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_54() { this.tmp_byte = this.regs[7]; this.regs[7] = 0; this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_55() { this.regs[28] = this.regs[29]; this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_56() { this.regs[30] = 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_57() { this.regs[7] = this.regs[26]; this.regs[6] = this.regs[6] & 0x01 | this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | this.regs[29] << 2; this.is_reset_pv = true; this.tstate += 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_58() { this.regs[2] = this.ptr_in(this.regs[1] << 8 | this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.regs[6] = this.regs[6] & 0x01 | this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40) | Z80.tbl_parity[this.regs[2]]; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_59() { this.ptr_out(this.regs[1] << 8 | this.regs[0], this.regs[2]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_5A() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) + (this.regs[3] << 8 | this.regs[2]) + (this.regs[6] & 0x01); this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + ((this.regs[3] << 8 | this.regs[2]) & 0x0FFF) + (this.regs[6] & 0x01); this.tmp_int32 = CONV_INT16(this.regs[5] << 8 | this.regs[4]) + CONV_INT16(this.regs[3] << 8 | this.regs[2]) + (this.regs[6] & 0x01); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.regs[6] = (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_word_b & 0x1000) >> 8 | (this.tmp_int32 < -32768 || this.tmp_int32 > 32767 ? 0x04 : 0) | ((this.tmp_dword >> 8) & 0xA8) | (this.tmp_dword & 0xFFFF ? 0 : 0x40); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_5B() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[2] = this.ptr_read(this.tmp_word); this.regs[3] = this.ptr_read(this.tmp_word + 1 & 0xFFFF); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_5C() { this.tmp_byte = this.regs[7]; this.regs[7] = 0; this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_5D() { this.regs[28] = this.regs[29]; this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_5E() { this.regs[30] = 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_5F() { this.regs[7] = this.regs[27]; this.regs[6] = this.regs[6] & 0x01 | this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | this.regs[29] << 2; this.is_reset_pv = true; this.tstate += 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_60() { this.regs[5] = this.ptr_in(this.regs[1] << 8 | this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.regs[6] = this.regs[6] & 0x01 | this.regs[5] & 0xA8 | (this.regs[5] ? 0 : 0x40) | Z80.tbl_parity[this.regs[5]]; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_61() { this.ptr_out(this.regs[1] << 8 | this.regs[0], this.regs[5]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_62() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) - (this.regs[5] << 8 | this.regs[4]) - (this.regs[6] & 0x01) & 0xFFFFFFFF; this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) - ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_int32 = CONV_INT16(this.regs[5] << 8 | this.regs[4]) - CONV_INT16(this.regs[5] << 8 | this.regs[4]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_dword & 0x10000) >> 0x10 | 0x02 | (this.tmp_word_b & 0x1000) >> 8 | (this.tmp_int32 < -32768 || this.tmp_int32 > 32767 ? 0x04 : 0) | (this.tmp_dword >> 8) & 0xA8 | (this.tmp_dword & 0xFFFF ? 0 : 0x40); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_63() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.ptr_write(this.tmp_word, this.regs[4]); this.ptr_write(this.tmp_word + 1 & 0xFFFF, this.regs[5]); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_64() { this.tmp_byte = this.regs[7]; this.regs[7] = 0; this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_65() { this.regs[28] = this.regs[29]; this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_66() { this.regs[30] = 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_67() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.ptr_write(this.regs[5] << 8 | this.regs[4], this.regs[7] << 4 & 0xFF | this.tmp_byte >> 4); this.regs[7] = this.regs[7] & 0xF0 | this.tmp_byte & 0x0F; this.regs[6] = this.regs[6] & 0x01 | this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.tstate += 10; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_68() { this.regs[4] = this.ptr_in(this.regs[1] << 8 | this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.regs[6] = this.regs[6] & 0x01 | this.regs[4] & 0xA8 | (this.regs[4] ? 0 : 0x40) | Z80.tbl_parity[this.regs[4]]; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_69() { this.ptr_out(this.regs[1] << 8 | this.regs[0], this.regs[4]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_6A() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) + (this.regs[5] << 8 | this.regs[4]) + (this.regs[6] & 0x01); this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + (this.regs[6] & 0x01); this.tmp_int32 = CONV_INT16(this.regs[5] << 8 | this.regs[4]) + CONV_INT16(this.regs[5] << 8 | this.regs[4]) + (this.regs[6] & 0x01); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.regs[6] = (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_word_b & 0x1000) >> 8 | (this.tmp_int32 < -32768 || this.tmp_int32 > 32767 ? 0x04 : 0) | ((this.tmp_dword >> 8) & 0xA8) | (this.tmp_dword & 0xFFFF ? 0 : 0x40); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_6B() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[4] = this.ptr_read(this.tmp_word); this.regs[5] = this.ptr_read(this.tmp_word + 1 & 0xFFFF); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_6C() { this.tmp_byte = this.regs[7]; this.regs[7] = 0; this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_6D() { this.regs[28] = this.regs[29]; this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_6E() { this.regs[30] = 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_6F() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte << 4 & 0xFF | this.regs[7] & 0x0F); this.regs[7] = this.regs[7] & 0xF0 | this.tmp_byte >> 4; this.regs[6] = this.regs[6] & 0x01 | this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.tstate += 10; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_70() { this.tmp_byte = this.ptr_in(this.regs[1] << 8 | this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.regs[6] = this.regs[6] & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_71() { this.ptr_out(this.regs[1] << 8 | this.regs[0], 0); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_72() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) - (this.regs[13] << 8 | this.regs[12]) - (this.regs[6] & 0x01) & 0xFFFFFFFF; this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) - ((this.regs[13] << 8 | this.regs[12]) & 0x0FFF) - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_int32 = CONV_INT16(this.regs[5] << 8 | this.regs[4]) - CONV_INT16((this.regs[13] << 8 | this.regs[12])) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_dword & 0x10000) >> 0x10 | 0x02 | (this.tmp_word_b & 0x1000) >> 8 | (this.tmp_int32 < -32768 || this.tmp_int32 > 32767 ? 0x04 : 0) | (this.tmp_dword >> 8) & 0xA8 | (this.tmp_dword & 0xFFFF ? 0 : 0x40); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_73() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.ptr_write(this.tmp_word, this.regs[12]); this.ptr_write(this.tmp_word + 1 & 0xFFFF, this.regs[13]); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_74() { this.tmp_byte = this.regs[7]; this.regs[7] = 0; this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_75() { this.regs[28] = this.regs[29]; this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_76() { this.regs[30] = 1; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_77() { this.ptr_write(this.regs[5] << 8 | this.regs[4], this.regs[7]); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_78() { this.regs[7] = this.ptr_in(this.regs[1] << 8 | this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.regs[6] = this.regs[6] & 0x01 | this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_79() { this.ptr_out(this.regs[1] << 8 | this.regs[0], this.regs[7]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 4; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_7A() { this.tmp_dword = (this.regs[5] << 8 | this.regs[4]) + (this.regs[13] << 8 | this.regs[12]) + (this.regs[6] & 0x01); this.tmp_word_b = ((this.regs[5] << 8 | this.regs[4]) & 0x0FFF) + ((this.regs[13] << 8 | this.regs[12]) & 0x0FFF) + (this.regs[6] & 0x01); this.tmp_int32 = CONV_INT16(this.regs[5] << 8 | this.regs[4]) + CONV_INT16((this.regs[13] << 8 | this.regs[12])) + (this.regs[6] & 0x01); this.SET_MP((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_HL(this.tmp_dword & 0xFFFF); this.regs[6] = (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_word_b & 0x1000) >> 8 | (this.tmp_int32 < -32768 || this.tmp_int32 > 32767 ? 0x04 : 0) | ((this.tmp_dword >> 8) & 0xA8) | (this.tmp_dword & 0xFFFF ? 0 : 0x40); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_7B() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[12] = this.ptr_read(this.tmp_word); this.regs[13] = this.ptr_read(this.tmp_word + 1 & 0xFFFF); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_7C() { this.tmp_byte = this.regs[7]; this.regs[7] = 0; this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_7D() { this.regs[28] = this.regs[29]; this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_7E() { this.regs[30] = 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_7F() { this.regs[7] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_80() { this.tmp_word = this.regs[7] + this.regs[1]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[1] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[1]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_81() { this.tmp_word = this.regs[7] + this.regs[0]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[0] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[0]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_82() { this.tmp_word = this.regs[7] + this.regs[3]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[3] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[3]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_83() { this.tmp_word = this.regs[7] + this.regs[2]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[2] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[2]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_84() { this.tmp_word = this.regs[7] + this.regs[5]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[5] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[5]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_85() { this.tmp_word = this.regs[7] + this.regs[4]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[4] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[4]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_86() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_word = this.regs[7] + this.tmp_byte; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_87() { this.tmp_word = this.regs[7] + this.regs[7]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[7] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[7]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_88() { this.tmp_word = this.regs[7] + this.regs[1] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[1] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[1]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_89() { this.tmp_word = this.regs[7] + this.regs[0] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[0] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[0]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_8A() { this.tmp_word = this.regs[7] + this.regs[3] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[3] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[3]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_8B() { this.tmp_word = this.regs[7] + this.regs[2] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[2] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[2]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_8C() { this.tmp_word = this.regs[7] + this.regs[5] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[5] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[5]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_8D() { this.tmp_word = this.regs[7] + this.regs[4] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[4] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[4]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_8E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_word = this.regs[7] + this.tmp_byte + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_8F() { this.tmp_word = this.regs[7] + this.regs[7] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[7] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[7]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_90() { this.tmp_word = this.regs[7] - this.regs[1] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[1] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[1]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_91() { this.tmp_word = this.regs[7] - this.regs[0] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[0] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[0]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_92() { this.tmp_word = this.regs[7] - this.regs[3] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[3] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[3]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_93() { this.tmp_word = this.regs[7] - this.regs[2] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[2] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[2]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_94() { this.tmp_word = this.regs[7] - this.regs[5] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[5] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[5]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_95() { this.tmp_word = this.regs[7] - this.regs[4] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[4] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[4]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_96() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_97() { this.tmp_word = this.regs[7] - this.regs[7] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[7] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[7]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_98() { this.tmp_word = this.regs[7] - this.regs[1] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[1] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[1]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_99() { this.tmp_word = this.regs[7] - this.regs[0] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[0] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[0]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_9A() { this.tmp_word = this.regs[7] - this.regs[3] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[3] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[3]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_9B() { this.tmp_word = this.regs[7] - this.regs[2] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[2] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[2]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_9C() { this.tmp_word = this.regs[7] - this.regs[5] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[5] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[5]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_9D() { this.tmp_word = this.regs[7] - this.regs[4] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[4] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[4]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_9E() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_word = this.regs[7] - this.tmp_byte - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_9F() { this.tmp_word = this.regs[7] - this.regs[7] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[7] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[7]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_A0() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.ptr_write(this.regs[3] << 8 | this.regs[2], this.tmp_byte); this.SET_BC((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.tmp_byte += this.regs[7]; this.regs[6] = this.regs[6] & 0xC1 | ((this.regs[1] << 8 | this.regs[0]) ? 0x04 : 0) | this.tmp_byte & 0x08 | (this.tmp_byte << 4) & 0x20; this.SET_HL((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_DE((this.regs[3] << 8 | this.regs[2]) + 1 & 0xFFFF); this.tstate += 8; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_A1() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_byte = this.regs[7] - this.tmp_byte & 0xFF; this.SET_BC((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[1] << 8 | this.regs[0]) ? 0x04 : 0) | this.tmp_byte_b & 0x10 | (this.tmp_byte ? 0 : 0x40) | this.tmp_byte & 0x80; this.tmp_byte = this.tmp_byte - ((this.regs[6] & 0x10) >> 4) & 0xFF; this.regs[6] |= this.tmp_byte & 0x08 | (this.tmp_byte << 4) & 0x20; this.SET_HL((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_MP((this.regs[17] << 8 | this.regs[16]) + 1 & 0xFFFF); this.tstate += 8; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_A2() { this.tmp_byte = this.ptr_in(this.regs[1] << 8 | this.regs[0]); this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.regs[1] = this.regs[1] - 1 & 0xFF; this.SET_HL((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.tmp_word = this.tmp_byte + (this.regs[0] + 1 & 0xFF); this.regs[6] = (this.tmp_byte >> 6) & 0x02 | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[(this.tmp_word & 0x07) ^ this.regs[1]] | (this.tmp_word > 255 ? 0x11 : 0); this.tstate += 8; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_A3() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[1] = this.regs[1] - 1 & 0xFF; this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.ptr_out(this.regs[1] << 8 | this.regs[0], this.tmp_byte); this.SET_HL((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.tmp_word = this.tmp_byte + this.regs[4]; this.regs[6] = (this.tmp_byte >> 6) & 0x02 | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[(this.tmp_word & 0x07) ^ this.regs[1]] | (this.tmp_word > 255 ? 0x11 : 0); this.tstate += 8; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_A4() { this.regs[7] &= this.regs[5]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_A5() { this.regs[7] &= this.regs[4]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_A6() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[7] &= this.tmp_byte; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_A7() { this.regs[7] &= this.regs[7]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_A8() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.ptr_write(this.regs[3] << 8 | this.regs[2], this.tmp_byte); this.SET_BC((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.tmp_byte += this.regs[7]; this.regs[6] = this.regs[6] & 0xC1 | ((this.regs[1] << 8 | this.regs[0]) ? 0x04 : 0) | this.tmp_byte & 0x08 | (this.tmp_byte << 4) & 0x20; this.SET_HL((this.regs[5] << 8 | this.regs[4]) - 1 & 0xFFFF); this.SET_DE((this.regs[3] << 8 | this.regs[2]) - 1 & 0xFFFF); this.tstate += 8; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_A9() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_byte = this.regs[7] - this.tmp_byte & 0xFF; this.SET_BC((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[1] << 8 | this.regs[0]) ? 0x04 : 0) | this.tmp_byte_b & 0x10 | (this.tmp_byte ? 0 : 0x40) | this.tmp_byte & 0x80; this.tmp_byte = this.tmp_byte - ((this.regs[6] & 0x10) >> 4) & 0xFF; this.regs[6] |= this.tmp_byte & 0x08 | (this.tmp_byte << 4) & 0x20; this.SET_HL((this.regs[5] << 8 | this.regs[4]) - 1 & 0xFFFF); this.SET_MP((this.regs[17] << 8 | this.regs[16]) - 1 & 0xFFFF); this.tstate += 8; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_AA() { this.tmp_byte = this.ptr_in(this.regs[1] << 8 | this.regs[0]); this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.SET_MP((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.regs[1] = this.regs[1] - 1 & 0xFF; this.SET_HL((this.regs[5] << 8 | this.regs[4]) - 1 & 0xFFFF); this.tmp_word = this.tmp_byte + (this.regs[0] - 1 & 0xFF); this.regs[6] = (this.tmp_byte >> 6) & 0x02 | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[(this.tmp_word & 0x07) ^ this.regs[1]] | (this.tmp_word > 255 ? 0x11 : 0); this.tstate += 8; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_AB() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[1] = this.regs[1] - 1 & 0xFF; this.SET_MP((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.ptr_out(this.regs[1] << 8 | this.regs[0], this.tmp_byte); this.SET_HL((this.regs[5] << 8 | this.regs[4]) - 1 & 0xFFFF); this.tmp_word = this.tmp_byte + this.regs[4]; this.regs[6] = (this.tmp_byte >> 6) & 0x02 | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[(this.tmp_word & 0x07) ^ this.regs[1]] | (this.tmp_word > 255 ? 0x11 : 0); this.tstate += 8; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_AC() { this.regs[7] ^= this.regs[5]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_AD() { this.regs[7] ^= this.regs[4]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_AE() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[7] ^= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_AF() { this.regs[7] ^= this.regs[7]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_B0() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.ptr_write(this.regs[3] << 8 | this.regs[2], this.tmp_byte); this.SET_BC((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.tmp_byte += this.regs[7]; this.regs[6] = this.regs[6] & 0xC1 | ((this.regs[1] << 8 | this.regs[0]) ? 0x04 : 0) | this.tmp_byte & 0x08 | (this.tmp_byte << 4) & 0x20; this.SET_HL((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.SET_DE((this.regs[3] << 8 | this.regs[2]) + 1 & 0xFFFF); if (this.regs[1] << 8 | this.regs[0]) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) - 2 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14]) + 1 & 0xFFFF); this.tstate += 13; } else { this.tstate += 8; }; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_B1() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_byte = this.regs[7] - this.tmp_byte & 0xFF; this.SET_BC((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[1] << 8 | this.regs[0]) ? 0x04 : 0) | this.tmp_byte_b & 0x10 | (this.tmp_byte ? 0 : 0x40) | this.tmp_byte & 0x80; this.tmp_byte = this.tmp_byte - ((this.regs[6] & 0x10) >> 4) & 0xFF; this.regs[6] |= this.tmp_byte & 0x08 | (this.tmp_byte << 4) & 0x20; this.SET_HL((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); if ((this.regs[6] & 0x44) == 0x04) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) - 2 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14]) + 1 & 0xFFFF); this.tstate += 13; } else { this.SET_MP((this.regs[17] << 8 | this.regs[16]) + 1 & 0xFFFF); this.tstate += 8; }; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_B2() { this.tmp_byte = this.ptr_in(this.regs[1] << 8 | this.regs[0]); this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.regs[1] = this.regs[1] - 1 & 0xFF; this.SET_HL((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.tmp_word = this.tmp_byte + (this.regs[0] + 1 & 0xFF); this.regs[6] = (this.tmp_byte >> 6) & 0x02 | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[(this.tmp_word & 0x07) ^ this.regs[1]] | (this.tmp_word > 255 ? 0x11 : 0); if (this.regs[1]) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) - 2 & 0xFFFF); this.tstate += 13; } else { this.tstate += 8; }; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_B3() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[1] = this.regs[1] - 1 & 0xFF; this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.ptr_out(this.regs[1] << 8 | this.regs[0], this.tmp_byte); this.SET_HL((this.regs[5] << 8 | this.regs[4]) + 1 & 0xFFFF); this.tmp_word = this.tmp_byte + this.regs[4]; this.regs[6] = (this.tmp_byte >> 6) & 0x02 | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[(this.tmp_word & 0x07) ^ this.regs[1]] | (this.tmp_word > 255 ? 0x11 : 0); if (this.regs[1]) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) - 2 & 0xFFFF); this.tstate += 13; } else { this.tstate += 8; }; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_B4() { this.regs[7] |= this.regs[5]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_B5() { this.regs[7] |= this.regs[4]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_B6() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[7] |= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_B7() { this.regs[7] |= this.regs[7]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_B8() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.ptr_write(this.regs[3] << 8 | this.regs[2], this.tmp_byte); this.SET_BC((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.tmp_byte += this.regs[7]; this.regs[6] = this.regs[6] & 0xC1 | ((this.regs[1] << 8 | this.regs[0]) ? 0x04 : 0) | this.tmp_byte & 0x08 | (this.tmp_byte << 4) & 0x20; this.SET_HL((this.regs[5] << 8 | this.regs[4]) - 1 & 0xFFFF); this.SET_DE((this.regs[3] << 8 | this.regs[2]) - 1 & 0xFFFF); if (this.regs[1] << 8 | this.regs[0]) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) - 2 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14]) + 1 & 0xFFFF); this.tstate += 13; } else { this.tstate += 8; }; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_B9() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_byte = this.regs[7] - this.tmp_byte & 0xFF; this.SET_BC((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[1] << 8 | this.regs[0]) ? 0x04 : 0) | this.tmp_byte_b & 0x10 | (this.tmp_byte ? 0 : 0x40) | this.tmp_byte & 0x80; this.tmp_byte = this.tmp_byte - ((this.regs[6] & 0x10) >> 4) & 0xFF; this.regs[6] |= this.tmp_byte & 0x08 | (this.tmp_byte << 4) & 0x20; this.SET_HL((this.regs[5] << 8 | this.regs[4]) - 1 & 0xFFFF); if ((this.regs[6] & 0x44) == 0x04) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) - 2 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14]) + 1 & 0xFFFF); this.tstate += 13; } else { this.SET_MP((this.regs[17] << 8 | this.regs[16]) + 1 & 0xFFFF); this.tstate += 8; }; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_BA() { this.tmp_byte = this.ptr_in(this.regs[1] << 8 | this.regs[0]); this.ptr_write(this.regs[5] << 8 | this.regs[4], this.tmp_byte); this.SET_MP((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.regs[1] = this.regs[1] - 1 & 0xFF; this.SET_HL((this.regs[5] << 8 | this.regs[4]) - 1 & 0xFFFF); this.tmp_word = this.tmp_byte + (this.regs[0] - 1 & 0xFF); this.regs[6] = (this.tmp_byte >> 6) & 0x02 | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[(this.tmp_word & 0x07) ^ this.regs[1]] | (this.tmp_word > 255 ? 0x11 : 0); if (this.regs[1]) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) - 2 & 0xFFFF); this.tstate += 13; } else { this.tstate += 8; }; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_BB() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.regs[1] = this.regs[1] - 1 & 0xFF; this.SET_MP((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.ptr_out(this.regs[1] << 8 | this.regs[0], this.tmp_byte); this.SET_HL((this.regs[5] << 8 | this.regs[4]) - 1 & 0xFFFF); this.tmp_word = this.tmp_byte + this.regs[4]; this.regs[6] = (this.tmp_byte >> 6) & 0x02 | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40) | Z80.tbl_parity[(this.tmp_word & 0x07) ^ this.regs[1]] | (this.tmp_word > 255 ? 0x11 : 0); if (this.regs[1]) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) - 2 & 0xFFFF); this.tstate += 13; } else { this.tstate += 8; }; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_BC() { this.tmp_word = this.regs[7] - this.regs[5] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[5] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[5]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[5] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_BD() { this.tmp_word = this.regs[7] - this.regs[4] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[4] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[4]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[4] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_BE() { this.tmp_byte = this.ptr_read(this.regs[5] << 8 | this.regs[4]); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_byte & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_BF() { this.tmp_word = this.regs[7] - this.regs[7] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[7] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[7]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[7] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_C0() { if (!(this.regs[6] & 0x40)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_C1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_BC(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_C2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x40)) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_C3() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_C4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x40)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_C5() { this.tmp_word_b = (this.regs[1] << 8 | this.regs[0]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_C6() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] + this.tmp_byte; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_C7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x00); this.SET_MP(0x00); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_C8() { if (this.regs[6] & 0x40) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_C9() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_CA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x40) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_CB() { this.prefix = 0xCB; this.optable = optable_CB; this.is_noint = true; }
function Cpu_op_ED_CC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x40) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_CD() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 13; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_CE() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] + this.tmp_byte + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_CF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x08); this.SET_MP(0x08); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_D0() { if (!(this.regs[6] & 0x01)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_D1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_DE(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_D2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x01)) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_D3() { this.tmp_word = this.regs[7] << 8 | this.read_byte(); this.ptr_out(this.tmp_word, this.regs[7]); this.regs[16] = this.tmp_word + 1 & 0xFF; this.regs[17] = this.regs[7]; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_D4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x01)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_D5() { this.tmp_word_b = (this.regs[3] << 8 | this.regs[2]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_D6() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_D7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x10); this.SET_MP(0x10); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_D8() { if (this.regs[6] & 0x01) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_D9() { this.tmp_word = (this.regs[1] << 8 | this.regs[0]); this.SET_BC((this.regs[19] << 8 | this.regs[18])); this.SET_BC_(this.tmp_word); this.tmp_word = (this.regs[3] << 8 | this.regs[2]); this.SET_DE((this.regs[21] << 8 | this.regs[20])); this.SET_DE_(this.tmp_word); this.tmp_word = (this.regs[5] << 8 | this.regs[4]); this.SET_HL((this.regs[23] << 8 | this.regs[22])); this.SET_HL_(this.tmp_word); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_DA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x01) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_DB() { this.tmp_word = this.regs[7] << 8 | this.read_byte(); this.regs[7] = this.ptr_in(this.tmp_word); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_DC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x01) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_DD() { this.prefix = 0xDD; this.optable = optable_DD; this.is_noint = true; }
function Cpu_op_ED_DE() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] - this.tmp_byte - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_DF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x18); this.SET_MP(0x18); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_E0() { if (!(this.regs[6] & 0x04)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_E1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_HL(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_E2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x04)) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_E3() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF) << 8; this.SET_MP(this.tmp_word); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.regs[4]); this.ptr_write((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF, this.regs[5]); this.SET_HL(this.tmp_word); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_E4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x04)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_E5() { this.tmp_word_b = (this.regs[5] << 8 | this.regs[4]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_E6() { this.tmp_byte = this.read_byte(); this.regs[7] &= this.tmp_byte; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_E7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x20); this.SET_MP(0x20); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_E8() { if (this.regs[6] & 0x04) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_E9() { this.SET_PC(this.regs[5] << 8 | this.regs[4]); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_EA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x04) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_EB() { this.tmp_word = (this.regs[3] << 8 | this.regs[2]); this.SET_DE(this.regs[5] << 8 | this.regs[4]); this.SET_HL(this.tmp_word); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_EC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x04) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_ED() { this.prefix = 0xED; this.optable = optable_ED; this.is_noint = true; }
function Cpu_op_ED_EE() { this.tmp_byte = this.read_byte(); this.regs[7] ^= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_EF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x28); this.SET_MP(0x28); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_F0() { if (!(this.regs[6] & 0x80)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_F1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_AF(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_F2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x80)) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_F3() { this.regs[28] = 0; this.regs[29] = 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_F4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x80)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_F5() { this.tmp_word_b = (this.regs[7] << 8 | this.regs[6]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_F6() { this.tmp_byte = this.read_byte(); this.regs[7] |= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_F7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x30); this.SET_MP(0x30); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_F8() { if (this.regs[6] & 0x80) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_F9() { this.SET_SP(this.regs[5] << 8 | this.regs[4]); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_FA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x80) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_FB() { this.regs[28] = 1; this.regs[29] = 1; this.is_noint = true; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_FC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x80) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_FD() { this.prefix = 0xFD; this.optable = optable_FD; this.is_noint = true; }
function Cpu_op_ED_FE() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_byte & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_ED_FF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x38); this.SET_MP(0x38); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
optable_ED = [
Cpu_op_ED_00, Cpu_op_ED_01, Cpu_op_ED_02, Cpu_op_ED_03, Cpu_op_ED_04, Cpu_op_ED_05, Cpu_op_ED_06, Cpu_op_ED_07, Cpu_op_ED_08, Cpu_op_ED_09, Cpu_op_ED_0A, Cpu_op_ED_0B, Cpu_op_ED_0C, Cpu_op_ED_0D, Cpu_op_ED_0E, Cpu_op_ED_0F,
Cpu_op_ED_10, Cpu_op_ED_11, Cpu_op_ED_12, Cpu_op_ED_13, Cpu_op_ED_14, Cpu_op_ED_15, Cpu_op_ED_16, Cpu_op_ED_17, Cpu_op_ED_18, Cpu_op_ED_19, Cpu_op_ED_1A, Cpu_op_ED_1B, Cpu_op_ED_1C, Cpu_op_ED_1D, Cpu_op_ED_1E, Cpu_op_ED_1F,
Cpu_op_ED_20, Cpu_op_ED_21, Cpu_op_ED_22, Cpu_op_ED_23, Cpu_op_ED_24, Cpu_op_ED_25, Cpu_op_ED_26, Cpu_op_ED_27, Cpu_op_ED_28, Cpu_op_ED_29, Cpu_op_ED_2A, Cpu_op_ED_2B, Cpu_op_ED_2C, Cpu_op_ED_2D, Cpu_op_ED_2E, Cpu_op_ED_2F,
Cpu_op_ED_30, Cpu_op_ED_31, Cpu_op_ED_32, Cpu_op_ED_33, Cpu_op_ED_34, Cpu_op_ED_35, Cpu_op_ED_36, Cpu_op_ED_37, Cpu_op_ED_38, Cpu_op_ED_39, Cpu_op_ED_3A, Cpu_op_ED_3B, Cpu_op_ED_3C, Cpu_op_ED_3D, Cpu_op_ED_3E, Cpu_op_ED_3F,
Cpu_op_ED_40, Cpu_op_ED_41, Cpu_op_ED_42, Cpu_op_ED_43, Cpu_op_ED_44, Cpu_op_ED_45, Cpu_op_ED_46, Cpu_op_ED_47, Cpu_op_ED_48, Cpu_op_ED_49, Cpu_op_ED_4A, Cpu_op_ED_4B, Cpu_op_ED_4C, Cpu_op_ED_4D, Cpu_op_ED_4E, Cpu_op_ED_4F,
Cpu_op_ED_50, Cpu_op_ED_51, Cpu_op_ED_52, Cpu_op_ED_53, Cpu_op_ED_54, Cpu_op_ED_55, Cpu_op_ED_56, Cpu_op_ED_57, Cpu_op_ED_58, Cpu_op_ED_59, Cpu_op_ED_5A, Cpu_op_ED_5B, Cpu_op_ED_5C, Cpu_op_ED_5D, Cpu_op_ED_5E, Cpu_op_ED_5F,
Cpu_op_ED_60, Cpu_op_ED_61, Cpu_op_ED_62, Cpu_op_ED_63, Cpu_op_ED_64, Cpu_op_ED_65, Cpu_op_ED_66, Cpu_op_ED_67, Cpu_op_ED_68, Cpu_op_ED_69, Cpu_op_ED_6A, Cpu_op_ED_6B, Cpu_op_ED_6C, Cpu_op_ED_6D, Cpu_op_ED_6E, Cpu_op_ED_6F,
Cpu_op_ED_70, Cpu_op_ED_71, Cpu_op_ED_72, Cpu_op_ED_73, Cpu_op_ED_74, Cpu_op_ED_75, Cpu_op_ED_76, Cpu_op_ED_77, Cpu_op_ED_78, Cpu_op_ED_79, Cpu_op_ED_7A, Cpu_op_ED_7B, Cpu_op_ED_7C, Cpu_op_ED_7D, Cpu_op_ED_7E, Cpu_op_ED_7F,
Cpu_op_ED_80, Cpu_op_ED_81, Cpu_op_ED_82, Cpu_op_ED_83, Cpu_op_ED_84, Cpu_op_ED_85, Cpu_op_ED_86, Cpu_op_ED_87, Cpu_op_ED_88, Cpu_op_ED_89, Cpu_op_ED_8A, Cpu_op_ED_8B, Cpu_op_ED_8C, Cpu_op_ED_8D, Cpu_op_ED_8E, Cpu_op_ED_8F,
Cpu_op_ED_90, Cpu_op_ED_91, Cpu_op_ED_92, Cpu_op_ED_93, Cpu_op_ED_94, Cpu_op_ED_95, Cpu_op_ED_96, Cpu_op_ED_97, Cpu_op_ED_98, Cpu_op_ED_99, Cpu_op_ED_9A, Cpu_op_ED_9B, Cpu_op_ED_9C, Cpu_op_ED_9D, Cpu_op_ED_9E, Cpu_op_ED_9F,
Cpu_op_ED_A0, Cpu_op_ED_A1, Cpu_op_ED_A2, Cpu_op_ED_A3, Cpu_op_ED_A4, Cpu_op_ED_A5, Cpu_op_ED_A6, Cpu_op_ED_A7, Cpu_op_ED_A8, Cpu_op_ED_A9, Cpu_op_ED_AA, Cpu_op_ED_AB, Cpu_op_ED_AC, Cpu_op_ED_AD, Cpu_op_ED_AE, Cpu_op_ED_AF,
Cpu_op_ED_B0, Cpu_op_ED_B1, Cpu_op_ED_B2, Cpu_op_ED_B3, Cpu_op_ED_B4, Cpu_op_ED_B5, Cpu_op_ED_B6, Cpu_op_ED_B7, Cpu_op_ED_B8, Cpu_op_ED_B9, Cpu_op_ED_BA, Cpu_op_ED_BB, Cpu_op_ED_BC, Cpu_op_ED_BD, Cpu_op_ED_BE, Cpu_op_ED_BF,
Cpu_op_ED_C0, Cpu_op_ED_C1, Cpu_op_ED_C2, Cpu_op_ED_C3, Cpu_op_ED_C4, Cpu_op_ED_C5, Cpu_op_ED_C6, Cpu_op_ED_C7, Cpu_op_ED_C8, Cpu_op_ED_C9, Cpu_op_ED_CA, Cpu_op_ED_CB, Cpu_op_ED_CC, Cpu_op_ED_CD, Cpu_op_ED_CE, Cpu_op_ED_CF,
Cpu_op_ED_D0, Cpu_op_ED_D1, Cpu_op_ED_D2, Cpu_op_ED_D3, Cpu_op_ED_D4, Cpu_op_ED_D5, Cpu_op_ED_D6, Cpu_op_ED_D7, Cpu_op_ED_D8, Cpu_op_ED_D9, Cpu_op_ED_DA, Cpu_op_ED_DB, Cpu_op_ED_DC, Cpu_op_ED_DD, Cpu_op_ED_DE, Cpu_op_ED_DF,
Cpu_op_ED_E0, Cpu_op_ED_E1, Cpu_op_ED_E2, Cpu_op_ED_E3, Cpu_op_ED_E4, Cpu_op_ED_E5, Cpu_op_ED_E6, Cpu_op_ED_E7, Cpu_op_ED_E8, Cpu_op_ED_E9, Cpu_op_ED_EA, Cpu_op_ED_EB, Cpu_op_ED_EC, Cpu_op_ED_ED, Cpu_op_ED_EE, Cpu_op_ED_EF,
Cpu_op_ED_F0, Cpu_op_ED_F1, Cpu_op_ED_F2, Cpu_op_ED_F3, Cpu_op_ED_F4, Cpu_op_ED_F5, Cpu_op_ED_F6, Cpu_op_ED_F7, Cpu_op_ED_F8, Cpu_op_ED_F9, Cpu_op_ED_FA, Cpu_op_ED_FB, Cpu_op_ED_FC, Cpu_op_ED_FD, Cpu_op_ED_FE, Cpu_op_ED_FF
];
function Cpu_op_FD_00() { this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_01() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_BC(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_02() { this.regs[17] = this.regs[7]; this.regs[16] = (this.regs[1] << 8 | this.regs[0]) + 1 & 0xFF; this.ptr_write(this.regs[1] << 8 | this.regs[0], this.regs[7]); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_03() { this.SET_BC((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_04() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[1] & 0x0F) + 1 & 0x10); this.regs[1] = this.regs[1] + 1 & 0xFF; this.regs[6] |= ((this.regs[1] === 0x80) ? 0x04 : 0) | this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_05() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[1] & 0x0F) - 1 & 0x10) | ((this.regs[1] === 0x80) ? 0x04 : 0); this.regs[1] = this.regs[1] - 1 & 0xFF; this.regs[6] |= this.regs[1] & 0xA8 | (this.regs[1] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_06() { this.regs[1] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_07() { this.regs[7] = this.regs[7] << 1 & 0xFF | this.regs[7] >> 7; this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x29; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_08() { this.tmp_word = (this.regs[7] << 8 | this.regs[6]); this.SET_AF((this.regs[25] << 8 | this.regs[24])); this.SET_AF_(this.tmp_word); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_09() { this.tmp_dword = (this.regs[11] << 8 | this.regs[10]) + (this.regs[1] << 8 | this.regs[0]); this.tmp_word_b = ((this.regs[11] << 8 | this.regs[10]) & 0x0FFF) + ((this.regs[1] << 8 | this.regs[0]) & 0x0FFF); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + 1 & 0xFFFF); this.SET_IY(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_0A() { this.regs[7] = this.ptr_read(this.regs[1] << 8 | this.regs[0]); this.SET_MP((this.regs[1] << 8 | this.regs[0]) + 1 & 0xFFFF); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_0B() { this.SET_BC((this.regs[1] << 8 | this.regs[0]) - 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_0C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[0] & 0x0F) + 1 & 0x10); this.regs[0] = this.regs[0] + 1 & 0xFF; this.regs[6] |= ((this.regs[0] === 0x80) ? 0x04 : 0) | this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_0D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[0] & 0x0F) - 1 & 0x10) | ((this.regs[0] === 0x80) ? 0x04 : 0); this.regs[0] = this.regs[0] - 1 & 0xFF; this.regs[6] |= this.regs[0] & 0xA8 | (this.regs[0] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_0E() { this.regs[0] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_0F() { this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x01; this.regs[7] = this.regs[7] >> 1 | this.regs[7] << 7 & 0xFF; this.regs[6] |= this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_10() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; this.regs[1] = this.regs[1] - 1 & 0xFF; if (this.regs[1]) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 9; } else { this.tstate += 4; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_11() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_DE(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_12() { this.regs[17] = this.regs[7]; this.regs[16] = (this.regs[3] << 8 | this.regs[2]) + 1 & 0xFF; this.ptr_write(this.regs[3] << 8 | this.regs[2], this.regs[7]); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_13() { this.SET_DE((this.regs[3] << 8 | this.regs[2]) + 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_14() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[3] & 0x0F) + 1 & 0x10); this.regs[3] = this.regs[3] + 1 & 0xFF; this.regs[6] |= ((this.regs[3] === 0x80) ? 0x04 : 0) | this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_15() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[3] & 0x0F) - 1 & 0x10) | ((this.regs[3] === 0x80) ? 0x04 : 0); this.regs[3] = this.regs[3] - 1 & 0xFF; this.regs[6] |= this.regs[3] & 0xA8 | (this.regs[3] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_16() { this.regs[3] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_17() { this.tmp_byte = this.regs[7]; this.regs[7] = this.regs[7] << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x28 | this.tmp_byte >> 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_18() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_19() { this.tmp_dword = (this.regs[11] << 8 | this.regs[10]) + (this.regs[3] << 8 | this.regs[2]); this.tmp_word_b = ((this.regs[11] << 8 | this.regs[10]) & 0x0FFF) + ((this.regs[3] << 8 | this.regs[2]) & 0x0FFF); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + 1 & 0xFFFF); this.SET_IY(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_1A() { this.regs[7] = this.ptr_read(this.regs[3] << 8 | this.regs[2]); this.SET_MP((this.regs[3] << 8 | this.regs[2]) + 1 & 0xFFFF); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_1B() { this.SET_DE((this.regs[3] << 8 | this.regs[2]) - 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_1C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[2] & 0x0F) + 1 & 0x10); this.regs[2] = this.regs[2] + 1 & 0xFF; this.regs[6] |= ((this.regs[2] === 0x80) ? 0x04 : 0) | this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_1D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[2] & 0x0F) - 1 & 0x10) | ((this.regs[2] === 0x80) ? 0x04 : 0); this.regs[2] = this.regs[2] - 1 & 0xFF; this.regs[6] |= this.regs[2] & 0xA8 | (this.regs[2] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_1E() { this.regs[2] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_1F() { this.tmp_byte = this.regs[7]; this.regs[7] = this.regs[7] >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x28 | this.tmp_byte & 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_20() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (!(this.regs[6] & 0x40)) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_21() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_IY(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_22() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.ptr_write(this.tmp_word, this.regs[10]); this.ptr_write(this.tmp_word + 1 & 0xFFFF, this.regs[11]); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_23() { this.SET_IY((this.regs[11] << 8 | this.regs[10]) + 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_24() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[11] & 0x0F) + 1 & 0x10); this.regs[11] = this.regs[11] + 1 & 0xFF; this.regs[6] |= ((this.regs[11] === 0x80) ? 0x04 : 0) | this.regs[11] & 0xA8 | (this.regs[11] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_25() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[11] & 0x0F) - 1 & 0x10) | ((this.regs[11] === 0x80) ? 0x04 : 0); this.regs[11] = this.regs[11] - 1 & 0xFF; this.regs[6] |= this.regs[11] & 0xA8 | (this.regs[11] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_26() { this.regs[11] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_27() { this.tmp_byte = this.regs[7]; if (this.regs[6] & 0x02) { if ((this.regs[6] & 0x10) || ((this.regs[7] & 0x0F) > 9)) this.tmp_byte -= 6; if ((this.regs[6] & 0x01) || (this.regs[7] > 0x99)) this.tmp_byte -= 0x60; } else { if ((this.regs[6] & 0x10) || ((this.regs[7] & 0x0F) > 9)) this.tmp_byte += 6; if ((this.regs[6] & 0x01) || (this.regs[7] > 0x99)) this.tmp_byte += 0x60; } this.tmp_byte &= 0xFF; this.regs[6] = this.regs[6] & 0x03 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte] | (this.tmp_byte ^ this.regs[7]) & 0x10 | (this.regs[7] > 0x99 ? 0x01 : 0); this.regs[7] = this.tmp_byte; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_28() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (this.regs[6] & 0x40) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_29() { this.tmp_dword = (this.regs[11] << 8 | this.regs[10]) + (this.regs[11] << 8 | this.regs[10]); this.tmp_word_b = ((this.regs[11] << 8 | this.regs[10]) & 0x0FFF) + ((this.regs[11] << 8 | this.regs[10]) & 0x0FFF); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + 1 & 0xFFFF); this.SET_IY(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_2A() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[10] = this.ptr_read(this.tmp_word); this.regs[11] = this.ptr_read(this.tmp_word + 1 & 0xFFFF); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_2B() { this.SET_IY((this.regs[11] << 8 | this.regs[10]) - 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_2C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[10] & 0x0F) + 1 & 0x10); this.regs[10] = this.regs[10] + 1 & 0xFF; this.regs[6] |= ((this.regs[10] === 0x80) ? 0x04 : 0) | this.regs[10] & 0xA8 | (this.regs[10] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_2D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[10] & 0x0F) - 1 & 0x10) | ((this.regs[10] === 0x80) ? 0x04 : 0); this.regs[10] = this.regs[10] - 1 & 0xFF; this.regs[6] |= this.regs[10] & 0xA8 | (this.regs[10] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_2E() { this.regs[10] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_2F() { this.regs[7] ^= 0xFF; this.regs[6] = this.regs[6] & 0xC5 | this.regs[7] & 0x28 | 0x12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_30() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (!(this.regs[6] & 0x01)) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_31() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_SP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_32() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[17] = this.regs[7]; this.regs[16] = this.tmp_word + 1 & 0xFF; this.ptr_write(this.tmp_word, this.regs[7]); this.tstate += 9; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_33() { this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_34() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.regs[6] & 0x01 | ((this.tmp_byte & 0x0F) + 1 & 0x10); this.tmp_byte = this.tmp_byte + 1 & 0xFF; this.regs[6] |= ((this.tmp_byte === 0x80) ? 0x04 : 0) | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40); this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_35() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.tmp_byte & 0x0F) - 1 & 0x10) | ((this.tmp_byte === 0x80) ? 0x04 : 0); this.tmp_byte = this.tmp_byte - 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40); this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_36() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.read_byte(); this.ptr_write((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF, this.tmp_byte); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_37() { this.regs[6] = this.regs[6] & 0xC4 | this.regs[7] & 0x28 | 0x01; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_38() { this.tmp_int8 = this.read_byte(); if (this.tmp_int8 > 127) this.tmp_int8 -= 256; if (this.regs[6] & 0x01) { this.SET_PC((this.regs[15] << 8 | this.regs[14]) + this.tmp_int8 & 0xFFFF); this.SET_MP((this.regs[15] << 8 | this.regs[14])); this.tstate += 8; } else { this.tstate += 3; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_39() { this.tmp_dword = (this.regs[11] << 8 | this.regs[10]) + (this.regs[13] << 8 | this.regs[12]); this.tmp_word_b = ((this.regs[11] << 8 | this.regs[10]) & 0x0FFF) + ((this.regs[13] << 8 | this.regs[12]) & 0x0FFF); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + 1 & 0xFFFF); this.SET_IY(this.tmp_dword & 0xFFFF); this.regs[6] = this.regs[6] & 0xC4 | (this.tmp_dword & 0x10000) >> 0x10 | (this.tmp_dword >> 8) & 0x28 | (this.tmp_word_b & 0x1000) >> 8; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_3A() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.regs[7] = this.ptr_read(this.tmp_word); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 9; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_3B() { this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_3C() { this.regs[6] = this.regs[6] & 0x01 | ((this.regs[7] & 0x0F) + 1 & 0x10); this.regs[7] = this.regs[7] + 1 & 0xFF; this.regs[6] |= ((this.regs[7] === 0x80) ? 0x04 : 0) | this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_3D() { this.regs[6] = this.regs[6] & 0x01 | 0x02 | ((this.regs[7] & 0x0F) - 1 & 0x10) | ((this.regs[7] === 0x80) ? 0x04 : 0); this.regs[7] = this.regs[7] - 1 & 0xFF; this.regs[6] |= this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_3E() { this.regs[7] = this.read_byte(); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_3F() { this.regs[6] = this.regs[6] & 0xC4 | (this.regs[6] & 0x01) << 4 | (this.regs[6] & 0x01) ^ 0x01 | this.regs[7] & 0x28; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_40() { this.regs[1] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_41() { this.regs[1] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_42() { this.regs[1] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_43() { this.regs[1] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_44() { this.regs[1] = this.regs[11]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_45() { this.regs[1] = this.regs[10]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_46() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.regs[1] = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_47() { this.regs[1] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_48() { this.regs[0] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_49() { this.regs[0] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_4A() { this.regs[0] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_4B() { this.regs[0] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_4C() { this.regs[0] = this.regs[11]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_4D() { this.regs[0] = this.regs[10]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_4E() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.regs[0] = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_4F() { this.regs[0] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_50() { this.regs[3] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_51() { this.regs[3] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_52() { this.regs[3] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_53() { this.regs[3] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_54() { this.regs[3] = this.regs[11]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_55() { this.regs[3] = this.regs[10]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_56() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.regs[3] = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_57() { this.regs[3] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_58() { this.regs[2] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_59() { this.regs[2] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_5A() { this.regs[2] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_5B() { this.regs[2] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_5C() { this.regs[2] = this.regs[11]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_5D() { this.regs[2] = this.regs[10]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_5E() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.regs[2] = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_5F() { this.regs[2] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_60() { this.regs[11] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_61() { this.regs[11] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_62() { this.regs[11] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_63() { this.regs[11] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_64() { this.regs[11] = this.regs[11]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_65() { this.regs[11] = this.regs[10]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_66() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.regs[5] = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_67() { this.regs[11] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_68() { this.regs[10] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_69() { this.regs[10] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_6A() { this.regs[10] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_6B() { this.regs[10] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_6C() { this.regs[10] = this.regs[11]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_6D() { this.regs[10] = this.regs[10]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_6E() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.regs[4] = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_6F() { this.regs[10] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_70() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF, this.regs[1]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_71() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF, this.regs[0]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_72() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF, this.regs[3]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_73() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF, this.regs[2]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_74() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF, this.regs[5]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_75() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF, this.regs[4]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_76() { this.is_halted = true; this.SET_PC((this.regs[15] << 8 | this.regs[14]) - 1 & 0xFFFF); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_77() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.ptr_write((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF, this.regs[7]); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_78() { this.regs[7] = this.regs[1]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_79() { this.regs[7] = this.regs[0]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_7A() { this.regs[7] = this.regs[3]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_7B() { this.regs[7] = this.regs[2]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_7C() { this.regs[7] = this.regs[11]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_7D() { this.regs[7] = this.regs[10]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_7E() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.regs[7] = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_7F() { this.regs[7] = this.regs[7]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_80() { this.tmp_word = this.regs[7] + this.regs[1]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[1] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[1]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_81() { this.tmp_word = this.regs[7] + this.regs[0]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[0] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[0]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_82() { this.tmp_word = this.regs[7] + this.regs[3]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[3] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[3]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_83() { this.tmp_word = this.regs[7] + this.regs[2]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[2] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[2]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_84() { this.tmp_word = this.regs[7] + this.regs[11]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[11] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[11]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_85() { this.tmp_word = this.regs[7] + this.regs[10]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[10] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[10]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_86() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_word = this.regs[7] + this.tmp_byte; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_87() { this.tmp_word = this.regs[7] + this.regs[7]; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[7] & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[7]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_88() { this.tmp_word = this.regs[7] + this.regs[1] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[1] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[1]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_89() { this.tmp_word = this.regs[7] + this.regs[0] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[0] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[0]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_8A() { this.tmp_word = this.regs[7] + this.regs[3] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[3] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[3]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_8B() { this.tmp_word = this.regs[7] + this.regs[2] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[2] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[2]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_8C() { this.tmp_word = this.regs[7] + this.regs[11] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[11] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[11]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_8D() { this.tmp_word = this.regs[7] + this.regs[10] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[10] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[10]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_8E() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_word = this.regs[7] + this.tmp_byte + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_8F() { this.tmp_word = this.regs[7] + this.regs[7] + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.regs[7] & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.regs[7]) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_90() { this.tmp_word = this.regs[7] - this.regs[1] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[1] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[1]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_91() { this.tmp_word = this.regs[7] - this.regs[0] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[0] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[0]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_92() { this.tmp_word = this.regs[7] - this.regs[3] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[3] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[3]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_93() { this.tmp_word = this.regs[7] - this.regs[2] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[2] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[2]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_94() { this.tmp_word = this.regs[7] - this.regs[11] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[11] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[11]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_95() { this.tmp_word = this.regs[7] - this.regs[10] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[10] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[10]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_96() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_97() { this.tmp_word = this.regs[7] - this.regs[7] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[7] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[7]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_98() { this.tmp_word = this.regs[7] - this.regs[1] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[1] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[1]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_99() { this.tmp_word = this.regs[7] - this.regs[0] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[0] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[0]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_9A() { this.tmp_word = this.regs[7] - this.regs[3] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[3] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[3]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_9B() { this.tmp_word = this.regs[7] - this.regs[2] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[2] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[2]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_9C() { this.tmp_word = this.regs[7] - this.regs[11] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[11] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[11]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_9D() { this.tmp_word = this.regs[7] - this.regs[10] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[10] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[10]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_9E() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_word = this.regs[7] - this.tmp_byte - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_9F() { this.tmp_word = this.regs[7] - this.regs[7] - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[7] & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[7]) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_A0() { this.regs[7] &= this.regs[1]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_A1() { this.regs[7] &= this.regs[0]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_A2() { this.regs[7] &= this.regs[3]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_A3() { this.regs[7] &= this.regs[2]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_A4() { this.regs[7] &= this.regs[11]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_A5() { this.regs[7] &= this.regs[10]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_A6() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.regs[7] &= this.tmp_byte; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_A7() { this.regs[7] &= this.regs[7]; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_A8() { this.regs[7] ^= this.regs[1]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_A9() { this.regs[7] ^= this.regs[0]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_AA() { this.regs[7] ^= this.regs[3]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_AB() { this.regs[7] ^= this.regs[2]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_AC() { this.regs[7] ^= this.regs[11]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_AD() { this.regs[7] ^= this.regs[10]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_AE() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.regs[7] ^= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_AF() { this.regs[7] ^= this.regs[7]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_B0() { this.regs[7] |= this.regs[1]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_B1() { this.regs[7] |= this.regs[0]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_B2() { this.regs[7] |= this.regs[3]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_B3() { this.regs[7] |= this.regs[2]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_B4() { this.regs[7] |= this.regs[11]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_B5() { this.regs[7] |= this.regs[10]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_B6() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.regs[7] |= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_B7() { this.regs[7] |= this.regs[7]; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_B8() { this.tmp_word = this.regs[7] - this.regs[1] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[1] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[1]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[1] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_B9() { this.tmp_word = this.regs[7] - this.regs[0] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[0] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[0]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[0] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_BA() { this.tmp_word = this.regs[7] - this.regs[3] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[3] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[3]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[3] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_BB() { this.tmp_word = this.regs[7] - this.regs[2] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[2] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[2]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[2] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_BC() { this.tmp_word = this.regs[7] - this.regs[11] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[11] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[11]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[11] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_BD() { this.tmp_word = this.regs[7] - this.regs[10] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[10] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[10]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[10] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_BE() { this.tmp_int8 = this.read_offset(); this.SET_MP((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_byte = this.ptr_read((this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_byte & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.tstate += 11; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_BF() { this.tmp_word = this.regs[7] - this.regs[7] & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.regs[7] & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.regs[7]); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.regs[7] & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_C0() { if (!(this.regs[6] & 0x40)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_C1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_BC(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_C2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x40)) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_C3() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_C4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x40)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_C5() { this.tmp_word_b = (this.regs[1] << 8 | this.regs[0]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_C6() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] + this.tmp_byte; this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_C7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x00); this.SET_MP(0x00); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_C8() { if (this.regs[6] & 0x40) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_C9() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x40) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB() { this.tmp_int8 = this.read_offset(); var op = this.read_byte(); optable_FD_CB[op].call(this); }
function Cpu_op_FD_CC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x40) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CD() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 13; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CE() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] + this.tmp_byte + (this.regs[6] & 0x01); this.tmp_byte_b = (this.regs[7] & 0x0F) + (this.tmp_byte & 0x0F) + (this.regs[6] & 0x01); this.tmp_int16 = CONV_INT8(this.regs[7]) + CONV_INT8(this.tmp_byte) + (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x08); this.SET_MP(0x08); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_D0() { if (!(this.regs[6] & 0x01)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_D1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_DE(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_D2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x01)) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_D3() { this.tmp_word = this.regs[7] << 8 | this.read_byte(); this.ptr_out(this.tmp_word, this.regs[7]); this.regs[16] = this.tmp_word + 1 & 0xFF; this.regs[17] = this.regs[7]; this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_D4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x01)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_D5() { this.tmp_word_b = (this.regs[3] << 8 | this.regs[2]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_D6() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_D7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x10); this.SET_MP(0x10); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_D8() { if (this.regs[6] & 0x01) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_D9() { this.tmp_word = (this.regs[1] << 8 | this.regs[0]); this.SET_BC((this.regs[19] << 8 | this.regs[18])); this.SET_BC_(this.tmp_word); this.tmp_word = (this.regs[3] << 8 | this.regs[2]); this.SET_DE((this.regs[21] << 8 | this.regs[20])); this.SET_DE_(this.tmp_word); this.tmp_word = (this.regs[5] << 8 | this.regs[4]); this.SET_HL((this.regs[23] << 8 | this.regs[22])); this.SET_HL_(this.tmp_word); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_DA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x01) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_DB() { this.tmp_word = this.regs[7] << 8 | this.read_byte(); this.regs[7] = this.ptr_in(this.tmp_word); this.SET_MP(this.tmp_word + 1 & 0xFFFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_DC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x01) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_DD() { this.prefix = 0xDD; this.optable = optable_DD; this.is_noint = true; }
function Cpu_op_FD_DE() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] - this.tmp_byte - (this.regs[6] & 0x01) & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) - (this.regs[6] & 0x01) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte) - (this.regs[6] & 0x01); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_word & 0xA8 | (this.tmp_word & 0xFF ? 0 : 0x40); this.regs[7] = this.tmp_word & 0xFF; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_DF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x18); this.SET_MP(0x18); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_E0() { if (!(this.regs[6] & 0x04)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_E1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_IY(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_E2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x04)) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_E3() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF) << 8; this.SET_MP(this.tmp_word); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.regs[10]); this.ptr_write((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF, this.regs[11]); this.SET_IY(this.tmp_word); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_E4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x04)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_E5() { this.tmp_word_b = (this.regs[11] << 8 | this.regs[10]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_E6() { this.tmp_byte = this.read_byte(); this.regs[7] &= this.tmp_byte; this.regs[6] = 0x10 | (this.regs[7] & 0xA8) | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_E7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x20); this.SET_MP(0x20); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_E8() { if (this.regs[6] & 0x04) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_E9() { this.SET_PC((this.regs[11] << 8 | this.regs[10])); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_EA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x04) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_EB() { this.tmp_word = (this.regs[3] << 8 | this.regs[2]); this.SET_DE(this.regs[5] << 8 | this.regs[4]); this.SET_HL(this.tmp_word); this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_EC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x04) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_ED() { this.prefix = 0xED; this.optable = optable_ED; this.is_noint = true; }
function Cpu_op_FD_EE() { this.tmp_byte = this.read_byte(); this.regs[7] ^= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_EF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x28); this.SET_MP(0x28); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_F0() { if (!(this.regs[6] & 0x80)) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_F1() { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_AF(this.tmp_word); this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_F2() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x80)) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_F3() { this.regs[28] = 0; this.regs[29] = 0; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_F4() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (!(this.regs[6] & 0x80)) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_F5() { this.tmp_word_b = (this.regs[7] << 8 | this.regs[6]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_F6() { this.tmp_byte = this.read_byte(); this.regs[7] |= this.tmp_byte; this.regs[6] = this.regs[7] & 0xA8 | (this.regs[7] ? 0 : 0x40) | Z80.tbl_parity[this.regs[7]]; this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_F7() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x30); this.SET_MP(0x30); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_F8() { if (this.regs[6] & 0x80) { this.tmp_word = this.ptr_read((this.regs[13] << 8 | this.regs[12])); this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.tmp_word |= this.ptr_read((this.regs[13] << 8 | this.regs[12])) << 8; this.SET_SP((this.regs[13] << 8 | this.regs[12]) + 1 & 0xFFFF); this.SET_PC(this.tmp_word); this.SET_MP(this.tmp_word); this.tstate += 7; } else { this.tstate += 1; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_F9() { this.SET_SP((this.regs[11] << 8 | this.regs[10])); this.tstate += 2; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_FA() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x80) { this.SET_PC(this.tmp_word); } this.tstate += 6; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_FB() { this.regs[28] = 1; this.regs[29] = 1; this.is_noint = true; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_FC() { this.tmp_word = this.read_byte(); this.tmp_word |= this.read_byte() << 8; this.SET_MP(this.tmp_word); if (this.regs[6] & 0x80) { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(this.tmp_word); this.tstate += 13; } else { this.tstate += 6; } this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_FD() { this.prefix = 0xFD; this.optable = optable_FD; this.is_noint = true; }
function Cpu_op_FD_FE() { this.tmp_byte = this.read_byte(); this.tmp_word = this.regs[7] - this.tmp_byte & 0xFFFF; this.tmp_byte_b = (this.regs[7] & 0x0F) - (this.tmp_byte & 0x0F) & 0xFF; this.tmp_int16 = CONV_INT8(this.regs[7]) - CONV_INT8(this.tmp_byte); this.regs[6] = (this.tmp_word & 0x100) >> 8 | 0x02 | this.tmp_byte_b & 0x10 | (this.tmp_int16 < -128 || this.tmp_int16 > 127 ? 0x04 : 0) | this.tmp_byte & 0x28 | this.tmp_word & 0x80 | (this.tmp_word & 0xFF ? 0 : 0x40); this.tstate += 3; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_FF() { this.tmp_word_b = (this.regs[15] << 8 | this.regs[14]); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b >> 8); this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF); this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.tmp_word_b & 0xFF); this.SET_PC(0x38); this.SET_MP(0x38); this.tstate += 7; this.prefix = 0x00; this.optable = optable_00; }
optable_FD = [
Cpu_op_FD_00, Cpu_op_FD_01, Cpu_op_FD_02, Cpu_op_FD_03, Cpu_op_FD_04, Cpu_op_FD_05, Cpu_op_FD_06, Cpu_op_FD_07, Cpu_op_FD_08, Cpu_op_FD_09, Cpu_op_FD_0A, Cpu_op_FD_0B, Cpu_op_FD_0C, Cpu_op_FD_0D, Cpu_op_FD_0E, Cpu_op_FD_0F,
Cpu_op_FD_10, Cpu_op_FD_11, Cpu_op_FD_12, Cpu_op_FD_13, Cpu_op_FD_14, Cpu_op_FD_15, Cpu_op_FD_16, Cpu_op_FD_17, Cpu_op_FD_18, Cpu_op_FD_19, Cpu_op_FD_1A, Cpu_op_FD_1B, Cpu_op_FD_1C, Cpu_op_FD_1D, Cpu_op_FD_1E, Cpu_op_FD_1F,
Cpu_op_FD_20, Cpu_op_FD_21, Cpu_op_FD_22, Cpu_op_FD_23, Cpu_op_FD_24, Cpu_op_FD_25, Cpu_op_FD_26, Cpu_op_FD_27, Cpu_op_FD_28, Cpu_op_FD_29, Cpu_op_FD_2A, Cpu_op_FD_2B, Cpu_op_FD_2C, Cpu_op_FD_2D, Cpu_op_FD_2E, Cpu_op_FD_2F,
Cpu_op_FD_30, Cpu_op_FD_31, Cpu_op_FD_32, Cpu_op_FD_33, Cpu_op_FD_34, Cpu_op_FD_35, Cpu_op_FD_36, Cpu_op_FD_37, Cpu_op_FD_38, Cpu_op_FD_39, Cpu_op_FD_3A, Cpu_op_FD_3B, Cpu_op_FD_3C, Cpu_op_FD_3D, Cpu_op_FD_3E, Cpu_op_FD_3F,
Cpu_op_FD_40, Cpu_op_FD_41, Cpu_op_FD_42, Cpu_op_FD_43, Cpu_op_FD_44, Cpu_op_FD_45, Cpu_op_FD_46, Cpu_op_FD_47, Cpu_op_FD_48, Cpu_op_FD_49, Cpu_op_FD_4A, Cpu_op_FD_4B, Cpu_op_FD_4C, Cpu_op_FD_4D, Cpu_op_FD_4E, Cpu_op_FD_4F,
Cpu_op_FD_50, Cpu_op_FD_51, Cpu_op_FD_52, Cpu_op_FD_53, Cpu_op_FD_54, Cpu_op_FD_55, Cpu_op_FD_56, Cpu_op_FD_57, Cpu_op_FD_58, Cpu_op_FD_59, Cpu_op_FD_5A, Cpu_op_FD_5B, Cpu_op_FD_5C, Cpu_op_FD_5D, Cpu_op_FD_5E, Cpu_op_FD_5F,
Cpu_op_FD_60, Cpu_op_FD_61, Cpu_op_FD_62, Cpu_op_FD_63, Cpu_op_FD_64, Cpu_op_FD_65, Cpu_op_FD_66, Cpu_op_FD_67, Cpu_op_FD_68, Cpu_op_FD_69, Cpu_op_FD_6A, Cpu_op_FD_6B, Cpu_op_FD_6C, Cpu_op_FD_6D, Cpu_op_FD_6E, Cpu_op_FD_6F,
Cpu_op_FD_70, Cpu_op_FD_71, Cpu_op_FD_72, Cpu_op_FD_73, Cpu_op_FD_74, Cpu_op_FD_75, Cpu_op_FD_76, Cpu_op_FD_77, Cpu_op_FD_78, Cpu_op_FD_79, Cpu_op_FD_7A, Cpu_op_FD_7B, Cpu_op_FD_7C, Cpu_op_FD_7D, Cpu_op_FD_7E, Cpu_op_FD_7F,
Cpu_op_FD_80, Cpu_op_FD_81, Cpu_op_FD_82, Cpu_op_FD_83, Cpu_op_FD_84, Cpu_op_FD_85, Cpu_op_FD_86, Cpu_op_FD_87, Cpu_op_FD_88, Cpu_op_FD_89, Cpu_op_FD_8A, Cpu_op_FD_8B, Cpu_op_FD_8C, Cpu_op_FD_8D, Cpu_op_FD_8E, Cpu_op_FD_8F,
Cpu_op_FD_90, Cpu_op_FD_91, Cpu_op_FD_92, Cpu_op_FD_93, Cpu_op_FD_94, Cpu_op_FD_95, Cpu_op_FD_96, Cpu_op_FD_97, Cpu_op_FD_98, Cpu_op_FD_99, Cpu_op_FD_9A, Cpu_op_FD_9B, Cpu_op_FD_9C, Cpu_op_FD_9D, Cpu_op_FD_9E, Cpu_op_FD_9F,
Cpu_op_FD_A0, Cpu_op_FD_A1, Cpu_op_FD_A2, Cpu_op_FD_A3, Cpu_op_FD_A4, Cpu_op_FD_A5, Cpu_op_FD_A6, Cpu_op_FD_A7, Cpu_op_FD_A8, Cpu_op_FD_A9, Cpu_op_FD_AA, Cpu_op_FD_AB, Cpu_op_FD_AC, Cpu_op_FD_AD, Cpu_op_FD_AE, Cpu_op_FD_AF,
Cpu_op_FD_B0, Cpu_op_FD_B1, Cpu_op_FD_B2, Cpu_op_FD_B3, Cpu_op_FD_B4, Cpu_op_FD_B5, Cpu_op_FD_B6, Cpu_op_FD_B7, Cpu_op_FD_B8, Cpu_op_FD_B9, Cpu_op_FD_BA, Cpu_op_FD_BB, Cpu_op_FD_BC, Cpu_op_FD_BD, Cpu_op_FD_BE, Cpu_op_FD_BF,
Cpu_op_FD_C0, Cpu_op_FD_C1, Cpu_op_FD_C2, Cpu_op_FD_C3, Cpu_op_FD_C4, Cpu_op_FD_C5, Cpu_op_FD_C6, Cpu_op_FD_C7, Cpu_op_FD_C8, Cpu_op_FD_C9, Cpu_op_FD_CA, Cpu_op_FD_CB, Cpu_op_FD_CC, Cpu_op_FD_CD, Cpu_op_FD_CE, Cpu_op_FD_CF,
Cpu_op_FD_D0, Cpu_op_FD_D1, Cpu_op_FD_D2, Cpu_op_FD_D3, Cpu_op_FD_D4, Cpu_op_FD_D5, Cpu_op_FD_D6, Cpu_op_FD_D7, Cpu_op_FD_D8, Cpu_op_FD_D9, Cpu_op_FD_DA, Cpu_op_FD_DB, Cpu_op_FD_DC, Cpu_op_FD_DD, Cpu_op_FD_DE, Cpu_op_FD_DF,
Cpu_op_FD_E0, Cpu_op_FD_E1, Cpu_op_FD_E2, Cpu_op_FD_E3, Cpu_op_FD_E4, Cpu_op_FD_E5, Cpu_op_FD_E6, Cpu_op_FD_E7, Cpu_op_FD_E8, Cpu_op_FD_E9, Cpu_op_FD_EA, Cpu_op_FD_EB, Cpu_op_FD_EC, Cpu_op_FD_ED, Cpu_op_FD_EE, Cpu_op_FD_EF,
Cpu_op_FD_F0, Cpu_op_FD_F1, Cpu_op_FD_F2, Cpu_op_FD_F3, Cpu_op_FD_F4, Cpu_op_FD_F5, Cpu_op_FD_F6, Cpu_op_FD_F7, Cpu_op_FD_F8, Cpu_op_FD_F9, Cpu_op_FD_FA, Cpu_op_FD_FB, Cpu_op_FD_FC, Cpu_op_FD_FD, Cpu_op_FD_FE, Cpu_op_FD_FF
];
function Cpu_op_FD_CB_00() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_01() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_02() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_03() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_04() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_05() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_06() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_07() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.tmp_byte >> 7; this.regs[6] = this.tmp_byte & 0xA9 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_08() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_09() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_0A() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_0B() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_0C() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_0D() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_0E() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_0F() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte >> 1 | this.tmp_byte << 7 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_10() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_11() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_12() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_13() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_14() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_15() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_16() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_17() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte << 1 & 0xFF | this.regs[6] & 0x01; this.regs[6] = this.tmp_byte_b >> 7 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_18() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_19() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_1A() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_1B() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_1C() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_1D() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_1E() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_1F() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte; this.tmp_byte = this.tmp_byte >> 1 | this.regs[6] << 7 & 0xFF; this.regs[6] = this.tmp_byte_b & 0x01 | this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_20() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_21() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_22() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_23() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_24() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_25() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_26() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_27() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_28() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_29() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_2A() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_2B() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_2C() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_2D() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_2E() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_2F() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte = this.tmp_byte & 0x80 | this.tmp_byte >> 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_30() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_31() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_32() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_33() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_34() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_35() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_36() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_37() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte >> 7; this.tmp_byte = this.tmp_byte << 1 & 0xFF | 0x01; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_38() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_39() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_3A() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_3B() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_3C() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_3D() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_3E() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_3F() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.regs[6] = this.tmp_byte & 0x01; this.tmp_byte >>= 1; this.regs[6] |= this.tmp_byte & 0xA8 | (this.tmp_byte ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte]; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_46() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x01; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_4E() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x02; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_56() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x04; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_5E() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x08; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_66() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x10; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_6E() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x20; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_76() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x40; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_7E() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte_b = this.tmp_byte & 0x80; this.regs[6] = this.regs[6] & 0x01 | 0x10 | this.tmp_byte_b & 0x80 | (this.tmp_byte_b ? 0 : 0x40) | Z80.tbl_parity[this.tmp_byte_b] | this.regs[17] & 0x28; this.tstate += 12; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_80() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_81() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_82() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_83() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_84() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_85() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_86() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_87() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x01; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_88() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_89() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_8A() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_8B() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_8C() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_8D() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_8E() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_8F() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x02; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_90() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_91() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_92() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_93() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_94() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_95() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_96() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_97() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x04; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_98() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_99() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_9A() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_9B() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_9C() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_9D() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_9E() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_9F() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x08; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_A0() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_A1() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_A2() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_A3() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_A4() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_A5() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_A6() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_A7() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x10; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_A8() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_A9() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_AA() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_AB() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_AC() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_AD() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_AE() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_AF() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x20; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_B0() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_B1() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_B2() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_B3() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_B4() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_B5() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_B6() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_B7() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x40; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_B8() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_B9() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_BA() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_BB() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_BC() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_BD() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_BE() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_BF() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte &= 0xFF ^ 0x80; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_C0() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_C1() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_C2() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_C3() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_C4() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_C5() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_C6() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_C7() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 0; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_C8() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_C9() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_CA() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_CB() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_CC() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_CD() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_CE() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_CF() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 1; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_D0() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_D1() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_D2() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_D3() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_D4() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_D5() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_D6() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_D7() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 2; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_D8() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_D9() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_DA() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_DB() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_DC() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_DD() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_DE() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_DF() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 3; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_E0() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_E1() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_E2() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_E3() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_E4() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_E5() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_E6() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_E7() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 4; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_E8() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_E9() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_EA() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_EB() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_EC() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_ED() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_EE() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_EF() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 5; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_F0() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_F1() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_F2() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_F3() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_F4() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_F5() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_F6() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_F7() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 6; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_F8() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[1] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_F9() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[0] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_FA() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[3] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_FB() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[2] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_FC() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[5] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_FD() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[4] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_FE() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
function Cpu_op_FD_CB_FF() { this.tmp_addr = (this.regs[11] << 8 | this.regs[10]) + this.tmp_int8 & 0xFFFF; this.SET_MP(this.tmp_addr); this.tmp_byte = this.ptr_read(this.tmp_addr); this.tmp_byte |= 0x01 << 7; this.regs[7] = this.tmp_byte; this.ptr_write(this.tmp_addr, this.tmp_byte); this.tstate += 15; this.prefix = 0x00; this.optable = optable_00; }
optable_FD_CB = [
Cpu_op_FD_CB_00, Cpu_op_FD_CB_01, Cpu_op_FD_CB_02, Cpu_op_FD_CB_03, Cpu_op_FD_CB_04, Cpu_op_FD_CB_05, Cpu_op_FD_CB_06, Cpu_op_FD_CB_07, Cpu_op_FD_CB_08, Cpu_op_FD_CB_09, Cpu_op_FD_CB_0A, Cpu_op_FD_CB_0B, Cpu_op_FD_CB_0C, Cpu_op_FD_CB_0D, Cpu_op_FD_CB_0E, Cpu_op_FD_CB_0F,
Cpu_op_FD_CB_10, Cpu_op_FD_CB_11, Cpu_op_FD_CB_12, Cpu_op_FD_CB_13, Cpu_op_FD_CB_14, Cpu_op_FD_CB_15, Cpu_op_FD_CB_16, Cpu_op_FD_CB_17, Cpu_op_FD_CB_18, Cpu_op_FD_CB_19, Cpu_op_FD_CB_1A, Cpu_op_FD_CB_1B, Cpu_op_FD_CB_1C, Cpu_op_FD_CB_1D, Cpu_op_FD_CB_1E, Cpu_op_FD_CB_1F,
Cpu_op_FD_CB_20, Cpu_op_FD_CB_21, Cpu_op_FD_CB_22, Cpu_op_FD_CB_23, Cpu_op_FD_CB_24, Cpu_op_FD_CB_25, Cpu_op_FD_CB_26, Cpu_op_FD_CB_27, Cpu_op_FD_CB_28, Cpu_op_FD_CB_29, Cpu_op_FD_CB_2A, Cpu_op_FD_CB_2B, Cpu_op_FD_CB_2C, Cpu_op_FD_CB_2D, Cpu_op_FD_CB_2E, Cpu_op_FD_CB_2F,
Cpu_op_FD_CB_30, Cpu_op_FD_CB_31, Cpu_op_FD_CB_32, Cpu_op_FD_CB_33, Cpu_op_FD_CB_34, Cpu_op_FD_CB_35, Cpu_op_FD_CB_36, Cpu_op_FD_CB_37, Cpu_op_FD_CB_38, Cpu_op_FD_CB_39, Cpu_op_FD_CB_3A, Cpu_op_FD_CB_3B, Cpu_op_FD_CB_3C, Cpu_op_FD_CB_3D, Cpu_op_FD_CB_3E, Cpu_op_FD_CB_3F,
Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E,
Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_56, Cpu_op_FD_CB_46, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_5E, Cpu_op_FD_CB_4E,
Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_66, Cpu_op_FD_CB_46, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_6E, Cpu_op_FD_CB_4E,
Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_46, Cpu_op_FD_CB_76, Cpu_op_FD_CB_46, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_4E, Cpu_op_FD_CB_7E, Cpu_op_FD_CB_4E,
Cpu_op_FD_CB_80, Cpu_op_FD_CB_81, Cpu_op_FD_CB_82, Cpu_op_FD_CB_83, Cpu_op_FD_CB_84, Cpu_op_FD_CB_85, Cpu_op_FD_CB_86, Cpu_op_FD_CB_87, Cpu_op_FD_CB_88, Cpu_op_FD_CB_89, Cpu_op_FD_CB_8A, Cpu_op_FD_CB_8B, Cpu_op_FD_CB_8C, Cpu_op_FD_CB_8D, Cpu_op_FD_CB_8E, Cpu_op_FD_CB_8F,
Cpu_op_FD_CB_90, Cpu_op_FD_CB_91, Cpu_op_FD_CB_92, Cpu_op_FD_CB_93, Cpu_op_FD_CB_94, Cpu_op_FD_CB_95, Cpu_op_FD_CB_96, Cpu_op_FD_CB_97, Cpu_op_FD_CB_98, Cpu_op_FD_CB_99, Cpu_op_FD_CB_9A, Cpu_op_FD_CB_9B, Cpu_op_FD_CB_9C, Cpu_op_FD_CB_9D, Cpu_op_FD_CB_9E, Cpu_op_FD_CB_9F,
Cpu_op_FD_CB_A0, Cpu_op_FD_CB_A1, Cpu_op_FD_CB_A2, Cpu_op_FD_CB_A3, Cpu_op_FD_CB_A4, Cpu_op_FD_CB_A5, Cpu_op_FD_CB_A6, Cpu_op_FD_CB_A7, Cpu_op_FD_CB_A8, Cpu_op_FD_CB_A9, Cpu_op_FD_CB_AA, Cpu_op_FD_CB_AB, Cpu_op_FD_CB_AC, Cpu_op_FD_CB_AD, Cpu_op_FD_CB_AE, Cpu_op_FD_CB_AF,
Cpu_op_FD_CB_B0, Cpu_op_FD_CB_B1, Cpu_op_FD_CB_B2, Cpu_op_FD_CB_B3, Cpu_op_FD_CB_B4, Cpu_op_FD_CB_B5, Cpu_op_FD_CB_B6, Cpu_op_FD_CB_B7, Cpu_op_FD_CB_B8, Cpu_op_FD_CB_B9, Cpu_op_FD_CB_BA, Cpu_op_FD_CB_BB, Cpu_op_FD_CB_BC, Cpu_op_FD_CB_BD, Cpu_op_FD_CB_BE, Cpu_op_FD_CB_BF,
Cpu_op_FD_CB_C0, Cpu_op_FD_CB_C1, Cpu_op_FD_CB_C2, Cpu_op_FD_CB_C3, Cpu_op_FD_CB_C4, Cpu_op_FD_CB_C5, Cpu_op_FD_CB_C6, Cpu_op_FD_CB_C7, Cpu_op_FD_CB_C8, Cpu_op_FD_CB_C9, Cpu_op_FD_CB_CA, Cpu_op_FD_CB_CB, Cpu_op_FD_CB_CC, Cpu_op_FD_CB_CD, Cpu_op_FD_CB_CE, Cpu_op_FD_CB_CF,
Cpu_op_FD_CB_D0, Cpu_op_FD_CB_D1, Cpu_op_FD_CB_D2, Cpu_op_FD_CB_D3, Cpu_op_FD_CB_D4, Cpu_op_FD_CB_D5, Cpu_op_FD_CB_D6, Cpu_op_FD_CB_D7, Cpu_op_FD_CB_D8, Cpu_op_FD_CB_D9, Cpu_op_FD_CB_DA, Cpu_op_FD_CB_DB, Cpu_op_FD_CB_DC, Cpu_op_FD_CB_DD, Cpu_op_FD_CB_DE, Cpu_op_FD_CB_DF,
Cpu_op_FD_CB_E0, Cpu_op_FD_CB_E1, Cpu_op_FD_CB_E2, Cpu_op_FD_CB_E3, Cpu_op_FD_CB_E4, Cpu_op_FD_CB_E5, Cpu_op_FD_CB_E6, Cpu_op_FD_CB_E7, Cpu_op_FD_CB_E8, Cpu_op_FD_CB_E9, Cpu_op_FD_CB_EA, Cpu_op_FD_CB_EB, Cpu_op_FD_CB_EC, Cpu_op_FD_CB_ED, Cpu_op_FD_CB_EE, Cpu_op_FD_CB_EF,
Cpu_op_FD_CB_F0, Cpu_op_FD_CB_F1, Cpu_op_FD_CB_F2, Cpu_op_FD_CB_F3, Cpu_op_FD_CB_F4, Cpu_op_FD_CB_F5, Cpu_op_FD_CB_F6, Cpu_op_FD_CB_F7, Cpu_op_FD_CB_F8, Cpu_op_FD_CB_F9, Cpu_op_FD_CB_FA, Cpu_op_FD_CB_FB, Cpu_op_FD_CB_FC, Cpu_op_FD_CB_FD, Cpu_op_FD_CB_FE, Cpu_op_FD_CB_FF
];
function Z80(ptr_read, ptr_write, ptr_in, ptr_out, ptr_read_int)
{
this.regs = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]
this.SET_AF = function(v) { this.regs[7] = v >> 8; this.regs[6] = v & 0xFF; }
this.SET_BC = function(v) { this.regs[1] = v >> 8; this.regs[0] = v & 0xFF; }
this.SET_DE = function(v) { this.regs[3] = v >> 8; this.regs[2] = v & 0xFF; }
this.SET_HL = function(v) { this.regs[5] = v >> 8; this.regs[4] = v & 0xFF; }
this.SET_IX = function(v) { this.regs[9] = v >> 8; this.regs[8] = v & 0xFF; }
this.SET_IY = function(v) { this.regs[11] = v >> 8; this.regs[10] = v & 0xFF; }
this.SET_SP = function(v) { this.regs[13] = v >> 8; this.regs[12] = v & 0xFF; }
this.SET_PC = function(v) { this.regs[15] = v >> 8; this.regs[14] = v & 0xFF; }
this.SET_MP = function(v) { this.regs[17] = v >> 8; this.regs[16] = v & 0xFF; }
this.SET_AF_ = function(v) { this.regs[25] = v >> 8; this.regs[24] = v & 0xFF; }
this.SET_BC_ = function(v) { this.regs[19] = v >> 8; this.regs[18] = v & 0xFF; }
this.SET_DE_ = function(v) { this.regs[21] = v >> 8; this.regs[20] = v & 0xFF; }
this.SET_HL_ = function(v) { this.regs[23] = v >> 8; this.regs[22] = v & 0xFF; }
this.is_halted = false;
this.is_opcode = false;
this.is_noint = false;
this.is_reset_pv = false;
this.is_read_int = false
this.ptr_read = ptr_read;
this.ptr_write = ptr_write;
this.ptr_in = ptr_in;
this.ptr_out = ptr_out;
this.ptr_read_int = ptr_read_int;
this.tick = null;
this.optable = null;
this.prefix = 0;
this.tstate = 0;
this.tmp_int8 = 0;
this.tmp_int16 = 0;
this.tmp_int32 = 0;
this.tmp_byte = 0;
this.tmp_byte_b = 0;
this.tmp_addr = 0;
this.tmp_word = 0;
this.tmp_word_b = 0;
this.tmp_dword = 0;
this.get_rp = function(idx)
{
return this.regs[idx + 1] << 8 | this.regs[idx];
}
this.set_rp = function(idx, v)
{
this.regs[idx + 1] = v >> 8;
this.regs[idx] = v & 0xFF;
}
this.read_byte = function()
{
if (this.is_read_int) return this.ptr_read_int();
var ret = this.ptr_read((this.regs[15] << 8 | this.regs[14]));
this.SET_PC((this.regs[15] << 8 | this.regs[14]) + 1 & 0xFFFF);
return ret;
}
this.read_offset = function()
{
var off = this.read_byte();
return off > 127 ? off - 256 : off;
}
this.reset = function() {
    for (var i = 0; i < this.regs.length; i++)
        this.regs[i] = 0;
    this.SET_AF(0x0);
    this.SET_SP(0x0);
    this.SET_BC(0x0);
    this.SET_DE(0x0);
    this.SET_HL(0x0);
    this.SET_IX(0x0);
    this.SET_IY(0x0);
    this.SET_AF_(0x0);
    this.SET_BC_(0x0);
    this.SET_DE_(0x0);
    this.SET_HL_(0x0);
    this.is_halted = false;
    this.is_opcode = false;
    this.is_noint = false;
    this.is_reset_pv = false;
    this.is_read_int = false;
    this.tick = Z80.tick_def;
    this.optable = optable_00;
    this.prefix = 0;
    this.tstate = 0;
}
this.do_int = function() {
    if (!this.regs[28] || this.is_noint || this.is_opcode || this.prefix)
        return 0;
    if (this.is_halted) {
        this.SET_PC((this.regs[15] << 8 | this.regs[14]) + 1 & 0xFFFF);
        this.is_halted = false;
    }
    this.regs[28] = 0;
    this.regs[29] = 0;
    if (this.is_reset_pv) {
        this.regs[6] &= ~0x04;
        this.is_reset_pv = false;
    }
    this.is_opcode = true;
    this.tstate = 0;
    switch (this.regs[30]) {
        case 0:
            this.is_read_int = true;
            Z80.tick_int.call(this);
            if (this.prefix)
                this.tick = Z80.tick_int;
            break;
        case 1:
            this.regs[27] = this.regs[27] & 0x80 | this.regs[27] + 1 & 0x7F;
            this.tstate += 6;
            optable_00[0xFF].call(this);
            break;
        case 2:
            this.regs[27] = this.regs[27] & 0x80 | this.regs[27] + 1 & 0x7F;
            var vec = this.ptr_read_int();
            var addr = this.regs[26] << 8 | vec;
            this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF);
            this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.regs[15]);
            this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF);
            this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.regs[14]);
            this.regs[14] = this.ptr_read(addr);
            this.regs[15] = this.ptr_read(addr + 1 & 0xFFFF);
            this.SET_MP((this.regs[15] << 8 | this.regs[14]));
            this.tstate += 19;
            break;
    }
    this.is_opcode = false;
    return this.tstate;
}
this.do_nmi = function() {
    if (this.is_noint || this.is_opcode || this.prefix)
        return 0;
    if (this.is_halted) {
        this.SET_PC((this.regs[15] << 8 | this.regs[14]) + 1 & 0xFFFF);
        this.is_halted = false;
    }
    this.is_opcode = true;
    this.regs[27] = this.regs[27] & 0x80 | this.regs[27] + 1 & 0x7F;
    this.regs[28] = 0;
    this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF);
    this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.regs[15]);
    this.SET_SP((this.regs[13] << 8 | this.regs[12]) - 1 & 0xFFFF);
    this.ptr_write((this.regs[13] << 8 | this.regs[12]), this.regs[14]);
    this.SET_PC(0x0066);
    this.SET_MP(0x0066);
    this.is_opcode = false;
    return 11;
}
this.is_int_possible = function() {
    return (this.regs[28] && !this.is_noint && !this.is_opcode && !this.prefix);
}
this.is_nmi_possible = function() {
    return (!this.is_noint && !this.is_opcode && !this.prefix);
}
Z80.init_tables();
this.reset();
}
Z80.is_tbl_initialized = false;
Z80.tbl_parity = [];
Z80.init_tables = function() {
    if (Z80.is_tbl_initialized)
        return;
    for (var i = 0; i < 0x100; i++) {
        var p = ((i & 0x80) >> 7) ^ ((i & 0x40) >> 6) ^ ((i & 0x20) >> 5) ^ ((i & 0x10) >> 4) ^ ((i & 0x08) >> 3) ^ ((i & 0x04) >> 2) ^ ((i & 0x02) >> 1) ^ (i & 0x01);
        Z80.tbl_parity.push(p ? 0 : 0x04);
    }
    Z80.is_tbl_initialized = true;
}
Z80.tick_def = function() {
    this.is_opcode = true;
    this.is_noint = false;
    this.is_reset_pv = false;
    this.tstate = 4;
    var op = this.ptr_read((this.regs[15] << 8 | this.regs[14]));
    this.SET_PC((this.regs[15] << 8 | this.regs[14]) + 1 & 0xFFFF);
    this.regs[27] = this.regs[27] & 0x80 | this.regs[27] + 1 & 0x7F;
    this.optable[op].call(this);
    this.is_opcode = false;
    return this.tstate;
}
Z80.tick_int = function() {
    this.is_opcode = true;
    this.is_noint = false;
    this.is_reset_pv = false;
    this.tstate = 6;
    var op = this.ptr_read_int();
    this.regs[27] = this.regs[27] & 0x80 | this.regs[27] + 1 & 0x7F;
    this.optable[op].call(this);
    this.is_opcode = false;
    if (this.prefix) {
        this.is_noint = true;
    } else {
        this.tick = Z80.tick_def;
        this.is_read_int = false;
    }
    return this.tstate;
}
Z80.reg_bc = 0;
Z80.reg_c = 0;
Z80.reg_b = 1;
Z80.reg_de = 2;
Z80.reg_e = 2;
Z80.reg_d = 3;
Z80.reg_hl = 4;
Z80.reg_l = 4;
Z80.reg_h = 5;
Z80.reg_af = 6;
Z80.reg_f = 6;
Z80.reg_a = 7;
Z80.reg_ix = 8;
Z80.reg_ixl = 8;
Z80.reg_ixh = 9;
Z80.reg_iy = 10;
Z80.reg_iyl = 10;
Z80.reg_iyh = 11;
Z80.reg_sp = 12;
Z80.reg_spl = 12;
Z80.reg_sph = 13;
Z80.reg_pc = 14;
Z80.reg_pcl = 14;
Z80.reg_pch = 15;
Z80.reg_mp = 16;
Z80.reg_mpl = 16;
Z80.reg_mph = 17;
Z80.reg_bc_ = 18;
Z80.reg_c_ = 18;
Z80.reg_b_ = 19;
Z80.reg_de_ = 20;
Z80.reg_e_ = 20;
Z80.reg_d_ = 21;
Z80.reg_hl_ = 22;
Z80.reg_l_ = 22;
Z80.reg_h_ = 23;
Z80.reg_af_ = 24;
Z80.reg_f_ = 24;
Z80.reg_a_ = 25;
Z80.reg_i = 26;
Z80.reg_r = 27;
Z80.reg_iff1 = 28;
Z80.reg_iff2 = 29;
Z80.reg_im = 30;
var D_optable_FD_CB = [
        "LD B,RLC (IY[SO])", "LD C,RLC (IY[SO])", "LD D,RLC (IY[SO])", "LD E,RLC (IY[SO])", "LD H,RLC (IY[SO])",
        "LD L,RLC (IY[SO])", "RLC (IY[SO])", "LD A,RLC (IY[SO])", "LD B,RRC (IY[SO])", "LD C,RRC (IY[SO])", "LD D,RRC (IY[SO])",
        "LD E,RRC (IY[SO])", "LD H,RRC (IY[SO])", "LD L,RRC (IY[SO])", "RRC (IY[SO])", "LD A,RRC (IY[SO])",
        "LD B,RL (IY[SO])", "LD C,RL (IY[SO])", "LD D,RL (IY[SO])", "LD E,RL (IY[SO])", "LD H,RL (IY[SO])", "LD L,RL (IY[SO])",
        "RL (IY[SO])", "LD A,RL (IY[SO])", "LD B,RR (IY[SO])", "LD C,RR (IY[SO])", "LD D,RR (IY[SO])", "LD E,RR (IY[SO])",
        "LD H,RR (IY[SO])", "LD L,RR (IY[SO])", "RR (IY[SO])", "LD A,RR (IY[SO])",
        "LD B,SLA (IY[SO])", "LD C,SLA (IY[SO])", "LD D,SLA (IY[SO])", "LD E,SLA (IY[SO])", "LD H,SLA (IY[SO])",
        "LD L,SLA (IY[SO])", "SLA (IY[SO])", "LD A,SLA (IY[SO])", "LD B,SRA (IY[SO])", "LD C,SRA (IY[SO])", "LD D,SRA (IY[SO])",
        "LD E,SRA (IY[SO])", "LD H,SRA (IY[SO])", "LD L,SRA (IY[SO])", "SRA (IY[SO])", "LD A,SRA (IY[SO])",
        "LD B,SLL (IY[SO])", "LD C,SLL (IY[SO])", "LD D,SLL (IY[SO])", "LD E,SLL (IY[SO])", "LD H,SLL (IY[SO])",
        "LD L,SLL (IY[SO])", "SLL (IY[SO])", "LD A,SLL (IY[SO])", "LD B,SRL (IY[SO])", "LD C,SRL (IY[SO])", "LD D,SRL (IY[SO])",
        "LD E,SRL (IY[SO])", "LD H,SRL (IY[SO])", "LD L,SRL (IY[SO])", "SRL (IY[SO])", "LD A,SRL (IY[SO])",
        "BIT 0,(IY[SO])", "BIT 0,(IY[SO])", "BIT 0,(IY[SO])", "BIT 0,(IY[SO])", "BIT 0,(IY[SO])", "BIT 0,(IY[SO])",
        "BIT 0,(IY[SO])", "BIT 0,(IY[SO])", "BIT 1,(IY[SO])", "BIT 1,(IY[SO])", "BIT 1,(IY[SO])", "BIT 1,(IY[SO])",
        "BIT 1,(IY[SO])", "BIT 1,(IY[SO])", "BIT 1,(IY[SO])", "BIT 1,(IY[SO])",
        "BIT 2,(IY[SO])", "BIT 2,(IY[SO])", "BIT 2,(IY[SO])", "BIT 2,(IY[SO])", "BIT 2,(IY[SO])", "BIT 2,(IY[SO])",
        "BIT 2,(IY[SO])", "BIT 2,(IY[SO])", "BIT 3,(IY[SO])", "BIT 3,(IY[SO])", "BIT 3,(IY[SO])", "BIT 3,(IY[SO])",
        "BIT 3,(IY[SO])", "BIT 3,(IY[SO])", "BIT 3,(IY[SO])", "BIT 3,(IY[SO])",
        "BIT 4,(IY[SO])", "BIT 4,(IY[SO])", "BIT 4,(IY[SO])", "BIT 4,(IY[SO])", "BIT 4,(IY[SO])", "BIT 4,(IY[SO])",
        "BIT 4,(IY[SO])", "BIT 4,(IY[SO])", "BIT 5,(IY[SO])", "BIT 5,(IY[SO])", "BIT 5,(IY[SO])", "BIT 5,(IY[SO])",
        "BIT 5,(IY[SO])", "BIT 5,(IY[SO])", "BIT 5,(IY[SO])", "BIT 5,(IY[SO])",
        "BIT 6,(IY[SO])", "BIT 6,(IY[SO])", "BIT 6,(IY[SO])", "BIT 6,(IY[SO])", "BIT 6,(IY[SO])", "BIT 6,(IY[SO])",
        "BIT 6,(IY[SO])", "BIT 6,(IY[SO])", "BIT 7,(IY[SO])", "BIT 7,(IY[SO])", "BIT 7,(IY[SO])", "BIT 7,(IY[SO])",
        "BIT 7,(IY[SO])", "BIT 7,(IY[SO])", "BIT 7,(IY[SO])", "BIT 7,(IY[SO])",
        "LD B,RES 0,(IY[SO])", "LD C,RES 0,(IY[SO])", "LD D,RES 0,(IY[SO])", "LD E,RES 0,(IY[SO])", "LD H,RES 0,(IY[SO])",
        "LD L,RES 0,(IY[SO])", "RES 0,(IY[SO])", "LD A,RES 0,(IY[SO])", "LD B,RES 1,(IY[SO])", "LD C,RES 1,(IY[SO])",
        "LD D,RES 1,(IY[SO])", "LD E,RES 1,(IY[SO])", "LD H,RES 1,(IY[SO])", "LD L,RES 1,(IY[SO])", "RES 1,(IY[SO])",
        "LD A,RES 1,(IY[SO])",
        "LD B,RES 2,(IY[SO])", "LD C,RES 2,(IY[SO])", "LD D,RES 2,(IY[SO])", "LD E,RES 2,(IY[SO])", "LD H,RES 2,(IY[SO])",
        "LD L,RES 2,(IY[SO])", "RES 2,(IY[SO])", "LD A,RES 2,(IY[SO])", "LD B,RES 3,(IY[SO])", "LD C,RES 3,(IY[SO])",
        "LD D,RES 3,(IY[SO])", "LD E,RES 3,(IY[SO])", "LD H,RES 3,(IY[SO])", "LD L,RES 3,(IY[SO])", "RES 3,(IY[SO])",
        "LD A,RES 3,(IY[SO])",
        "LD B,RES 4,(IY[SO])", "LD C,RES 4,(IY[SO])", "LD D,RES 4,(IY[SO])", "LD E,RES 4,(IY[SO])", "LD H,RES 4,(IY[SO])",
        "LD L,RES 4,(IY[SO])", "RES 4,(IY[SO])", "LD A,RES 4,(IY[SO])", "LD B,RES 5,(IY[SO])", "LD C,RES 5,(IY[SO])",
        "LD D,RES 5,(IY[SO])", "LD E,RES 5,(IY[SO])", "LD H,RES 5,(IY[SO])", "LD L,RES 5,(IY[SO])", "RES 5,(IY[SO])",
        "LD A,RES 5,(IY[SO])",
        "LD B,RES 6,(IY[SO])", "LD C,RES 6,(IY[SO])", "LD D,RES 6,(IY[SO])", "LD E,RES 6,(IY[SO])", "LD H,RES 6,(IY[SO])",
        "LD L,RES 6,(IY[SO])", "RES 6,(IY[SO])", "LD A,RES 6,(IY[SO])", "LD B,RES 7,(IY[SO])", "LD C,RES 7,(IY[SO])",
        "LD D,RES 7,(IY[SO])", "LD E,RES 7,(IY[SO])", "LD H,RES 7,(IY[SO])", "LD L,RES 7,(IY[SO])", "RES 7,(IY[SO])",
        "LD A,RES 7,(IY[SO])",
        "LD B,SET 0,(IY[SO])", "LD C,SET 0,(IY[SO])", "LD D,SET 0,(IY[SO])", "LD E,SET 0,(IY[SO])", "LD H,SET 0,(IY[SO])",
        "LD L,SET 0,(IY[SO])", "SET 0,(IY[SO])", "LD A,SET 0,(IY[SO])", "LD B,SET 1,(IY[SO])", "LD C,SET 1,(IY[SO])",
        "LD D,SET 1,(IY[SO])", "LD E,SET 1,(IY[SO])", "LD H,SET 1,(IY[SO])", "LD L,SET 1,(IY[SO])", "SET 1,(IY[SO])",
        "LD A,SET 1,(IY[SO])",
        "LD B,SET 2,(IY[SO])", "LD C,SET 2,(IY[SO])", "LD D,SET 2,(IY[SO])", "LD E,SET 2,(IY[SO])", "LD H,SET 2,(IY[SO])",
        "LD L,SET 2,(IY[SO])", "SET 2,(IY[SO])", "LD A,SET 2,(IY[SO])", "LD B,SET 3,(IY[SO])", "LD C,SET 3,(IY[SO])",
        "LD D,SET 3,(IY[SO])", "LD E,SET 3,(IY[SO])", "LD H,SET 3,(IY[SO])", "LD L,SET 3,(IY[SO])", "SET 3,(IY[SO])",
        "LD A,SET 3,(IY[SO])",
        "LD B,SET 4,(IY[SO])", "LD C,SET 4,(IY[SO])", "LD D,SET 4,(IY[SO])", "LD E,SET 4,(IY[SO])", "LD H,SET 4,(IY[SO])",
        "LD L,SET 4,(IY[SO])", "SET 4,(IY[SO])", "LD A,SET 4,(IY[SO])", "LD B,SET 5,(IY[SO])", "LD C,SET 5,(IY[SO])",
        "LD D,SET 5,(IY[SO])", "LD E,SET 5,(IY[SO])", "LD H,SET 5,(IY[SO])", "LD L,SET 5,(IY[SO])", "SET 5,(IY[SO])",
        "LD A,SET 5,(IY[SO])",
        "LD B,SET 6,(IY[SO])", "LD C,SET 6,(IY[SO])", "LD D,SET 6,(IY[SO])", "LD E,SET 6,(IY[SO])", "LD H,SET 6,(IY[SO])",
        "LD L,SET 6,(IY[SO])", "SET 6,(IY[SO])", "LD A,SET 6,(IY[SO])", "LD B,SET 7,(IY[SO])", "LD C,SET 7,(IY[SO])",
        "LD D,SET 7,(IY[SO])", "LD E,SET 7,(IY[SO])", "LD H,SET 7,(IY[SO])", "LD L,SET 7,(IY[SO])", "SET 7,(IY[SO])",
        "LD A,SET 7,(IY[SO])"
];
var D_optable_DD_CB = [
        "LD B,RLC (IX[SO])", "LD C,RLC (IX[SO])", "LD D,RLC (IX[SO])", "LD E,RLC (IX[SO])", "LD H,RLC (IX[SO])", "LD L,RLC (IX[SO])",
        "RLC (IX[SO])", "LD A,RLC (IX[SO])", "LD B,RRC (IX[SO])", "LD C,RRC (IX[SO])", "LD D,RRC (IX[SO])", "LD E,RRC (IX[SO])",
        "LD H,RRC (IX[SO])", "LD L,RRC (IX[SO])", "RRC (IX[SO])", "LD A,RRC (IX[SO])",
        "LD B,RL (IX[SO])", "LD C,RL (IX[SO])", "LD D,RL (IX[SO])", "LD E,RL (IX[SO])", "LD H,RL (IX[SO])", "LD L,RL (IX[SO])",
        "RL (IX[SO])", "LD A,RL (IX[SO])", "LD B,RR (IX[SO])", "LD C,RR (IX[SO])", "LD D,RR (IX[SO])", "LD E,RR (IX[SO])",
        "LD H,RR (IX[SO])", "LD L,RR (IX[SO])", "RR (IX[SO])", "LD A,RR (IX[SO])",
        "LD B,SLA (IX[SO])", "LD C,SLA (IX[SO])", "LD D,SLA (IX[SO])", "LD E,SLA (IX[SO])", "LD H,SLA (IX[SO])", "LD L,SLA (IX[SO])",
        "SLA (IX[SO])", "LD A,SLA (IX[SO])", "LD B,SRA (IX[SO])", "LD C,SRA (IX[SO])", "LD D,SRA (IX[SO])", "LD E,SRA (IX[SO])",
        "LD H,SRA (IX[SO])", "LD L,SRA (IX[SO])", "SRA (IX[SO])", "LD A,SRA (IX[SO])",
        "LD B,SLL (IX[SO])", "LD C,SLL (IX[SO])", "LD D,SLL (IX[SO])", "LD E,SLL (IX[SO])", "LD H,SLL (IX[SO])", "LD L,SLL (IX[SO])",
        "SLL (IX[SO])", "LD A,SLL (IX[SO])", "LD B,SRL (IX[SO])", "LD C,SRL (IX[SO])", "LD D,SRL (IX[SO])", "LD E,SRL (IX[SO])",
        "LD H,SRL (IX[SO])", "LD L,SRL (IX[SO])", "SRL (IX[SO])", "LD A,SRL (IX[SO])",
        "BIT 0,(IX[SO])", "BIT 0,(IX[SO])", "BIT 0,(IX[SO])", "BIT 0,(IX[SO])", "BIT 0,(IX[SO])", "BIT 0,(IX[SO])", "BIT 0,(IX[SO])",
        "BIT 0,(IX[SO])", "BIT 1,(IX[SO])", "BIT 1,(IX[SO])", "BIT 1,(IX[SO])", "BIT 1,(IX[SO])", "BIT 1,(IX[SO])", "BIT 1,(IX[SO])",
        "BIT 1,(IX[SO])", "BIT 1,(IX[SO])",
        "BIT 2,(IX[SO])", "BIT 2,(IX[SO])", "BIT 2,(IX[SO])", "BIT 2,(IX[SO])", "BIT 2,(IX[SO])", "BIT 2,(IX[SO])", "BIT 2,(IX[SO])",
        "BIT 2,(IX[SO])", "BIT 3,(IX[SO])", "BIT 3,(IX[SO])", "BIT 3,(IX[SO])", "BIT 3,(IX[SO])", "BIT 3,(IX[SO])", "BIT 3,(IX[SO])",
        "BIT 3,(IX[SO])", "BIT 3,(IX[SO])",
        "BIT 4,(IX[SO])", "BIT 4,(IX[SO])", "BIT 4,(IX[SO])", "BIT 4,(IX[SO])", "BIT 4,(IX[SO])", "BIT 4,(IX[SO])", "BIT 4,(IX[SO])",
        "BIT 4,(IX[SO])", "BIT 5,(IX[SO])", "BIT 5,(IX[SO])", "BIT 5,(IX[SO])", "BIT 5,(IX[SO])", "BIT 5,(IX[SO])", "BIT 5,(IX[SO])",
        "BIT 5,(IX[SO])", "BIT 5,(IX[SO])",
        "BIT 6,(IX[SO])", "BIT 6,(IX[SO])", "BIT 6,(IX[SO])", "BIT 6,(IX[SO])", "BIT 6,(IX[SO])", "BIT 6,(IX[SO])", "BIT 6,(IX[SO])",
        "BIT 6,(IX[SO])", "BIT 7,(IX[SO])", "BIT 7,(IX[SO])", "BIT 7,(IX[SO])", "BIT 7,(IX[SO])", "BIT 7,(IX[SO])", "BIT 7,(IX[SO])",
        "BIT 7,(IX[SO])", "BIT 7,(IX[SO])",
        "LD B,RES 0,(IX[SO])", "LD C,RES 0,(IX[SO])", "LD D,RES 0,(IX[SO])", "LD E,RES 0,(IX[SO])", "LD H,RES 0,(IX[SO])",
        "LD L,RES 0,(IX[SO])", "RES 0,(IX[SO])", "LD A,RES 0,(IX[SO])", "LD B,RES 1,(IX[SO])", "LD C,RES 1,(IX[SO])",
        "LD D,RES 1,(IX[SO])", "LD E,RES 1,(IX[SO])", "LD H,RES 1,(IX[SO])", "LD L,RES 1,(IX[SO])", "RES 1,(IX[SO])",
        "LD A,RES 1,(IX[SO])",
        "LD B,RES 2,(IX[SO])", "LD C,RES 2,(IX[SO])", "LD D,RES 2,(IX[SO])", "LD E,RES 2,(IX[SO])", "LD H,RES 2,(IX[SO])",
        "LD L,RES 2,(IX[SO])", "RES 2,(IX[SO])", "LD A,RES 2,(IX[SO])", "LD B,RES 3,(IX[SO])", "LD C,RES 3,(IX[SO])",
        "LD D,RES 3,(IX[SO])", "LD E,RES 3,(IX[SO])", "LD H,RES 3,(IX[SO])", "LD L,RES 3,(IX[SO])", "RES 3,(IX[SO])",
        "LD A,RES 3,(IX[SO])",
        "LD B,RES 4,(IX[SO])", "LD C,RES 4,(IX[SO])", "LD D,RES 4,(IX[SO])", "LD E,RES 4,(IX[SO])", "LD H,RES 4,(IX[SO])",
        "LD L,RES 4,(IX[SO])", "RES 4,(IX[SO])", "LD A,RES 4,(IX[SO])", "LD B,RES 5,(IX[SO])", "LD C,RES 5,(IX[SO])",
        "LD D,RES 5,(IX[SO])", "LD E,RES 5,(IX[SO])", "LD H,RES 5,(IX[SO])", "LD L,RES 5,(IX[SO])", "RES 5,(IX[SO])",
        "LD A,RES 5,(IX[SO])",
        "LD B,RES 6,(IX[SO])", "LD C,RES 6,(IX[SO])", "LD D,RES 6,(IX[SO])", "LD E,RES 6,(IX[SO])", "LD H,RES 6,(IX[SO])",
        "LD L,RES 6,(IX[SO])", "RES 6,(IX[SO])", "LD A,RES 6,(IX[SO])", "LD B,RES 7,(IX[SO])", "LD C,RES 7,(IX[SO])",
        "LD D,RES 7,(IX[SO])", "LD E,RES 7,(IX[SO])", "LD H,RES 7,(IX[SO])", "LD L,RES 7,(IX[SO])", "RES 7,(IX[SO])",
        "LD A,RES 7,(IX[SO])",
        "LD B,SET 0,(IX[SO])", "LD C,SET 0,(IX[SO])", "LD D,SET 0,(IX[SO])", "LD E,SET 0,(IX[SO])", "LD H,SET 0,(IX[SO])",
        "LD L,SET 0,(IX[SO])", "SET 0,(IX[SO])", "LD A,SET 0,(IX[SO])", "LD B,SET 1,(IX[SO])", "LD C,SET 1,(IX[SO])",
        "LD D,SET 1,(IX[SO])", "LD E,SET 1,(IX[SO])", "LD H,SET 1,(IX[SO])", "LD L,SET 1,(IX[SO])", "SET 1,(IX[SO])",
        "LD A,SET 1,(IX[SO])",
        "LD B,SET 2,(IX[SO])", "LD C,SET 2,(IX[SO])", "LD D,SET 2,(IX[SO])", "LD E,SET 2,(IX[SO])", "LD H,SET 2,(IX[SO])",
        "LD L,SET 2,(IX[SO])", "SET 2,(IX[SO])", "LD A,SET 2,(IX[SO])", "LD B,SET 3,(IX[SO])", "LD C,SET 3,(IX[SO])",
        "LD D,SET 3,(IX[SO])", "LD E,SET 3,(IX[SO])", "LD H,SET 3,(IX[SO])", "LD L,SET 3,(IX[SO])", "SET 3,(IX[SO])",
        "LD A,SET 3,(IX[SO])",
        "LD B,SET 4,(IX[SO])", "LD C,SET 4,(IX[SO])", "LD D,SET 4,(IX[SO])", "LD E,SET 4,(IX[SO])", "LD H,SET 4,(IX[SO])",
        "LD L,SET 4,(IX[SO])", "SET 4,(IX[SO])", "LD A,SET 4,(IX[SO])", "LD B,SET 5,(IX[SO])", "LD C,SET 5,(IX[SO])",
        "LD D,SET 5,(IX[SO])", "LD E,SET 5,(IX[SO])", "LD H,SET 5,(IX[SO])", "LD L,SET 5,(IX[SO])", "SET 5,(IX[SO])",
        "LD A,SET 5,(IX[SO])",
        "LD B,SET 6,(IX[SO])", "LD C,SET 6,(IX[SO])", "LD D,SET 6,(IX[SO])", "LD E,SET 6,(IX[SO])", "LD H,SET 6,(IX[SO])",
        "LD L,SET 6,(IX[SO])", "SET 6,(IX[SO])", "LD A,SET 6,(IX[SO])", "LD B,SET 7,(IX[SO])", "LD C,SET 7,(IX[SO])",
        "LD D,SET 7,(IX[SO])", "LD E,SET 7,(IX[SO])", "LD H,SET 7,(IX[SO])", "LD L,SET 7,(IX[SO])", "SET 7,(IX[SO])",
        "LD A,SET 7,(IX[SO])"
];
var D_optable_FD = [
        "*NOP", "*LD BC,[NN]", "*LD (BC),A", "*INC BC", "*INC B", "*DEC B", "*LD B,[N]", "*RLCA", "*EX AF,AF'", "ADD IY,BC",
        "*LD A,(BC)", "*DEC BC", "*INC C", "*DEC C", "*LD C,[N]", "*RRCA",
        "*DJNZ [O]", "*LD DE,[NN]", "*LD (DE),A", "*INC DE", "*INC D", "*DEC D", "*LD D,[N]", "*RLA", "*JR [O]", "ADD IY,DE",
        "*LD A,(DE)", "*DEC DE", "*INC E", "*DEC E", "*LD E,[N]", "*RRA",
        "*JR NZ,[O]", "LD IY,[NN]", "LD ([NN]),IY", "INC IY", "INC IYH", "DEC IYH", "LD IYH,[N]", "*DAA", "*JR Z,[O]", "ADD IY,IY",
        "LD IY,([NN])", "DEC IY", "INC IYL", "DEC IYL", "LD IYL,[N]", "*CPL",
        "*JR NC,[O]", "*LD SP,[NN]", "*LD ([NN]),A", "*INC SP", "INC (IY[SO])", "DEC (IY[SO])", "LD (IY[SO]),[N]", "*SCF", "*JR C,[O]",
        "ADD IY,SP", "*LD A,([NN])", "*DEC SP", "*INC A", "*DEC A", "*LD A,[N]", "*CCF",
        "*LD B,B", "*LD B,C", "*LD B,D", "*LD B,E", "LD B,IYH", "LD B,IYL", "LD B,(IY[SO])", "*LD B,A", "*LD C,B", "*LD C,C",
        "*LD C,D", "*LD C,E", "LD C,IYH", "LD C,IYL", "LD C,(IY[SO])", "*LD C,A",
        "*LD D,B", "*LD D,C", "*LD D,D", "*LD D,E", "LD D,IYH", "LD D,IYL", "LD D,(IY[SO])", "*LD D,A", "*LD E,B", "*LD E,C",
        "*LD E,D", "*LD E,E", "LD E,IYH", "LD E,IYL", "LD E,(IY[SO])", "*LD E,A",
        "LD IYH,B", "LD IYH,C", "LD IYH,D", "LD IYH,E", "LD IYH,H", "LD IYH,L", "LD H,(IY[SO])", "LD IYH,A", "LD IYL,B", "LD IYL,C",
        "LD IYL,D", "LD IYL,E", "LD IYL,H", "LD IYL,L", "LD L,(IY[SO])", "LD IYL,A",
        "LD (IY[SO]),B", "LD (IY[SO]),C", "LD (IY[SO]),D", "LD (IY[SO]),E", "LD (IY[SO]),H", "LD (IY[SO]),L", "*HALT",
        "LD (IY[SO]),A", "*LD A,B", "*LD A,C", "*LD A,D", "*LD A,E", "LD A,IYH", "LD A,IYL", "LD A,(IY[SO])", "*LD A,A",
        "*ADD A,B", "*ADD A,C", "*ADD A,D", "*ADD A,E", "ADD A,IYH", "ADD A,IYL", "ADD A,(IY[SO])", "*ADD A,A", "*ADC A,B",
        "*ADC A,C", "*ADC A,D", "*ADC A,E", "ADC A,IYH", "ADC A,IYL", "ADC A,(IY[SO])", "*ADC A,A",
        "*SUB B", "*SUB C", "*SUB D", "*SUB E", "SUB IYH", "SUB IYL", "SUB (IY[SO])", "*SUB A", "*SBC A,B", "*SBC A,C", "*SBC A,D",
        "*SBC A,E", "SBC A,IYH", "SBC A,IYL", "SBC A,(IY[SO])", "*SBC A,A",
        "*AND B", "*AND C", "*AND D", "*AND E", "AND IYH", "AND IYL", "AND (IY[SO])", "*AND A", "*XOR B", "*XOR C", "*XOR D", "*XOR E",
        "XOR IYH", "XOR IYL", "XOR (IY[SO])", "*XOR A",
        "*OR B", "*OR C", "*OR D", "*OR E", "OR IYH", "OR IYL", "OR (IY[SO])", "*OR A", "*CP B", "*CP C", "*CP D", "*CP E", "CP IYH",
        "CP IYL", "CP (IY[SO])", "*CP A",
        "*RET NZ", "*POP BC", "*JP NZ,[NN]", "*JP [NN]", "*CALL NZ,[NN]", "*PUSH BC", "*ADD A,[N]", "*RST #00", "*RET Z", "*RET",
        "*JP Z,[NN]", D_optable_FD_CB, "*CALL Z,[NN]", "*CALL [NN]", "*ADC A,[N]", "*RST #08",
        "*RET NC", "*POP DE", "*JP NC,[NN]", "*OUT ([N]),A", "*CALL NC,[NN]", "*PUSH DE", "*SUB [N]", "*RST #10", "*RET C", "*EXX",
        "*JP C,[NN]", "*IN A,([N])", "*CALL C,[NN]", "**NOP", "*SBC A,[N]", "*RST #18",
        "*RET PO", "POP IY", "*JP PO,[NN]", "EX (SP),IY", "*CALL PO,[NN]", "PUSH IY", "*AND [N]", "*RST #20", "*RET PE", "JP IY",
        "*JP PE,[NN]", "*EX DE,HL", "*CALL PE,[NN]", "**NOP", "*XOR [N]", "*RST #28",
        "*RET P", "*POP AF", "*JP P,[NN]", "*DI", "*CALL P,[NN]", "*PUSH AF", "*OR [N]", "*RST #30", "*RET M", "LD SP,IY",
        "*JP M,[NN]", "*EI", "*CALL M,[NN]", "**NOP", "*CP [N]", "*RST #38"
];
var D_optable_ED = [
        "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP",
        "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP",
        "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP",
        "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP",
        "IN B,(C)", "OUT (C),B", "SBC HL,BC", "LD ([NN]),BC", "NEG", "RETN", "IM 0", "LD I,A", "IN C,(C)", "OUT (C),C", "ADC HL,BC",
        "LD BC,([NN])", "NEG", "RETI", "IM 0", "LD R,A",
        "IN D,(C)", "OUT (C),D", "SBC HL,DE", "LD ([NN]),DE", "NEG", "RETN", "IM 1", "LD A,I", "IN E,(C)", "OUT (C),E", "ADC HL,DE",
        "LD DE,([NN])", "NEG", "RETN", "IM 2", "LD A,R",
        "IN H,(C)", "OUT (H),D", "SBC HL,HL", "LD ([NN]),HL", "NEG", "RETN", "IM 0", "RRD", "IN L,(C)", "OUT (C),L", "ADC HL,HL",
        "LD HL,([NN])", "NEG", "RETN", "IM 0", "RLD",
        "IN F,(C)", "OUT (C),0", "SBC HL,SP", "LD ([NN]),SP", "NEG", "RETN", "IM 1", "LD (HL),A", "IN A,(C)", "OUT (C),A", "ADC HL,SP",
        "LD SP,([NN])", "NEG", "RETN", "IM 2", "*NOP",
        "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP",
        "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP",
        "LDI", "CPI", "INI", "OUTI", "*NOP", "*NOP", "*NOP", "*NOP", "LDD", "CPD", "IND", "OUTD", "*NOP", "*NOP", "*NOP", "*NOP",
        "LDIR", "CPIR", "INIR", "OTIR", "*NOP", "*NOP", "*NOP", "*NOP", "LDDR", "CPDR", "INDR", "OTDR", "*NOP", "*NOP", "*NOP", "*NOP",
        "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP",
        "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP",
        "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP",
        "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP", "*NOP"
];
var D_optable_DD = [
        "*NOP", "*LD BC,[NN]", "*LD (BC),A", "*INC BC", "*INC B", "*DEC B", "*LD B,[N]", "*RLCA", "*EX AF,AF'", "ADD IX,BC",
        "*LD A,(BC)", "*DEC BC", "*INC C", "*DEC C", "*LD C,[N]", "*RRCA",
        "*DJNZ [O]", "*LD DE,[NN]", "*LD (DE),A", "*INC DE", "*INC D", "*DEC D", "*LD D,[N]", "*RLA", "*JR [O]", "ADD IX,DE",
        "*LD A,(DE)", "*DEC DE", "*INC E", "*DEC E", "*LD E,[N]", "*RRA",
        "*JR NZ,[O]", "LD IX,[NN]", "LD ([NN]),IX", "INC IX", "INC IXH", "DEC IXH", "LD IXH,[N]", "*DAA", "*JR Z,[O]", "ADD IX,IX",
        "LD IX,([NN])", "DEC IX", "INC IXL", "DEC IXL", "LD IXL,[N]", "*CPL",
        "*JR NC,[O]", "*LD SP,[NN]", "*LD ([NN]),A", "*INC SP", "INC (IX[SO])", "DEC (IX[SO])", "LD (IX[SO]),[N]", "*SCF", "*JR C,[O]",
        "ADD IX,SP", "*LD A,([NN])", "*DEC SP", "*INC A", "*DEC A", "*LD A,[N]", "*CCF",
        "*LD B,B", "*LD B,C", "*LD B,D", "*LD B,E", "LD B,IXH", "LD B,IXL", "LD B,(IX[SO])", "*LD B,A", "*LD C,B", "*LD C,C",
        "*LD C,D", "*LD C,E", "LD C,IXH", "LD C,IXL", "LD C,(IX[SO])", "*LD C,A",
        "*LD D,B", "*LD D,C", "*LD D,D", "*LD D,E", "LD D,IXH", "LD D,IXL", "LD D,(IX[SO])", "*LD D,A", "*LD E,B", "*LD E,C",
        "*LD E,D", "*LD E,E", "LD E,IXH", "LD E,IXL", "LD E,(IX[SO])", "*LD E,A",
        "LD IXH,B", "LD IXH,C", "LD IXH,D", "LD IXH,E", "LD IXH,H", "LD IXH,L", "LD H,(IX[SO])", "LD IXH,A", "LD IXL,B", "LD IXL,C",
        "LD IXL,D", "LD IXL,E", "LD IXL,H", "LD IXL,L", "LD L,(IX[SO])", "LD IXL,A",
        "LD (IX[SO]),B", "LD (IX[SO]),C", "LD (IX[SO]),D", "LD (IX[SO]),E", "LD (IX[SO]),H", "LD (IX[SO]),L", "*HALT", "LD (IX[SO]),A",
        "*LD A,B", "*LD A,C", "*LD A,D", "*LD A,E", "LD A,IXH", "LD A,IXL", "LD A,(IX[SO])", "*LD A,A",
        "*ADD A,B", "*ADD A,C", "*ADD A,D", "*ADD A,E", "ADD A,IXH", "ADD A,IXL", "ADD A,(IX[SO])", "*ADD A,A", "*ADC A,B", "*ADC A,C",
        "*ADC A,D", "*ADC A,E", "ADC A,IXH", "ADC A,IXL", "ADC A,(IX[SO])", "*ADC A,A",
        "*SUB B", "*SUB C", "*SUB D", "*SUB E", "SUB IXH", "SUB IXL", "SUB (IX[SO])", "*SUB A", "*SBC A,B", "*SBC A,C", "*SBC A,D",
        "*SBC A,E", "SBC A,IXH", "SBC A,IXL", "SBC A,(IX[SO])", "*SBC A,A",
        "*AND B", "*AND C", "*AND D", "*AND E", "AND IXH", "AND IXL", "AND (IX[SO])", "*AND A", "*XOR B", "*XOR C", "*XOR D", "*XOR E",
        "XOR IXH", "XOR IXL", "XOR (IX[SO])", "*XOR A",
        "*OR B", "*OR C", "*OR D", "*OR E", "OR IXH", "OR IXL", "OR (IX[SO])", "*OR A", "*CP B", "*CP C", "*CP D", "*CP E", "CP IXH",
        "CP IXL", "CP (IX[SO])", "*CP A",
        "*RET NZ", "*POP BC", "*JP NZ,[NN]", "*JP [NN]", "*CALL NZ,[NN]", "*PUSH BC", "*ADD A,[N]", "*RST #00", "*RET Z", "*RET",
        "*JP Z,[NN]", D_optable_DD_CB, "*CALL Z,[NN]", "*CALL [NN]", "*ADC A,[N]", "*RST #08",
        "*RET NC", "*POP DE", "*JP NC,[NN]", "*OUT ([N]),A", "*CALL NC,[NN]", "*PUSH DE", "*SUB [N]", "*RST #10", "*RET C", "*EXX",
        "*JP C,[NN]", "*IN A,([N])", "*CALL C,[NN]", "**NOP", "*SBC A,[N]", "*RST #18",
        "*RET PO", "POP IX", "*JP PO,[NN]", "EX (SP),IX", "*CALL PO,[NN]", "PUSH IX", "*AND [N]", "*RST #20", "*RET PE", "JP IX",
        "*JP PE,[NN]", "*EX DE,HL", "*CALL PE,[NN]", "**NOP", "*XOR [N]", "*RST #28",
        "*RET P", "*POP AF", "*JP P,[NN]", "*DI", "*CALL P,[NN]", "*PUSH AF", "*OR [N]", "*RST #30", "*RET M", "LD SP,IX", "*JP M,[NN]",
        "*EI", "*CALL M,[NN]", "**NOP", "*CP [N]", "*RST #38"
];
var D_optable_CB = [
        "RLC B", "RLC C", "RLC D", "RLC E", "RLC H", "RLC L", "RLC (HL)", "RLC A", "RRC B", "RRC C", "RRC D", "RRC E", "RRC H", "RRC L",
        "RRC (HL)", "RRC A",
        "RL B", "RL C", "RL D", "RL E", "RL H", "RL L", "RL (HL)", "RL A", "RR B", "RR C", "RR D", "RR E", "RR H", "RR L", "RR (HL)",
        "RR A",
        "SLA B", "SLA C", "SLA D", "SLA E", "SLA H", "SLA L", "SLA (HL)", "SLA A", "SRA B", "SRA C", "SRA D", "SRA E", "SRA H", "SRA L",
        "SRA (HL)", "SRA A",
        "SLL B", "SLL C", "SLL D", "SLL E", "SLL H", "SLL L", "SLL (HL)", "SLL A", "SRL B", "SRL C", "SRL D", "SRL E", "SRL H", "SRL L",
        "SRL (HL)", "SRL A",
        "BIT 0,B", "BIT 0,C", "BIT 0,D", "BIT 0,E", "BIT 0,H", "BIT 0,L", "BIT 0,(HL)", "BIT 0,A", "BIT 1,B", "BIT 1,C", "BIT 1,D",
        "BIT 1,E", "BIT 1,H", "BIT 1,L", "BIT 1,(HL)", "BIT 1,A",
        "BIT 2,B", "BIT 2,C", "BIT 2,D", "BIT 2,E", "BIT 2,H", "BIT 2,L", "BIT 2,(HL)", "BIT 2,A", "BIT 3,B", "BIT 3,C", "BIT 3,D",
        "BIT 3,E", "BIT 3,H", "BIT 3,L", "BIT 3,(HL)", "BIT 3,A",
        "BIT 4,B", "BIT 4,C", "BIT 4,D", "BIT 4,E", "BIT 4,H", "BIT 4,L", "BIT 4,(HL)", "BIT 4,A", "BIT 5,B", "BIT 5,C", "BIT 5,D",
        "BIT 5,E", "BIT 5,H", "BIT 5,L", "BIT 5,(HL)", "BIT 5,A",
        "BIT 6,B", "BIT 6,C", "BIT 6,D", "BIT 6,E", "BIT 6,H", "BIT 6,L", "BIT 6,(HL)", "BIT 6,A", "BIT 7,B", "BIT 7,C", "BIT 7,D",
        "BIT 7,E", "BIT 7,H", "BIT 7,L", "BIT 7,(HL)", "BIT 7,A",
        "RES 0,B", "RES 0,C", "RES 0,D", "RES 0,E", "RES 0,H", "RES 0,L", "RES 0,(HL)", "RES 0,A", "RES 1,B", "RES 1,C", "RES 1,D",
        "RES 1,E", "RES 1,H", "RES 1,L", "RES 1,(HL)", "RES 1,A",
        "RES 2,B", "RES 2,C", "RES 2,D", "RES 2,E", "RES 2,H", "RES 2,L", "RES 2,(HL)", "RES 2,A", "RES 3,B", "RES 3,C", "RES 3,D",
        "RES 3,E", "RES 3,H", "RES 3,L", "RES 3,(HL)", "RES 3,A",
        "RES 4,B", "RES 4,C", "RES 4,D", "RES 4,E", "RES 4,H", "RES 4,L", "RES 4,(HL)", "RES 4,A", "RES 5,B", "RES 5,C", "RES 5,D",
        "RES 5,E", "RES 5,H", "RES 5,L", "RES 5,(HL)", "RES 5,A",
        "RES 6,B", "RES 6,C", "RES 6,D", "RES 6,E", "RES 6,H", "RES 6,L", "RES 6,(HL)", "RES 6,A", "RES 7,B", "RES 7,C", "RES 7,D",
        "RES 7,E", "RES 7,H", "RES 7,L", "RES 7,(HL)", "RES 7,A",
        "SET 0,B", "SET 0,C", "SET 0,D", "SET 0,E", "SET 0,H", "SET 0,L", "SET 0,(HL)", "SET 0,A", "SET 1,B", "SET 1,C", "SET 1,D",
        "SET 1,E", "SET 1,H", "SET 1,L", "SET 1,(HL)", "SET 1,A",
        "SET 2,B", "SET 2,C", "SET 2,D", "SET 2,E", "SET 2,H", "SET 2,L", "SET 2,(HL)", "SET 2,A", "SET 3,B", "SET 3,C", "SET 3,D",
        "SET 3,E", "SET 3,H", "SET 3,L", "SET 3,(HL)", "SET 3,A",
        "SET 4,B", "SET 4,C", "SET 4,D", "SET 4,E", "SET 4,H", "SET 4,L", "SET 4,(HL)", "SET 4,A", "SET 5,B", "SET 5,C", "SET 5,D",
        "SET 5,E", "SET 5,H", "SET 5,L", "SET 5,(HL)", "SET 5,A",
        "SET 6,B", "SET 6,C", "SET 6,D", "SET 6,E", "SET 6,H", "SET 6,L", "SET 6,(HL)", "SET 6,A", "SET 7,B", "SET 7,C", "SET 7,D",
        "SET 7,E", "SET 7,H", "SET 7,L", "SET 7,(HL)", "SET 7,A"
];
var D_optable_00 = [
        "NOP", "LD BC,[NN]", "LD (BC),A", "INC BC", "INC B", "DEC B", "LD B,[N]", "RLCA", "EX AF,AF'", "ADD HL,BC", "LD A,(BC)",
        "DEC BC", "INC C", "DEC C", "LD C,[N]", "RRCA",
        "DJNZ [O]", "LD DE,[NN]", "LD (DE),A", "INC DE", "INC D", "DEC D", "LD D,[N]", "RLA", "JR [O]", "ADD HL,DE", "LD A,(DE)",
        "DEC DE", "INC E", "DEC E", "LD E,[N]", "RRA",
        "JR NZ,[O]", "LD HL,[NN]", "LD ([NN]),HL", "INC HL", "INC H", "DEC H", "LD H,[N]", "DAA", "JR Z,[O]", "ADD HL,HL",
        "LD HL,([NN])", "DEC HL", "INC L", "DEC L", "LD L,[N]", "CPL",
        "JR NC,[O]", "LD SP,[NN]", "LD ([NN]),A", "INC SP", "INC (HL)", "DEC (HL)", "LD (HL),[N]", "SCF", "JR C,[O]", "ADD HL,SP",
        "LD A,([NN])", "DEC SP", "INC A", "DEC A", "LD A,[N]", "CCF",
        "LD B,B", "LD B,C", "LD B,D", "LD B,E", "LD B,H", "LD B,L", "LD B,(HL)", "LD B,A", "LD C,B", "LD C,C", "LD C,D", "LD C,E",
        "LD C,H", "LD C,L", "LD C,(HL)", "LD C,A",
        "LD D,B", "LD D,C", "LD D,D", "LD D,E", "LD D,H", "LD D,L", "LD D,(HL)", "LD D,A", "LD E,B", "LD E,C", "LD E,D", "LD E,E",
        "LD E,H", "LD E,L", "LD E,(HL)", "LD E,A",
        "LD H,B", "LD H,C", "LD H,D", "LD H,E", "LD H,H", "LD H,L", "LD H,(HL)", "LD H,A", "LD L,B", "LD L,C", "LD L,D", "LD L,E",
        "LD L,H", "LD L,L", "LD L,(HL)", "LD L,A",
        "LD (HL),B", "LD (HL),C", "LD (HL),D", "LD (HL),E", "LD (HL),H", "LD (HL),L", "HALT", "LD (HL),A", "LD A,B", "LD A,C",
        "LD A,D", "LD A,E", "LD A,H", "LD A,L", "LD A,(HL)", "LD A,A",
        "ADD A,B", "ADD A,C", "ADD A,D", "ADD A,E", "ADD A,H", "ADD A,L", "ADD A,(HL)", "ADD A,A", "ADC A,B", "ADC A,C", "ADC A,D",
        "ADC A,E", "ADC A,H", "ADC A,L", "ADC A,(HL)", "ADC A,A",
        "SUB B", "SUB C", "SUB D", "SUB E", "SUB H", "SUB L", "SUB (HL)", "SUB A", "SBC A,B", "SBC A,C", "SBC A,D", "SBC A,E",
        "SBC A,H", "SBC A,L", "SBC A,(HL)", "SBC A,A",
        "AND B", "AND C", "AND D", "AND E", "AND H", "AND L", "AND (HL)", "AND A", "XOR B", "XOR C", "XOR D", "XOR E", "XOR H",
        "XOR L", "XOR (HL)", "XOR A",
        "OR B", "OR C", "OR D", "OR E", "OR H", "OR L", "OR (HL)", "OR A", "CP B", "CP C", "CP D", "CP E", "CP H", "CP L", "CP (HL)",
        "CP A",
        "RET NZ", "POP BC", "JP NZ,[NN]", "JP [NN]", "CALL NZ,[NN]", "PUSH BC", "ADD A,[N]", "RST #00", "RET Z", "RET", "JP Z,[NN]",
        D_optable_CB, "CALL Z,[NN]", "CALL [NN]", "ADC A,[N]", "RST #08",
        "RET NC", "POP DE", "JP NC,[NN]", "OUT ([N]),A", "CALL NC,[NN]", "PUSH DE", "SUB [N]", "RST #10", "RET C", "EXX", "JP C,[NN]",
        "IN A,([N])", "CALL C,[NN]", D_optable_DD, "SBC A,[N]", "RST #18",
        "RET PO", "POP HL", "JP PO,[NN]", "EX (SP),HL", "CALL PO,[NN]", "PUSH HL", "AND [N]", "RST #20", "RET PE", "JP HL",
        "JP PE,[NN]", "EX DE,HL", "CALL PE,[NN]", D_optable_ED, "XOR [N]", "RST #28",
        "RET P", "POP AF", "JP P,[NN]", "DI", "CALL P,[NN]", "PUSH AF", "OR [N]", "RST #30", "RET M", "LD SP,HL", "JP M,[NN]", "EI",
        "CALL M,[NN]", D_optable_FD, "CP [N]", "RST #38"
];
var optable_int8_array = new Int8Array(new ArrayBuffer(2));
function optable_toInt8(b) {
    optable_int8_array[0] = b;
    return optable_int8_array[0];
}
function createZ80(mio) {
    var cpu = new Z80(
        function(addr) { return mio.rd(addr); },
        function(addr, val) { mio.wr(addr, val); },
        function(port) { return mio.input(port & 0xFF); },
        function(port, val) { mio.output(port & 0xFF, val); },
        function() { return cpu.lastInterrupt; }
    );
    cpu.cycles = 0;
    cpu.lastInterrupt = 0;
    cpu.step = function() {
        do cpu.cycles += cpu.tick(); while (cpu.prefix);
        if (cpu.lastInterrupt) {
            var ticks = cpu.do_int();
            if (ticks != 0) {
                cpu.lastInterrupt = 0;
                cpu.cycles += ticks;
            }
        }
        cpu.pc = cpu.regs[15] << 8 | cpu.regs[14];
        return !cpu.is_halted;
    };
    cpu.setInterrupt = function(level, translate = true) {
        if (translate) switch (level) {
            case 0: cpu.lastInterrupt = 0xC7; break;
            case 1: cpu.lastInterrupt = 0xCF; break;
            case 2: cpu.lastInterrupt = 0xD7; break;
            case 3: cpu.lastInterrupt = 0xDF; break;
            case 4: cpu.lastInterrupt = 0xE7; break;
            case 5: cpu.lastInterrupt = 0xEF; break;
            case 6: cpu.lastInterrupt = 0xF7; break;
            case 7: cpu.lastInterrupt = 0xFF; break;
            default: return false;
        }
        else
            cpu.lastInterrupt = level;
        return true;
    };
    cpu.setRegisters = function(r) {
        var s = '';
        for (var i = 1; i < r.length; i += 2) {
            var reg = r[i].toLowerCase();
            var n = parseInt(r[i + 1], 16);
            switch (reg) {
                case 'a': cpu.regs[7] = n & 0xFF; break;
                case 'b': cpu.regs[1] = n & 0xFF; break;
                case 'c': cpu.regs[0] = n & 0xFF; break;
                case 'd': cpu.regs[3] = n & 0xFF; break;
                case 'e': cpu.regs[2] = n & 0xFF; break;
                case 'h': cpu.regs[5] = n & 0xFF; break;
                case 'l': cpu.regs[4] = n & 0xFF; break;
                case 'f': cpu.regs[6] = n & 0xFF; break;
                case 'fc': if (n & 1) cpu.regs[6] |= 0x01; else cpu.regs[6] &= ~0x01 & 0xFF; break;
                case 'fn': if (n & 1) cpu.regs[6] |= 0x02; else cpu.regs[6] &= ~0x02 & 0xFF; break;
                case 'fp': if (n & 1) cpu.regs[6] |= 0x04; else cpu.regs[6] &= ~0x04 & 0xFF; break;
                case 'fh': if (n & 1) cpu.regs[6] |= 0x10; else cpu.regs[6] &= ~0x10 & 0xFF; break;
                case 'fz': if (n & 1) cpu.regs[6] |= 0x40; else cpu.regs[6] &= ~0x40 & 0xFF; break;
                case 'fs': if (n & 1) cpu.regs[6] |= 0x80; else cpu.regs[6] &= ~0x80 & 0xFF; break;
                case 'af': cpu.SET_AF(n & 0xFFFF); break;
                case 'bc': cpu.SET_BC(n & 0xFFFF); break;
                case 'de': cpu.SET_DE(n & 0xFFFF); break;
                case 'hl': cpu.SET_HL(n & 0xFFFF); break;
                case 'sp': cpu.SET_SP(n & 0xFFFF); break;
                case 'pc': cpu.SET_PC(n & 0xFFFF); break;
                case 'ix': cpu.SET_IX(n & 0xFFFF); break;
                case 'iy': cpu.SET_IY(n & 0xFFFF); break;
                default: s += ' ' + reg; break;
            }
        }
        return (s.length > 0) ? 'unknown register(s): ' + s : s;
    };
    cpu.cpuStatus = function() {
        var s = '';
        var v = cpu.regs[7] << 8 | cpu.regs[6];
        s += 'AF:' + v.toString(16).padStart(4, '0');
        s += ' ' + (cpu.regs[6] & 0x80 ? 's' : '.') +
                   (cpu.regs[6] & 0x40 ? 'z' : '.') +
                   (cpu.regs[6] & 0x10 ? 'h' : '.') +
                   (cpu.regs[6] & 0x04 ? 'p' : '.') +
                   (cpu.regs[6] & 0x02 ? 'n' : '.') +
                   (cpu.regs[6] & 0x01 ? 'c' : '.') +
                   (cpu.regs[28] ? 'I' : '.');
        s += '|';
        v = cpu.regs[1] << 8 | cpu.regs[0];
        s += 'BC:' + v.toString(16).padStart(4, '0');
        v = cpu.regs[3] << 8 | cpu.regs[2];
        s += ' DE:' + v.toString(16).padStart(4, '0');
        s += '|';
        v = cpu.regs[5] << 8 | cpu.regs[4];
        s += 'HL:' + v.toString(16).padStart(4, '0');
        s += ' (HL):' + mio.rd(v).toString(16).padStart(2, '0');
        v = cpu.regs[13] << 8 | cpu.regs[12];
        s += ' SP:' + v.toString(16).padStart(4, '0');
        s += '#';
        v = cpu.regs[9] << 8 | cpu.regs[8];
        s += 'IX:' + v.toString(16).padStart(4, '0');
        v = cpu.regs[11] << 8 | cpu.regs[10];
        s += ' IY:' + v.toString(16).padStart(4, '0');
        return s;
    };
    cpu.disassembleInstruction = function(addr) {
        var origadr = addr;                             // remember original address
        var i = mio.rd(addr++);
        var r = D_optable_00[i];
        var soval = null, first = i, second = 0;
        if (typeof r !== 'string') {
            i = mio.rd(addr++);
            r = r[i];
            second = i;
        }
        if (typeof r !== 'string') {
            if ((first === 0xfd || first === 0xdd) && second === 0xcb)
                soval = optable_toInt8(mio.rd(addr++)); // swapped SO prm and code for fdcb and ddcb prefixes
            i = mio.rd(addr++);
            r = r[i];
        }
        i = r.indexOf('[N]');
        if (i >= 0) {
            var b = mio.rd(addr++);
            r = r.replace('[N]', b.toString(16).padStart(2, '0'));
        } else {
            i = r.indexOf('[NN]');
            if (i >= 0) {
                var b = mio.rd(addr++);
                var w = (mio.rd(addr++) << 8) | b;
                r = r.replace('[NN]', w.toString(16).padStart(4, '0'));
            } else {
                i = r.indexOf('[O]');
                if (i >= 0) {
                    var intb = optable_toInt8(mio.rd(addr++));
                    var w = addr + intb;
                    r = r.replace('[O]', w.toString(16).padStart(4, '0'));
                } else {
                    i = r.indexOf('[SO]');
                    if (i >= 0) {
                        if (soval === null)             // SO prm at the end of code
                            soval = optable_toInt8(mio.rd(addr++));
                        if (soval < 0)
                            r = r.replace('[SO]', '-' + (-soval).toString(16).padStart(2, '0'));
                        else
                            r = r.replace('[SO]', '+' + soval.toString(16).padStart(2, '0'));
                    }
                }
            }
        }
        i = r.indexOf(' ');
        if (i > 0)
            while (i++ < 4)
                r = r.substr(0, i) + ' ' + r.substr(i);
        i = r.indexOf(',');
        if (i > 0)
            r = r.substr(0, ++i) + ((i > 7) ? ' ' : '  ') + r.substr(i);
        if (addr - origadr < 4)
            r = '  ' + r;                               // align listing for up to 4 bytes code
        return [addr, r];
    };
    cpu.setPC = cpu.SET_PC;
    cpu.getPC = function() {
        return cpu.regs[15] << 8 | cpu.regs[14];
    };
    cpu.getSP = function() {
        return cpu.regs[13] << 8 | cpu.regs[12];
    };
    return cpu;
}
